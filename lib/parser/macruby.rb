# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

Parser.check_for_encoding_support

module Parser
  class MacRuby < Parser::Base

module_eval(<<'...end macruby.y/module_eval...', 'macruby.y', 2164)

  def version
    19 # closest released match: v1_9_0_2
  end

  def default_encoding
    Encoding::BINARY
  end
...end macruby.y/module_eval...
##### State transition tables begin ###

clist = [
'-286,255,-97,535,535,535,634,-286,-286,-286,669,203,204,-286,-286,556',
'-286,547,467,203,204,548,609,-99,206,661,577,255,-95,535,609,561,503',
'796,652,505,-286,-286,562,-286,-286,-286,-286,-286,-94,476,-287,739',
'738,475,686,-93,-94,-287,686,535,608,-80,670,-96,755,207,-287,-66,608',
'-100,-286,-286,-286,-286,-286,-286,-286,-286,-286,-286,-286,-286,-286',
'-286,686,-97,-286,-286,-286,-95,594,254,-80,576,-286,250,-466,-286,203',
'204,-97,-95,-286,-466,-286,207,-286,-286,-286,-286,-286,-286,-286,103',
'-286,-89,-286,254,102,-87,-97,103,103,103,555,-97,102,102,102,-455,-286',
'-286,-91,-90,660,-286,-455,-455,-455,-98,-529,-455,-455,-455,103,-455',
'-95,103,566,102,801,-95,102,-455,103,-455,-455,-455,103,102,-85,-86',
'-94,102,255,-455,-455,-94,-455,-455,-455,-455,-455,103,-92,-98,-287',
'-96,102,-96,207,-89,-96,-287,103,-87,203,204,207,102,-89,207,-287,-399',
'-87,-455,-455,-455,-455,-455,-455,-455,-455,-455,-455,-455,-455,-455',
'-455,568,567,-455,-455,-455,490,-455,-455,-89,718,-455,-89,-87,-455',
'-455,-87,-455,-89,-455,250,-455,-87,-455,-455,-455,-455,-455,-455,-455',
'809,-455,-530,-455,669,609,-529,-399,566,609,726,652,254,541,-399,-526',
'-527,-455,-455,-455,-455,-286,-455,-399,-455,-99,-455,-468,-286,-286',
'-286,74,418,-286,-286,-286,818,-286,207,608,75,-399,-90,608,-464,-65',
'-88,-286,-286,-286,76,-464,832,-86,-533,796,652,-286,-286,-94,-286,-286',
'-286,-286,-286,-461,-268,-455,-458,568,567,564,-461,566,-455,-458,-93',
'103,467,-526,-527,-100,102,-455,-458,-94,465,-286,-286,-286,-286,-286',
'-286,-286,-286,-286,-286,-286,-286,-286,-286,-526,-527,-286,-286,-286',
'-533,741,-286,-458,590,-286,463,-533,-286,-286,-458,-286,-529,-286,859',
'-286,-533,-286,-286,-286,-286,-286,-286,-286,-533,-286,566,-286,568',
'567,578,-533,-533,-533,-533,452,503,-533,-533,505,-533,-286,-286,-286',
'-286,206,-286,-89,-286,-533,-98,-463,-533,-97,103,247,203,204,-463,102',
'-533,-533,248,-533,-533,-533,-533,-533,677,99,518,517,516,522,519,420',
'677,-465,518,517,516,522,519,503,-465,820,502,568,567,573,-533,-533',
'-533,-533,-533,-533,-533,-533,-533,-533,-533,-533,-533,-533,-533,-462',
'-533,-533,-533,822,595,-533,-462,825,-533,826,-529,-533,566,750,-533',
'566,-533,833,-533,419,-533,-533,-533,-533,-533,-533,-533,-529,-533,-533',
'-533,677,-533,518,517,516,522,519,202,-460,792,300,301,-458,-533,-533',
'-460,-88,906,-533,-458,-458,-458,-96,589,-458,-458,-458,751,-458,518',
'517,516,522,519,-455,207,-458,673,-458,-458,-458,-455,568,567,571,568',
'567,569,-458,-458,-92,-458,-458,-458,-458,-458,-100,375,203,204,-468',
'-287,377,376,524,103,-87,839,-287,840,102,417,-95,528,527,531,530,-287',
'-458,-458,-458,-458,-458,-458,-458,-458,-458,-458,-458,-458,-458,-458',
'485,486,-458,-458,-458,551,-458,-458,203,204,-458,-85,550,-458,-458',
'750,-458,-93,-458,645,-458,552,-458,-458,-458,-458,-458,-458,-458,103',
'-458,-530,-458,521,102,518,517,516,522,519,106,107,108,109,110,490,-458',
'-458,-458,-458,-533,-458,207,-458,378,-458,103,-533,-533,-533,103,102',
'-533,-533,-533,102,-533,543,849,503,524,510,505,850,544,-533,-533,-533',
'-533,528,527,531,530,542,207,852,-533,-533,-91,-533,-533,-533,-533,-533',
'-99,855,830,857,518,517,516,677,519,518,517,516,522,519,677,859,518',
'517,516,522,519,859,-533,-533,-533,-533,-533,-533,-533,-533,-533,-533',
'-533,-533,-533,-533,207,864,-533,-533,-533,493,740,-533,673,866,-533',
'365,494,-533,-533,673,-533,676,-533,868,-533,416,-533,-533,-533,-533',
'-533,-533,-533,689,-533,-533,-533,207,677,299,518,517,516,522,519,106',
'107,108,109,110,-533,-533,-533,-533,541,-533,874,-533,298,-96,5,64,65',
'66,9,52,876,712,713,58,59,714,97,98,62,524,60,61,63,28,29,67,68,207',
'879,-269,531,530,27,26,25,91,90,92,93,579,677,18,518,517,516,522,519',
'8,42,7,10,95,94,96,85,51,87,86,88,582,89,97,98,682,83,84,39,40,38,677',
'585,518,517,516,522,519,677,673,518,517,516,522,519,-280,886,-286,676',
'887,37,245,-280,31,-286,890,53,54,892,-530,55,-280,33,-286,465,895,41',
'677,673,518,517,516,522,519,19,524,680,863,226,82,74,77,78,226,79,80',
'531,530,900,75,81,275,64,65,66,9,52,57,226,76,58,59,679,671,524,62,668',
'60,61,63,28,29,67,68,665,531,530,663,-266,27,26,25,91,90,92,93,908,677',
'18,518,517,516,522,519,8,42,910,10,95,94,96,85,51,87,86,88,911,89,97',
'98,916,83,84,39,40,38,677,207,518,517,516,522,519,677,673,518,517,516',
'522,519,481,918,-467,414,921,37,923,482,31,-467,415,53,54,859,859,55',
'480,33,-467,416,207,41,677,673,518,517,516,522,519,19,524,928,207,226',
'82,74,77,78,498,79,80,531,530,198,75,81,275,64,65,66,9,52,57,908,76',
'58,59,652,250,524,62,937,60,61,63,28,29,67,68,859,531,530,859,859,27',
'26,25,91,90,92,93,941,677,18,518,517,516,522,519,8,42,859,10,95,94,96',
'85,51,87,86,88,908,89,97,98,859,83,84,39,40,38,830,197,518,517,516,196',
'519,677,673,518,517,516,522,519,-329,195,-286,-467,599,37,645,-329,31',
'-286,-467,53,54,496,-530,55,-329,33,-286,-467,859,41,677,465,518,517',
'516,522,519,19,524,207,111,207,82,74,77,78,859,79,80,531,530,960,75',
'81,275,64,65,66,9,52,57,908,76,58,59,452,541,524,62,452,60,61,63,28',
'29,67,68,367,531,530,207,467,27,26,25,91,90,92,93,743,507,18,106,107',
'108,109,110,8,42,727,10,95,94,96,85,51,87,86,88,506,89,97,98,465,83',
'84,39,40,38,545,898,106,107,108,109,110,677,899,518,517,516,522,519',
'-280,207,551,897,762,37,467,-280,31,927,499,53,54,645,207,55,-280,33',
'552,498,226,41,677,250,518,517,516,522,519,19,524,957,250,645,82,74',
'77,78,492,79,80,531,530,546,75,81,275,64,65,66,9,52,57,226,76,58,59',
'226,491,524,62,769,60,61,63,28,29,67,68,-267,531,530,-266,773,27,26',
'25,91,90,92,93,487,750,18,720,787,226,250,717,8,42,790,10,95,94,96,85',
'51,87,86,88,207,89,97,98,669,83,84,39,40,38,226,-552,-552,-552,-552',
'232,234,223,200,-552,-552,225,224,221,222,201,240,241,207,37,226,652',
'31,800,199,53,54,259,207,55,958,33,223,483,229,41,225,224,221,222,233',
'231,227,19,228,207,,,82,74,77,78,223,79,80,,225,224,75,81,275,64,65',
'66,9,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90',
'92,93,,,18,,,,,583,8,42,,10,95,94,96,85,51,87,86,88,,89,97,98,,83,84',
'39,40,38,226,230,235,236,237,232,234,242,243,238,239,-286,219,220,,',
'240,241,-286,37,226,,31,-530,,53,54,-286,,55,,33,223,,229,41,225,224',
'221,222,233,231,227,19,228,,,,82,74,77,78,223,79,80,226,225,224,75,81',
',244,-281,-233,,,57,,76,-281,-281,-281,,,-281,-281,-281,751,-281,518',
'517,516,522,519,,,,223,-281,-281,-281,225,224,221,222,,,,-281,-281,',
'-281,-281,-281,-281,-281,,,,,,,,,524,,,,,,,,,528,527,531,530,,-281,-281',
'-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,,,-281,-281',
'-281,,,-281,,,-281,,,-281,-281,,-281,,-281,,-281,,-281,-281,-281,-281',
'-281,-281,-281,,-281,,-281,,,,,,,,,,,,,,-281,-281,-281,-281,,-281,,-281',
'275,64,65,66,9,52,,,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25',
'91,90,92,93,,,18,,,,,,8,42,,10,95,94,96,85,51,87,86,88,,89,97,98,,83',
'84,39,40,38,226,,,,,,,,,,,,,,,,240,241,,37,,,31,,,53,54,,,55,,33,223',
',229,41,225,224,221,222,,,227,19,228,,,,82,74,77,78,,79,80,,,,75,81',
'5,64,65,66,9,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26',
'25,91,90,92,93,,,18,,,,,,8,42,7,10,95,94,96,85,51,87,86,88,,89,97,98',
',83,84,39,40,38,226,,,,,,,,,,,,,,,,240,241,,37,,,31,,,53,54,,,55,,33',
'223,,229,41,225,224,221,222,,,227,19,228,,,,82,74,77,78,,79,80,,,,75',
'81,275,64,65,66,9,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27',
'26,25,91,90,92,93,,,18,,,,,,8,42,,10,95,94,96,85,51,87,86,88,,89,97',
'98,,83,84,39,40,38,226,-552,-552,-552,-552,232,234,,,-552,-552,,,,,',
'240,241,,37,,,31,,,53,54,,,55,,33,223,,229,41,225,224,221,222,233,231',
'227,19,228,,,,82,74,77,78,,79,80,,,,75,81,275,64,65,66,9,52,57,,76,58',
'59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,8',
'42,,10,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,226,-552,-552',
'-552,-552,232,234,,,-552,-552,,,,,,240,241,,37,,,31,,,53,54,,,55,,33',
'223,,229,41,225,224,221,222,233,231,227,19,228,,,,82,74,77,78,,79,80',
',,,75,81,275,64,65,66,9,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68',
',,,,,27,26,25,91,90,92,93,,,18,,,,,,8,42,,10,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,226,-552,-552,-552,-552,232,234,,,-552,-552',
',,,,,240,241,,37,,,31,,,53,54,,,55,,33,223,,229,41,225,224,221,222,233',
'231,227,19,228,,,,82,74,77,78,,79,80,,,,75,81,275,64,65,66,9,52,57,',
'76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18',
',,,,,8,42,,10,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,226',
'-552,-552,-552,-552,232,234,,,-552,-552,,,,,,240,241,,37,,,31,,,53,54',
',,55,,33,223,,229,41,225,224,221,222,233,231,227,19,228,,,,82,74,77',
'78,,79,80,,,,75,81,275,64,65,66,9,52,57,,76,58,59,,,,62,,60,61,63,28',
'29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,8,42,,10,95,94,96,85,51',
'87,86,88,,89,97,98,,83,84,39,40,38,226,,,,,,,,,,,,,,,,240,241,,37,,',
'31,,,53,54,,,55,,33,223,,229,41,225,224,221,222,,,227,19,228,,,,82,74',
'77,78,,79,80,,,,75,81,275,64,65,66,9,52,57,,76,58,59,,,,62,,60,61,63',
'28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,8,42,,10,95,94,96,85',
'51,87,86,88,,89,97,98,,83,84,39,40,38,226,230,235,236,237,232,234,242',
',238,239,,,,,,240,241,,37,,,31,,,53,54,,,55,,33,223,,229,41,225,224',
'221,222,233,231,227,19,228,,,,82,74,77,78,,79,80,,,,75,81,275,64,65',
'66,9,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90',
'92,93,,,18,,,,,,8,42,,10,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39',
'40,38,226,230,235,236,237,232,234,242,243,238,239,,-552,-552,,,240,241',
',37,,,277,,,53,54,,,55,,33,223,,229,41,225,224,221,222,233,231,227,19',
'228,,,,82,74,77,78,,79,80,,,,75,81,275,64,65,66,9,52,57,,76,58,59,,',
',62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,583,8,42',
',10,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,226,230,235,236',
'237,232,234,242,243,238,239,,219,220,,,240,241,,37,,,31,,,53,54,,,55',
',33,223,,229,41,225,224,221,222,233,231,227,19,228,,,,82,74,77,78,,79',
'80,,,,75,81,,244,-535,,,,57,,76,-535,-535,-535,,,-535,-535,-535,521',
'-535,518,517,516,522,519,,,,-535,-535,-535,-535,,,,,,,,-535,-535,,-535',
'-535,-535,-535,-535,,,,,,,,,524,707,,,,,,,,528,527,531,530,,-535,-535',
'-535,-535,-535,-535,-535,-535,-535,-535,-535,-535,-535,-535,,,-535,-535',
'-535,,,-535,,,-535,,,-535,-535,,-535,,-535,,-535,,-535,-535,-535,-535',
'-535,-535,-535,,-535,-535,-535,,,,,,,,,,,,,,-535,-535,-535,-535,,-535',
',-535,275,64,65,66,9,52,,,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27',
'26,25,91,90,92,93,,,18,,,,,586,8,42,,10,95,94,96,85,51,87,86,88,,89',
'97,98,,83,84,39,40,38,226,230,235,236,237,232,234,242,243,238,239,,219',
'220,,,240,241,,37,,,31,,,53,54,,,55,,33,223,,229,41,225,224,221,222',
'233,231,227,19,228,,,,82,74,77,78,,79,80,,,,75,81,,244,-534,,,,57,,76',
'-534,-534,-534,,,-534,-534,-534,521,-534,518,517,516,522,519,,,,-534',
'-534,-534,-534,,,,,,,,-534,-534,,-534,-534,-534,-534,-534,,,,,,,,,524',
',,,,,,,,528,527,531,530,,-534,-534,-534,-534,-534,-534,-534,-534,-534',
'-534,-534,-534,-534,-534,,,-534,-534,-534,,,-534,,,-534,,,-534,-534',
',-534,,-534,,-534,,-534,-534,-534,-534,-534,-534,-534,,-534,-534,-534',
',,,,,,,,,,,,,-534,-534,-534,-534,,-534,,-534,275,64,65,66,9,52,,,,58',
'59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,8',
'42,,10,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,226,-552,-552',
'-552,-552,232,234,,,-552,-552,,,,,,240,241,,37,,,277,,,53,54,,,55,,33',
'223,,229,41,225,224,221,222,233,231,227,19,228,,,,82,74,77,78,,79,80',
',,,75,81,275,64,65,66,9,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68',
',,,,,27,26,25,91,90,92,93,,,18,,,,,,8,42,,10,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,226,230,235,236,237,232,234,242,243,238,239',
',-552,-552,,,240,241,,37,,,31,,,53,54,,,55,,33,223,,229,41,225,224,221',
'222,233,231,227,19,228,,,,82,74,77,78,,79,80,,,,75,81,275,64,65,66,9',
'52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93',
',,18,,,,,,8,42,,10,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38',
'226,,,,,,,,,,,,,,,,240,241,,37,,,31,,,53,54,,,55,,33,223,,229,41,225',
'224,221,222,,,227,19,228,,,,82,74,77,78,,79,80,,,,75,81,275,64,65,66',
'9,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92',
'93,,,18,,,,,,8,42,,10,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40',
'38,226,230,235,236,237,232,234,,,238,239,,,,,,240,241,,37,,,31,,,53',
'54,,,55,,33,223,,229,41,225,224,221,222,233,231,227,19,228,,,,82,74',
'77,78,,79,80,,,,75,81,275,64,65,66,9,52,57,,76,58,59,,,,62,,60,61,63',
'28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,8,42,,10,95,94,96,85',
'51,87,86,88,,89,97,98,,83,84,39,40,38,226,,,,,,,,,,,,,,,,240,241,,37',
',,31,,,53,54,,,55,,33,223,,229,41,225,224,221,222,,,,19,,,,,82,74,77',
'78,,79,80,,,,75,81,275,64,65,66,9,52,57,,76,58,59,,,,62,,60,61,63,28',
'29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,8,42,,10,95,94,96,85,51',
'87,86,88,,89,97,98,,83,84,39,40,38,226,,,,,,,,,,,,,,,,240,241,,37,,',
'277,,,53,54,,,55,,33,223,,,41,225,224,221,222,,,,19,,,,,82,74,77,78',
',79,80,,,,75,81,275,64,65,66,9,52,57,,76,58,59,,,,62,,60,61,63,28,29',
'67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,8,42,,10,95,94,96,85,51,87',
'86,88,,89,97,98,,83,84,39,40,38,226,,,,,,,,,,,,,,,,240,241,,37,,,31',
',,53,54,,,55,,33,223,,229,41,225,224,221,222,,,,19,,,,,82,74,77,78,',
'79,80,,,,75,81,275,64,65,66,9,52,57,,76,58,59,,,,62,,60,61,63,28,29',
'67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,8,42,,10,95,94,96,85,51,87',
'86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,54,',
',55,,33,,,,41,,,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,275,64,65,66',
'9,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92',
'93,,,18,,,,,,8,42,,10,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40',
'38,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,54,,,55,,33,,,,41,,,,,,,,19,,,,,82',
'74,77,78,,79,80,,,,75,81,275,64,65,66,9,52,57,,76,58,59,,,,62,,60,61',
'63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,8,42,,10,95,94,96',
'85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,37,,,31',
',,53,54,,,55,,33,,,,41,,,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,275',
'64,65,66,9,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25',
'91,90,92,93,,,18,,,,,,8,42,,10,95,94,96,85,51,87,86,88,,89,97,98,,83',
'84,39,40,38,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,54,,,55,,33,,,,41,,,,,,',
',19,,,,,82,74,77,78,,79,80,,,,75,81,275,64,65,66,9,52,57,,76,58,59,',
',,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,8,42',
',10,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,',
',,,,,37,,,31,,,53,54,,,55,,33,,,,41,,,,,,,,19,,,,,82,74,77,78,,79,80',
',,,75,81,275,64,65,66,9,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68',
',,,,,27,26,25,91,90,92,93,,,18,,,,,,8,42,,10,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,54,,,55,,33',
',,,41,,,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76',
'58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,218,,',
',,,,42,,,95,94,96,85,51,87,86,88,270,89,97,98,,83,84,39,40,38,,,,,,',
',,,,,,,,,,,,,211,,,217,,,53,54,,,55,,268,,266,,41,,,,,,,,216,,,,,82',
'74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63',
'28,29,67,68,,,,,,27,26,25,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51',
'87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53',
'54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66',
',52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92',
'93,,,18,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38',
',,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,19,,,,,82,74',
'77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28',
'29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,96,85,51,87',
'86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54',
',,55,,,,,,41,,,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52',
'57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,',
',18,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,',
',,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,19,,,,,82,74,77',
'78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29',
'67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,96,85,51,87,86',
'88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,',
'55,,,,,,41,,,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,207,64,65,66,,52',
'57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92',
'93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,270,89,97,98,,83,84,39,40',
'38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,268,,266,,41,,,,,,,,216',
',,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60',
'61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95',
'94,96,85,51,87,86,88,270,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,',
',211,,,217,,,53,54,,,55,,268,,266,,41,,,,,,,,216,,,,,82,74,77,78,,79',
'80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68',
',,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55',
',,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57',
',76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93',
',,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,',
',,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74',
'77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291',
'292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85',
'51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,',
',53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65',
'66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91',
'90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39',
'40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,',
',,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60',
'61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95',
'94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211',
',,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81',
',64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288',
'294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,',
'83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,',
',,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,',
',,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,',
',,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,',
',,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79',
'80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68',
',,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55',
',,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57',
',76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93',
',,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,',
',,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74',
'77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291',
'292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85',
'51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,',
',53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65',
'66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91',
'90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39',
'40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,',
',,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60',
'61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95',
'94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211',
',,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81',
',64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288',
'294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,',
'83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,',
',,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,',
',,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,',
',,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,',
',,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79',
'80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68',
',,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55',
',,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57',
',76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93',
',,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,',
',,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74',
'77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291',
'292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85',
'51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,',
',53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65',
'66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91',
'90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39',
'40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,',
',,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60',
'61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95',
'94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211',
',,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81',
',64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288',
'294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,',
'83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,',
',,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,',
',,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,',
',,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,',
',,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79',
'80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68',
',,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55',
',,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57',
',76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93',
',,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,',
',,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74',
'77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291',
'292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85',
'51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,',
',53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65',
'66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91',
'90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39',
'40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,',
',,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60',
'61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95',
'94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211',
',,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81',
',64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288',
'294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,',
'83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,',
',,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,',
',,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,',
',,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,',
',,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79',
'80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68',
',,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55',
',,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,9,52,57',
',76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18',
',,,,,8,42,7,10,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,',
',,,,,,,,,,,,,,,,37,,,31,,,53,54,,,55,,33,,,,41,,,,,,,,19,,,,,82,74,77',
'78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292',
'67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87',
'86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54',
',,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52',
'57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,',
',218,,,,,,,42,,,95,94,96,85,51,87,86,88,270,89,97,98,,83,84,39,40,38',
',,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,268,,266,,41,,,,,,,,216,',
',,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60',
'61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,218,,,,,,,42,,,95,94,96',
'85,51,87,86,88,270,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,',
',217,,,457,54,,,55,,268,,266,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,',
',,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,',
'27,26,25,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,270,89',
'97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,268',
',266,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,207,64,65,66,,52',
'57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92',
'93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38',
',,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82',
'74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63',
'291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96',
'85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217',
',,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64',
'65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91',
'90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39',
'40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,',
',,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60',
'61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95',
'94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211',
',,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81',
',64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288',
'294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,',
'83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,',
',,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,',
',,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,',
',,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,',
',,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79',
'80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68',
',,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55',
',,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,9,52,57',
',76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18',
',,,,,8,42,,10,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,',
',,,,,,,,,,,,,,,37,,,31,,,53,54,,,55,,33,,,,41,,,,,,,,19,,,,,82,74,77',
'78,,79,80,,,,75,81,,64,65,66,9,52,57,,76,58,59,,,,62,,60,61,63,28,29',
'67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,8,42,,10,95,94,96,85,51,87',
'86,88,,89,97,98,,83,84,39,40,38,226,230,235,236,237,232,234,242,243',
'238,239,,219,220,,,240,241,,37,,-233,31,,,53,54,,,55,,33,223,,229,41',
'225,224,221,222,233,231,227,19,228,,,,82,74,77,78,,79,80,,,,75,81,,244',
',-233,,367,57,,76,64,65,66,,52,,,,58,59,,,,62,,60,61,63,291,292,67,68',
',,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88',
'270,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,',
'55,,,,266,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,',
'52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90',
'92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,270,89,97,98,,83,84,39',
'40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,629,,266,,41,,,,,,',
',216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62',
',60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94',
'96,85,51,87,86,88,270,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211',
',,217,,,53,54,,,55,,,,266,,41,,,,,,,,19,,,,,82,74,77,78,,79,80,,,,75',
'81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26',
'25,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,270,89,97,98',
',83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,268,,266',
',41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76',
'58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218',
',,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,',
',,,,,,,,,,,,211,,,217,,,53,54,,,55,,629,,266,,41,,,,,,,,216,,,,,82,74',
'77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291',
'292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85',
'51,87,86,88,270,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217',
',,53,54,,,55,,629,,266,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81',
',64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25',
'91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84',
'39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216',
',,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60',
'61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,289,,,95',
'94,96,85,51,87,86,88,,89,97,98,,83,84,,521,295,518,517,516,522,519,',
',,,,,,,,,,,,,889,,,217,,,53,54,,,55,,,,,,524,,,,,,,,,528,527,531,530',
'82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61',
'63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94',
'96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,',
',217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81',
',64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25',
'91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,270,89,97,98,,83',
'84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,268,,266,,41',
',,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59',
',,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,218,,,,,,,42',
',,95,94,96,85,51,87,86,88,270,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,',
',,,,,,211,,,217,,,53,54,,,55,,268,,266,,41,,,,,,,,216,,,,,82,74,77,78',
',79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67',
'68,,,,,,27,26,25,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88',
'270,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,',
'55,,268,,266,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66',
',52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90',
'92,93,,,218,,,,,,,289,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,,751',
'295,518,517,516,522,519,,,,,,,,,,,,,,,285,,,282,,,53,54,,,55,,281,,',
',524,,,,,,,,,528,527,531,530,82,74,77,78,,79,80,,,,75,81,,64,65,66,',
'52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90',
'92,93,,,218,,,,,,,289,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,,,295',
'226,230,235,236,237,232,234,242,243,238,239,,219,220,,,240,241,,285',
',,217,,,53,54,,,55,,,223,,229,,225,224,221,222,233,231,227,,228,,,,82',
'74,77,78,,79,80,,,,75,81,,244,,297,,,57,,76,64,65,66,,52,,,,58,59,,',
',62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,',
',42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,',
',,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79',
'80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68',
',,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55',
',,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57',
',76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93',
',,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,',
',,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74',
'77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291',
'292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85',
'51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,',
',53,54,,,55,,629,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64',
'65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91',
'90,92,93,,,18,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39',
'40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,19,,',
',,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61',
'63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94',
'96,85,51,87,86,88,270,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211',
',,217,,,53,54,,,55,,268,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75',
'81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287',
'288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,270,89',
'97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,',
',41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76',
'58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,',
',,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,',
',,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,19,,,,,82,74,77,78,,79',
'80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,',
',,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,96,85,51,87,86,88,,89',
'97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,',
',41,,,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58',
'59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,',
'42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,226,230,235,236',
'237,232,234,242,243,238,239,,219,220,,,240,241,,211,,,217,,,53,54,,',
'55,,,223,,229,41,225,224,221,222,233,231,227,19,228,,,,82,74,77,78,',
'79,80,,,,75,81,103,244,,,,102,57,,76,64,65,66,,52,,,,58,59,,,,62,,60',
'61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,289,,,95',
'94,96,85,51,87,86,88,,89,97,98,,83,84,,751,295,518,517,516,522,519,',
',,,,,,,,,,,,,330,,,31,,,53,54,,,55,,33,,,,524,,,,,,,,,528,527,531,530',
'82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61',
'63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,289,,,95,94',
'96,335,51,87,86,336,,89,97,98,,83,84,,521,295,518,517,516,522,519,,',
',,,,,,,,,342,,,337,,,217,,,53,54,,,55,,,,,,524,707,,,,,,,,528,527,531',
'530,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60',
'61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,289,,,95',
'94,96,335,51,87,86,336,,89,97,98,,83,84,,521,295,518,517,516,522,519',
',,,,,,,,,,,,,,337,,,217,,,53,54,,,55,,,,,,524,,,,,,,,,528,527,531,530',
'82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61',
'63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,96,85',
'51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,',
',53,54,,,55,,,,,,41,,,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,,64,65',
'66,9,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90',
'92,93,,,18,,,,,,8,42,7,10,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39',
'40,38,226,230,235,236,237,232,234,242,243,238,239,,219,220,,,240,241',
',37,,,31,,,53,54,,,55,,33,223,,229,41,225,224,221,222,233,231,227,19',
'228,,,,82,74,77,78,,79,80,,,,75,81,,244,,,,367,57,,76,64,65,66,,52,',
',,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,',
',,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,',
',,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,19,,,,,82,74,77,78',
',79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67',
'68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55',
',,,,,41,,,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,',
'76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18',
',,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,',
',,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,19,,,,,82,74,77,78',
',79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67',
'68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55',
',,,,,41,,,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,9,52,57',
',76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18',
',,,,,8,42,,10,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,',
',,,,,,,,,,,,,,,37,,,31,,,53,54,,,55,,33,,,,41,,,,,,,,19,,,,,82,74,77',
'78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292',
'67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,289,,,95,94,96,85,51',
'87,86,88,,89,97,98,,83,84,,521,295,518,517,516,522,519,,,,,,,,,,,,,',
',846,,,217,,,53,54,,,55,,,,,,524,,,,,,,,,528,527,531,530,82,74,77,78',
',79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67',
'68,,,,,,27,26,25,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55',
',384,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52',
'57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,',
',218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,',
',,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,384,,,,41,,,,,,,,216,,,,,82',
'74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63',
'28,29,67,68,,,,,,27,26,25,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51',
'87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53',
'54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66',
',52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92',
'93,,,18,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38',
',,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,19,,,,,82,74',
'77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291',
'292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,289,,,95,94,96,85',
'51,87,86,88,,89,97,98,,83,84,,,295,226,230,235,236,237,232,234,242,243',
'238,239,,219,220,,,240,241,,285,,,217,,,53,54,,,55,,,223,,229,,225,224',
'221,222,233,231,227,,228,,,,82,74,77,78,,79,80,,,,75,81,,244,,478,,',
'57,,76,64,65,66,,52,,,,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287',
'288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97',
'98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41',
',,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59',
',,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,',
',,,289,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,,521,295,518,517,516',
'522,519,,,,,,,,,,,,,,,285,,,282,,,53,54,,,55,,,,,,524,,,,,,,,,528,527',
'531,530,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62',
',60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,289',
',,95,94,96,85,51,87,86,88,,89,97,98,,83,84,,,295,,,,,,,,,,,,,,,,,,,',
'285,,,282,,,53,54,,,55,,,,,,,,,,,,,,,,,,,82,74,77,78,,79,80,,,,75,81',
',64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288',
'294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,',
'83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,496,,53,54,,,55,,,,,,41',
',,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59',
',,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,',
',,,289,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,,,295,,,,,,,,,,,,',
',,,,,,,285,,,282,,,53,54,,,55,,,,,,,,,,,,,,,,,,,82,74,77,78,,79,80,',
',,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,',
',,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,',
'89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,',
',,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,',
'76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18',
',,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,',
',,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,19,,,,,82,74,77,78',
',79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67',
'68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55',
',,,,,41,,,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,',
'76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,218',
',,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,',
',,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78',
',79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67',
'68,,,,,,27,26,25,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55',
',,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57',
',76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,218',
',,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,',
',,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78',
',79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67',
'68,,,,,,27,26,25,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55',
',,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57',
',76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93',
',,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,',
',,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74',
'77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291',
'292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85',
'51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,',
',53,54,,,55,,724,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64',
'65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294',
'91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84',
'39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216',
',,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60',
'61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,96',
'85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217',
',,53,54,,,55,,,,,,41,,,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,,64,65',
'66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90',
'92,93,,,18,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40',
'38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,19,,,,,82',
'74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63',
'28,29,67,68,,,,,,27,26,25,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51',
'87,86,88,270,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,',
',53,54,,,55,,268,,266,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81',
',64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25',
'91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,270,89,97,98,,83',
'84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,268,,266,,41',
',,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59',
',,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,',
',,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,',
',,,,,,,,,211,,,217,,,53,54,,,55,,268,,,,41,,,,,,,,216,,,,,82,74,77,78',
',79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67',
'68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55',
',,,,,41,,,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,',
'76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93',
',,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,',
',,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74',
'77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291',
'292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85',
'51,87,86,88,270,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217',
',,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64',
'65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294',
'91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,270,89,97,98,,83',
'84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,629,,,,41,,,',
',,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,',
',,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,',
',,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,',
',,,,,,,,211,,,217,,,53,54,,,55,,384,,,,41,,,,,,,,216,,,,,82,74,77,78',
',79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67',
'68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55',
',,,,,41,,,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,',
'76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93',
',,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,',
',,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74',
'77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291',
'292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85',
'51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,',
',53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65',
'66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90',
'92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,270,89,97,98,,83,84,39',
'40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,268,,266,,41,,,,,,',
',216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62',
',60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42',
',,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,',
',,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80',
',,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,',
',,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55',
',,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57',
',76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93',
',,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,',
',,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74',
'77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291',
'292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85',
'51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,',
',53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65',
'66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91',
'90,92,93,,,218,,,,,,,289,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84',
',,295,,,,,,,,,,,,,,,,,,,,285,,,282,,,53,54,,,55,,,,,,,,,,,,,,,,,,,82',
'74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63',
'28,29,67,68,,,,,,27,26,25,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51',
'87,86,88,270,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,',
',53,54,,,55,,268,,266,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81',
',64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288',
'294,91,90,92,93,,,218,,,,,,,289,,,95,94,96,85,51,87,86,88,,89,97,98',
',83,84,,,295,,,,,,,,,,,,,,,,,,,,285,,,282,,,53,54,,,55,,,,,,,,,,,,,',
',,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60',
'61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95',
'94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,226,230,235,236,237,232',
'234,242,243,238,239,,219,220,,,240,241,,211,,,217,,,53,54,,,55,,,223',
',229,41,225,224,221,222,233,231,227,216,228,,,,82,74,77,78,,79,80,,',
',75,81,207,244,-239,,,,57,,76,-239,-239,-239,,,-239,-239,-239,,-239',
',,,,,,,,-239,-239,-239,,,,,,,,,-239,-239,,-239,-239,-239,-239,-239,',
',,,,,,,,,,,,,,,,,,,,,-239,-239,-239,-239,-239,-239,-239,-239,-239,-239',
'-239,-239,-239,-239,,,-239,-239,-239,,,-239,,250,-239,,,-239,-239,,-239',
',-239,,-239,,-239,-239,-239,-239,-239,-239,-239,-239,-239,-239,-239',
',,,-239,-239,-239,,,-239,-239,-239,,-239,-239,-239,,-239,,-239,,,,-239',
',,,,,,,,,-239,-239,,-239,-239,-239,-239,-239,,,,,,,,,,,,,,,,,,,,,,,-398',
',,,,,,-398,-398,-398,,-239,-398,-398,-398,,-398,,-239,,,,,250,-239,-398',
'-398,-398,,,,,,,,,-398,-398,,-398,-398,-398,-398,-398,,,-239,,,,,,,',
',,,,,,-239,,,,,-239,-398,-398,-398,-398,-398,-398,-398,-398,-398,-398',
'-398,-398,-398,-398,,,-398,-398,-398,,,-398,,250,-398,,,-398,-398,,-398',
',-398,,-398,,-398,-398,-398,-398,-398,-398,-398,-293,-398,-398,-398',
',,,-293,-293,-293,,,-293,-293,-293,,-293,-398,-398,,-398,,-398,,,,-293',
'-293,,,,,,,,,-293,-293,,-293,-293,-293,-293,-293,,,,,,,,,,,,,,,,,,,',
',,,-293,-293,-293,-293,-293,-293,-293,-293,-293,-293,-293,-293,-293',
'-293,,,-293,-293,-293,,,-293,,259,-293,,,-293,-293,,-293,,-293,,-293',
',-293,-293,-293,-293,-293,-293,-293,-239,-293,,-293,,,,-239,-239,-239',
',,-239,-239,-239,,-239,-293,-293,,-293,,-293,,,,-239,,,,,,,,,,-239,-239',
',-239,-239,-239,-239,-239,,,,,,393,397,,,394,,,,,,,,147,148,,144,126',
'127,128,135,132,134,,,129,130,,,-239,149,150,136,137,,,-239,,,250,,250',
'-239,,,,,141,140,,125,146,143,142,138,139,133,131,123,145,124,,,151',
'-239,,,,,,,,,,,,,,-239,,,,,-239,162,173,163,186,159,179,169,168,189',
'190,184,167,166,161,187,191,192,171,160,174,178,180,172,165,,,,181,188',
'183,182,175,185,170,158,177,176,,,,,,157,164,155,156,152,153,154,114',
'116,,,115,,,,,,,,147,148,,144,126,127,128,135,132,134,,,129,130,,,,149',
'150,136,137,,,,,,,,,,,,,,141,140,,125,146,143,142,138,139,133,131,123',
'145,124,,,151,82,,,,,,,,,,,81,162,173,163,186,159,179,169,168,189,190',
'184,167,166,161,187,191,192,171,160,174,178,180,172,165,,,,181,188,183',
'182,175,185,170,158,177,176,,,,,,157,164,155,156,152,153,154,114,116',
'113,,115,,,,,,,,147,148,,144,126,127,128,135,132,134,,,129,130,,,,149',
'150,136,137,,,,,,,,,,,,,,141,140,,125,146,143,142,138,139,133,131,123',
'145,124,,,151,82,,,,,,,,,,,81,162,173,163,186,159,179,169,168,189,190',
'184,167,166,161,187,191,192,171,160,174,178,180,172,165,,,,181,188,183',
'182,175,185,170,158,177,176,,,,,,157,164,155,156,152,153,154,114,116',
',,115,,,,,,,,147,148,,144,126,127,128,135,132,134,,,129,130,,,,149,150',
'136,137,,,,,,,,,,,,,,141,140,,125,146,143,142,138,139,133,131,123,145',
'124,,,151,82,,,,,,,,,,,81,162,173,163,186,159,179,169,168,189,190,184',
'167,166,161,187,191,192,171,160,174,178,180,172,165,,,,181,188,183,182',
'175,185,170,158,177,176,,,,,,157,164,155,156,152,153,154,114,116,,,115',
',,,,,,,147,148,,144,126,127,128,135,132,134,,,129,130,,,,149,150,136',
'137,,,,,,,,,,,,,,141,140,,125,146,143,142,138,139,133,131,123,145,124',
',,151,82,,,,,,,,,,,81,162,173,163,186,159,179,169,168,189,190,184,167',
'166,161,187,191,192,171,160,174,178,180,172,165,,,,181,188,183,352,351',
'353,350,158,177,176,,,,,,157,164,155,156,347,348,349,345,116,87,86,346',
',89,,,,,,147,148,,144,126,127,128,135,132,134,,,129,130,,,,149,150,136',
'137,,,,,,357,,,,,,,,141,140,,125,146,143,142,138,139,133,131,123,145',
'124,,,151,162,173,163,186,159,179,169,168,189,190,184,167,166,161,187',
'191,192,171,160,174,178,180,172,165,,,,181,188,183,182,175,185,170,158',
'177,176,,,,,,157,164,155,156,152,153,154,114,116,,,115,,,,,,,,147,148',
',144,126,127,128,135,132,134,,,129,130,,,,149,150,136,137,,,,,,,,,,',
',,,141,140,,125,146,143,142,138,139,133,131,123,145,124,400,404,151',
',399,,,,,,,,147,148,,144,126,127,128,135,132,134,,,129,130,,,,149,150',
'136,137,,,,,,250,,,,,,,,141,140,,125,146,143,142,138,139,133,131,123',
'145,124,449,397,151,,450,,,,,,,,147,148,,144,126,127,128,135,132,134',
',,129,130,,,,149,150,136,137,,,,,,,,,,,,,,141,140,,125,146,143,142,138',
'139,133,131,123,145,124,449,397,151,,450,,,,,,,,147,148,,144,126,127',
'128,135,132,134,,,129,130,,,,149,150,136,137,,,,,,,,,,,,,,141,140,,125',
'146,143,142,138,139,133,131,123,145,124,600,397,151,,601,,,,,,,,147',
'148,,144,126,127,128,135,132,134,,,129,130,,,,149,150,136,137,,,,,,250',
',,,,,,,141,140,,125,146,143,142,138,139,133,131,123,145,124,602,404',
'151,,603,,,,,,,,147,148,,144,126,127,128,135,132,134,,,129,130,,,,149',
'150,136,137,,,,,,250,,,,,,,,141,140,,125,146,143,142,138,139,133,131',
'123,145,124,638,397,151,,639,,,,,,,,147,148,,144,126,127,128,135,132',
'134,,,129,130,,,,149,150,136,137,,,,,,250,,,,,,,,141,140,,125,146,143',
'142,138,139,133,131,123,145,124,641,404,151,,642,,,,,,,,147,148,,144',
'126,127,128,135,132,134,,,129,130,,,,149,150,136,137,,,,,,250,,,,,,',
',141,140,,125,146,143,142,138,139,133,131,123,145,124,600,397,151,,601',
',,,,,,,147,148,,144,126,127,128,135,132,134,,,129,130,,,,149,150,136',
'137,,,,,,250,,,,,,,,141,140,,125,146,143,142,138,139,133,131,123,145',
'124,602,404,151,,603,,,,,,,,147,148,,144,126,127,128,135,132,134,,,129',
'130,,,,149,150,136,137,,,,,,250,,,,,,,,141,140,,125,146,143,142,138',
'139,133,131,123,145,124,692,397,151,,693,,,,,,,,147,148,,144,126,127',
'128,135,132,134,,,129,130,,,,149,150,136,137,,,,,,250,,,,,,,,141,140',
',125,146,143,142,138,139,133,131,123,145,124,694,404,151,,695,,,,,,',
',147,148,,144,126,127,128,135,132,134,,,129,130,,,,149,150,136,137,',
',,,,250,,,,,,,,141,140,,125,146,143,142,138,139,133,131,123,145,124',
'697,404,151,,698,,,,,,,,147,148,,144,126,127,128,135,132,134,,,129,130',
',,,149,150,136,137,,,,,,250,,,,,,,,141,140,,125,146,143,142,138,139',
'133,131,123,145,124,449,397,151,,450,,,,,,,,147,148,,144,126,127,128',
'135,132,134,,,129,130,,,,149,150,136,137,,,,,,250,,,,,,,,141,140,,125',
'146,143,142,138,139,133,131,123,145,124,932,397,151,,933,,,,,,,,147',
'148,,144,126,127,128,135,132,134,,,129,130,,,,149,150,136,137,,,,,,250',
',,,,,,,141,140,,125,146,143,142,138,139,133,131,123,145,124,934,404',
'151,,935,,,,,,,,147,148,,144,126,127,128,135,132,134,,,129,130,,,,149',
'150,136,137,,,,,,250,,,,,,,,141,140,,125,146,143,142,138,139,133,131',
'123,145,124,951,404,151,,950,,,,,,,,147,148,,144,126,127,128,135,132',
'134,,,129,130,,,,149,150,136,137,,,,,,250,,,,,,,,141,140,,125,146,143',
'142,138,139,133,131,123,145,124,,,151,226,230,235,236,237,232,234,242',
'243,238,239,,219,220,,,240,241,,,,,,,,,,,,,,,223,,229,,225,224,221,222',
'233,231,227,,228,,226,230,235,236,237,232,234,242,243,238,239,,219,220',
',244,240,241,,,,,,,,,,,,,,,223,,229,,225,224,221,222,233,231,227,,228',
',226,230,235,236,237,232,234,242,243,238,239,,219,220,,244,240,241,',
',,,,,,,,,,,,,223,,229,,225,224,221,222,233,231,227,,228,,226,230,235',
'236,237,232,234,242,243,238,239,,219,220,,244,240,241,,,,,,,,,,,,,,',
'223,,229,,225,224,221,222,233,231,227,,228,,226,230,235,236,237,232',
'234,242,243,238,239,,219,220,,244,240,241,,,,,,,,,,,,,,,223,,229,,225',
'224,221,222,233,231,227,,228,,226,230,235,236,237,232,234,242,243,238',
'239,,219,220,,244,240,241,,,,,,,,,,,,,,,223,,229,,225,224,221,222,233',
'231,227,,228,,226,230,235,236,237,232,234,242,243,238,239,,219,220,',
'244,240,241,,,,,,,,,,,,,,,223,,229,,225,224,221,222,233,231,227,,228',
',226,230,235,236,237,232,234,242,243,238,239,,219,220,,244,240,241,',
',,,,,,,,,,,,,223,,229,,225,224,221,222,233,231,227,,228,,226,230,235',
'236,237,232,234,242,243,238,239,,219,220,,244,240,241,,,,,,,,,,,,,,',
'223,,229,,225,224,221,222,233,231,227,,228,,,,,,,,,,,,,,,,,244' ]
        racc_action_table = arr = ::Array.new(23590, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'399,56,933,322,867,772,477,399,399,399,521,411,411,399,399,341,399,337',
'618,557,557,337,459,545,18,509,363,24,932,690,615,355,315,943,943,315',
'399,399,355,399,399,399,399,399,953,280,900,601,600,279,538,328,803',
'900,537,321,459,633,521,934,618,18,900,633,615,331,399,399,399,399,399',
'399,399,399,399,399,399,399,399,399,804,693,399,399,399,692,399,56,474',
'363,399,24,349,399,563,563,601,600,399,349,399,411,399,399,399,399,399',
'399,399,557,399,639,399,24,557,638,933,322,867,772,341,933,322,867,772',
'85,399,399,545,399,509,399,85,85,85,399,934,85,85,85,341,85,932,690',
'574,341,690,932,690,85,538,85,85,85,537,538,328,803,953,537,290,85,85',
'953,85,85,85,85,85,321,331,695,483,934,321,694,700,639,934,483,804,638',
'649,649,563,804,693,278,483,765,692,85,85,85,85,85,85,85,85,85,85,85',
'85,85,85,574,574,85,85,85,417,85,85,639,574,85,639,638,85,85,638,85',
'639,85,290,85,638,85,85,85,85,85,85,85,705,85,695,85,751,447,694,765',
'359,458,587,872,290,872,765,335,336,85,85,85,85,603,85,765,85,417,85',
'210,603,603,603,72,212,603,603,603,742,603,649,447,72,765,695,458,348',
'276,694,603,603,603,72,348,751,587,697,681,681,603,603,587,603,603,603',
'603,603,352,723,335,336,359,359,359,352,364,335,336,210,702,267,335',
'336,212,702,335,336,742,264,603,603,603,603,603,603,603,603,603,603',
'603,603,603,603,335,336,603,603,603,697,603,603,346,394,603,263,697',
'603,603,346,603,697,603,954,603,697,603,603,603,603,603,603,603,400',
'603,362,603,364,364,364,400,400,400,697,249,658,400,400,658,400,603',
'603,603,603,218,603,394,603,400,603,350,641,394,708,23,16,16,350,708',
'400,400,23,400,400,400,400,400,676,1,676,676,676,676,676,214,863,347',
'863,863,863,863,863,311,347,744,311,362,362,362,400,400,400,400,400',
'400,400,400,400,400,400,400,400,400,641,353,400,400,400,745,400,641',
'353,746,400,748,641,400,361,749,641,360,400,753,400,213,400,400,400',
'400,400,400,400,951,400,400,400,864,641,864,864,864,864,864,15,351,676',
'38,38,88,400,400,351,400,863,400,88,88,88,400,393,88,88,88,608,88,608',
'608,608,608,608,345,758,88,864,88,88,88,345,361,361,361,360,360,360',
'88,88,15,88,88,88,88,88,15,113,320,320,36,548,113,113,608,273,393,759',
'548,760,273,211,393,608,608,608,608,548,88,88,88,88,88,88,88,88,88,88',
'88,88,88,88,295,295,88,88,88,339,88,88,309,309,88,36,339,88,88,608,88',
'36,88,764,88,339,88,88,88,88,88,88,88,3,88,950,88,319,3,319,319,319',
'319,319,632,632,632,632,632,299,88,88,88,88,602,88,473,88,193,88,556',
'602,602,602,325,556,602,602,602,325,602,329,776,312,319,319,312,777',
'329,602,602,602,602,319,319,319,319,329,778,779,602,602,299,602,602',
'602,602,602,299,780,887,783,887,887,887,524,887,524,524,524,524,524',
'906,784,906,906,906,906,906,786,602,602,602,602,602,602,602,602,602',
'602,602,602,602,602,789,791,602,602,602,302,602,602,524,794,602,99,302',
'602,602,906,602,524,602,797,602,302,602,602,602,602,602,602,602,540',
'602,602,602,42,937,37,937,937,937,937,937,274,274,274,274,274,602,602',
'602,602,539,602,806,602,35,602,111,111,111,111,111,111,810,567,567,111',
'111,567,567,567,111,937,111,111,111,111,111,111,111,811,814,815,937',
'937,111,111,111,111,111,111,111,373,673,111,673,673,673,673,673,111',
'111,111,111,111,111,111,111,111,111,111,111,379,111,111,111,534,111',
'111,111,111,111,790,385,790,790,790,790,790,923,673,923,923,923,923',
'923,286,827,642,673,828,111,21,286,111,642,834,111,111,835,642,111,286',
'111,642,837,841,111,921,790,921,921,921,921,921,111,923,532,790,425',
'111,111,111,111,426,111,111,923,923,846,111,111,843,843,843,843,843',
'843,111,427,111,843,843,529,522,921,843,514,843,843,843,843,843,843',
'843,513,921,921,512,387,843,843,843,843,843,843,843,865,941,843,941',
'941,941,941,941,843,843,869,843,843,843,843,843,843,843,843,843,870',
'843,843,843,875,843,843,843,843,843,792,391,792,792,792,792,792,960',
'941,960,960,960,960,960,284,880,283,209,881,843,882,284,843,283,209',
'843,843,883,885,843,284,843,283,209,460,843,859,792,859,859,859,859',
'859,843,960,889,500,428,843,843,843,843,896,843,843,960,960,13,843,843',
'660,660,660,660,660,660,843,955,843,660,660,497,401,859,660,901,660',
'660,660,660,660,660,660,902,859,859,903,904,660,660,660,660,660,660',
'660,905,908,660,908,908,908,908,908,660,660,949,660,660,660,660,660',
'660,660,660,660,907,660,660,660,948,660,660,660,660,660,750,12,750,750',
'750,11,750,857,908,857,857,857,857,857,43,10,698,844,413,660,488,43',
'660,698,844,660,660,484,698,660,43,660,698,844,965,660,855,929,855,855',
'855,855,855,660,857,931,7,454,660,660,660,660,947,660,660,857,857,946',
'660,660,195,195,195,195,195,195,660,942,660,195,195,596,326,855,195',
'591,195,195,195,195,195,195,195,327,855,855,604,316,195,195,195,195',
'195,195,195,606,314,195,472,472,472,472,472,195,195,588,195,195,195',
'195,195,195,195,195,195,313,195,195,195,619,195,195,195,195,195,330',
'845,6,6,6,6,6,825,845,825,825,825,825,825,847,621,888,845,626,195,628',
'847,195,888,308,195,195,635,637,195,847,195,888,307,304,195,668,640',
'668,668,668,668,668,195,825,944,643,644,195,195,195,195,301,195,195',
'825,825,332,195,195,917,917,917,917,917,917,195,647,195,917,917,648',
'300,668,917,650,917,917,917,917,917,917,917,584,668,668,653,654,917',
'917,917,917,917,917,917,296,662,917,577,669,443,294,571,917,917,675',
'917,917,917,917,917,917,917,917,917,289,917,917,917,677,917,917,917',
'917,917,437,437,437,437,437,437,437,443,14,437,437,443,443,443,443,14',
'437,437,678,917,424,683,917,688,14,917,917,288,691,917,945,917,437,285',
'437,917,437,437,437,437,437,437,437,917,437,479,,,917,917,917,917,424',
'917,917,,424,424,917,917,799,799,799,799,799,799,917,,917,799,799,,',
',799,,799,799,799,799,799,799,799,,,,,,799,799,799,799,799,799,799,',
',799,,,,,382,799,799,,799,799,799,799,799,799,799,799,799,,799,799,799',
',799,799,799,799,799,382,382,382,382,382,382,382,382,382,382,382,935',
'382,382,,,382,382,935,799,423,,799,935,,799,799,935,,799,,799,382,,382',
'799,382,382,382,382,382,382,382,799,382,,,,799,799,799,799,423,799,799',
'442,423,423,799,799,,382,51,382,,,799,,799,51,51,51,,,51,51,51,918,51',
'918,918,918,918,918,,,,442,51,51,51,442,442,442,442,,,,51,51,,51,51',
'51,51,51,,,,,,,,,918,,,,,,,,,918,918,918,918,,51,51,51,51,51,51,51,51',
'51,51,51,51,51,51,,,51,51,51,,,51,,,51,,,51,51,,51,,51,,51,,51,51,51',
'51,51,51,51,,51,,51,,,,,,,,,,,,,,51,51,51,51,,51,,51,52,52,52,52,52',
'52,,,,52,52,,,,52,,52,52,52,52,52,52,52,,,,,,52,52,52,52,52,52,52,,',
'52,,,,,,52,52,,52,52,52,52,52,52,52,52,52,,52,52,52,,52,52,52,52,52',
'434,,,,,,,,,,,,,,,,434,434,,52,,,52,,,52,52,,,52,,52,434,,434,52,434',
'434,434,434,,,434,52,434,,,,52,52,52,52,,52,52,,,,52,52,0,0,0,0,0,0',
'52,,52,0,0,,,,0,,0,0,0,0,0,0,0,,,,,,0,0,0,0,0,0,0,,,0,,,,,,0,0,0,0,0',
'0,0,0,0,0,0,0,,0,0,0,,0,0,0,0,0,433,,,,,,,,,,,,,,,,433,433,,0,,,0,,',
'0,0,,,0,,0,433,,433,0,433,433,433,433,,,433,0,433,,,,0,0,0,0,,0,0,,',
',0,0,661,661,661,661,661,661,0,,0,661,661,,,,661,,661,661,661,661,661',
'661,661,,,,,,661,661,661,661,661,661,661,,,661,,,,,,661,661,,661,661',
'661,661,661,661,661,661,661,,661,661,661,,661,661,661,661,661,432,432',
'432,432,432,432,432,,,432,432,,,,,,432,432,,661,,,661,,,661,661,,,661',
',661,432,,432,661,432,432,432,432,432,432,432,661,432,,,,661,661,661',
'661,,661,661,,,,661,661,915,915,915,915,915,915,661,,661,915,915,,,',
'915,,915,915,915,915,915,915,915,,,,,,915,915,915,915,915,915,915,,',
'915,,,,,,915,915,,915,915,915,915,915,915,915,915,915,,915,915,915,',
'915,915,915,915,915,440,440,440,440,440,440,440,,,440,440,,,,,,440,440',
',915,,,915,,,915,915,,,915,,915,440,,440,915,440,440,440,440,440,440',
'440,915,440,,,,915,915,915,915,,915,915,,,,915,915,558,558,558,558,558',
'558,915,,915,558,558,,,,558,,558,558,558,558,558,558,558,,,,,,558,558',
'558,558,558,558,558,,,558,,,,,,558,558,,558,558,558,558,558,558,558',
'558,558,,558,558,558,,558,558,558,558,558,439,439,439,439,439,439,439',
',,439,439,,,,,,439,439,,558,,,558,,,558,558,,,558,,558,439,,439,558',
'439,439,439,439,439,439,439,558,439,,,,558,558,558,558,,558,558,,,,558',
'558,624,624,624,624,624,624,558,,558,624,624,,,,624,,624,624,624,624',
'624,624,624,,,,,,624,624,624,624,624,624,624,,,624,,,,,,624,624,,624',
'624,624,624,624,624,624,624,624,,624,624,624,,624,624,624,624,624,441',
'441,441,441,441,441,441,,,441,441,,,,,,441,441,,624,,,624,,,624,624',
',,624,,624,441,,441,624,441,441,441,441,441,441,441,624,441,,,,624,624',
'624,624,,624,624,,,,624,624,701,701,701,701,701,701,624,,624,701,701',
',,,701,,701,701,701,701,701,701,701,,,,,,701,701,701,701,701,701,701',
',,701,,,,,,701,701,,701,701,701,701,701,701,701,701,701,,701,701,701',
',701,701,701,701,701,436,,,,,,,,,,,,,,,,436,436,,701,,,701,,,701,701',
',,701,,701,436,,436,701,436,436,436,436,,,436,701,436,,,,701,701,701',
'701,,701,701,,,,701,701,769,769,769,769,769,769,701,,701,769,769,,,',
'769,,769,769,769,769,769,769,769,,,,,,769,769,769,769,769,769,769,,',
'769,,,,,,769,769,,769,769,769,769,769,769,769,769,769,,769,769,769,',
'769,769,769,769,769,445,445,445,445,445,445,445,445,,445,445,,,,,,445',
'445,,769,,,769,,,769,769,,,769,,769,445,,445,769,445,445,445,445,445',
'445,445,769,445,,,,769,769,769,769,,769,769,,,,769,769,282,282,282,282',
'282,282,769,,769,282,282,,,,282,,282,282,282,282,282,282,282,,,,,,282',
'282,282,282,282,282,282,,,282,,,,,,282,282,,282,282,282,282,282,282',
'282,282,282,,282,282,282,,282,282,282,282,282,422,422,422,422,422,422',
'422,422,422,422,422,,422,422,,,422,422,,282,,,282,,,282,282,,,282,,282',
'422,,422,282,422,422,422,422,422,422,422,282,422,,,,282,282,282,282',
',282,282,,,,282,282,909,909,909,909,909,909,282,,282,909,909,,,,909',
',909,909,909,909,909,909,909,,,,,,909,909,909,909,909,909,909,,,909',
',,,,605,909,909,,909,909,909,909,909,909,909,909,909,,909,909,909,,909',
'909,909,909,909,605,605,605,605,605,605,605,605,605,605,605,,605,605',
',,605,605,,909,,,909,,,909,909,,,909,,909,605,,605,909,605,605,605,605',
'605,605,605,909,605,,,,909,909,909,909,,909,909,,,,909,909,,605,405',
',,,909,,909,405,405,405,,,405,405,405,878,405,878,878,878,878,878,,',
',405,405,405,405,,,,,,,,405,405,,405,405,405,405,405,,,,,,,,,878,878',
',,,,,,,878,878,878,878,,405,405,405,405,405,405,405,405,405,405,405',
'405,405,405,,,405,405,405,,,405,,,405,,,405,405,,405,,405,,405,,405',
'405,405,405,405,405,405,,405,405,405,,,,,,,,,,,,,,405,405,405,405,,405',
',405,754,754,754,754,754,754,,,,754,754,,,,754,,754,754,754,754,754',
'754,754,,,,,,754,754,754,754,754,754,754,,,754,,,,,390,754,754,,754',
'754,754,754,754,754,754,754,754,,754,754,754,,754,754,754,754,754,390',
'390,390,390,390,390,390,390,390,390,390,,390,390,,,390,390,,754,,,754',
',,754,754,,,754,,754,390,,390,754,390,390,390,390,390,390,390,754,390',
',,,754,754,754,754,,754,754,,,,754,754,,390,404,,,,754,,754,404,404',
'404,,,404,404,404,510,404,510,510,510,510,510,,,,404,404,404,404,,,',
',,,,404,404,,404,404,404,404,404,,,,,,,,,510,,,,,,,,,510,510,510,510',
',404,404,404,404,404,404,404,404,404,404,404,404,404,404,,,404,404,404',
',,404,,,404,,,404,404,,404,,404,,404,,404,404,404,404,404,404,404,,404',
'404,404,,,,,,,,,,,,,,404,404,404,404,,404,,404,31,31,31,31,31,31,,,',
'31,31,,,,31,,31,31,31,31,31,31,31,,,,,,31,31,31,31,31,31,31,,,31,,,',
',,31,31,,31,31,31,31,31,31,31,31,31,,31,31,31,,31,31,31,31,31,438,438',
'438,438,438,438,438,,,438,438,,,,,,438,438,,31,,,31,,,31,31,,,31,,31',
'438,,438,31,438,438,438,438,438,438,438,31,438,,,,31,31,31,31,,31,31',
',,,31,31,217,217,217,217,217,217,31,,31,217,217,,,,217,,217,217,217',
'217,217,217,217,,,,,,217,217,217,217,217,217,217,,,217,,,,,,217,217',
',217,217,217,217,217,217,217,217,217,,217,217,217,,217,217,217,217,217',
'421,421,421,421,421,421,421,421,421,421,421,,421,421,,,421,421,,217',
',,217,,,217,217,,,217,,217,421,,421,217,421,421,421,421,421,421,421',
'217,421,,,,217,217,217,217,,217,217,,,,217,217,652,652,652,652,652,652',
'217,,217,652,652,,,,652,,652,652,652,652,652,652,652,,,,,,652,652,652',
'652,652,652,652,,,652,,,,,,652,652,,652,652,652,652,652,652,652,652',
'652,,652,652,652,,652,652,652,652,652,435,,,,,,,,,,,,,,,,435,435,,652',
',,652,,,652,652,,,652,,652,435,,435,652,435,435,435,435,,,435,652,435',
',,,652,652,652,652,,652,652,,,,652,652,798,798,798,798,798,798,652,',
'652,798,798,,,,798,,798,798,798,798,798,798,798,,,,,,798,798,798,798',
'798,798,798,,,798,,,,,,798,798,,798,798,798,798,798,798,798,798,798',
',798,798,798,,798,798,798,798,798,444,444,444,444,444,444,444,,,444',
'444,,,,,,444,444,,798,,,798,,,798,798,,,798,,798,444,,444,798,444,444',
'444,444,444,444,444,798,444,,,,798,798,798,798,,798,798,,,,798,798,716',
'716,716,716,716,716,798,,798,716,716,,,,716,,716,716,716,716,716,716',
'716,,,,,,716,716,716,716,716,716,716,,,716,,,,,,716,716,,716,716,716',
'716,716,716,716,716,716,,716,716,716,,716,716,716,716,716,429,,,,,,',
',,,,,,,,,429,429,,716,,,716,,,716,716,,,716,,716,429,,429,716,429,429',
'429,429,,,,716,,,,,716,716,716,716,,716,716,,,,716,716,277,277,277,277',
'277,277,716,,716,277,277,,,,277,,277,277,277,277,277,277,277,,,,,,277',
'277,277,277,277,277,277,,,277,,,,,,277,277,,277,277,277,277,277,277',
'277,277,277,,277,277,277,,277,277,277,277,277,431,,,,,,,,,,,,,,,,431',
'431,,277,,,277,,,277,277,,,277,,277,431,,,277,431,431,431,431,,,,277',
',,,,277,277,277,277,,277,277,,,,277,277,533,533,533,533,533,533,277',
',277,533,533,,,,533,,533,533,533,533,533,533,533,,,,,,533,533,533,533',
'533,533,533,,,533,,,,,,533,533,,533,533,533,533,533,533,533,533,533',
',533,533,533,,533,533,533,533,533,430,,,,,,,,,,,,,,,,430,430,,533,,',
'533,,,533,533,,,533,,533,430,,430,533,430,430,430,430,,,,533,,,,,533',
'533,533,533,,533,533,,,,533,533,706,706,706,706,706,706,533,,533,706',
'706,,,,706,,706,706,706,706,706,706,706,,,,,,706,706,706,706,706,706',
'706,,,706,,,,,,706,706,,706,706,706,706,706,706,706,706,706,,706,706',
'706,,706,706,706,706,706,,,,,,,,,,,,,,,,,,,,706,,,706,,,706,706,,,706',
',706,,,,706,,,,,,,,706,,,,,706,706,706,706,,706,706,,,,706,706,808,808',
'808,808,808,808,706,,706,808,808,,,,808,,808,808,808,808,808,808,808',
',,,,,808,808,808,808,808,808,808,,,808,,,,,,808,808,,808,808,808,808',
'808,808,808,808,808,,808,808,808,,808,808,808,808,808,,,,,,,,,,,,,,',
',,,,,808,,,808,,,808,808,,,808,,808,,,,808,,,,,,,,808,,,,,808,808,808',
'808,,808,808,,,,808,808,610,610,610,610,610,610,808,,808,610,610,,,',
'610,,610,610,610,610,610,610,610,,,,,,610,610,610,610,610,610,610,,',
'610,,,,,,610,610,,610,610,610,610,610,610,610,610,610,,610,610,610,',
'610,610,610,610,610,,,,,,,,,,,,,,,,,,,,610,,,610,,,610,610,,,610,,610',
',,,610,,,,,,,,610,,,,,610,610,610,610,,610,610,,,,610,610,623,623,623',
'623,623,623,610,,610,623,623,,,,623,,623,623,623,623,623,623,623,,,',
',,623,623,623,623,623,623,623,,,623,,,,,,623,623,,623,623,623,623,623',
'623,623,623,623,,623,623,623,,623,623,623,623,623,,,,,,,,,,,,,,,,,,',
',623,,,623,,,623,623,,,623,,623,,,,623,,,,,,,,623,,,,,623,623,623,623',
',623,623,,,,623,623,802,802,802,802,802,802,623,,623,802,802,,,,802',
',802,802,802,802,802,802,802,,,,,,802,802,802,802,802,802,802,,,802',
',,,,,802,802,,802,802,802,802,802,802,802,802,802,,802,802,802,,802',
'802,802,802,802,,,,,,,,,,,,,,,,,,,,802,,,802,,,802,802,,,802,,802,,',
',802,,,,,,,,802,,,,,802,802,802,802,,802,802,,,,802,802,536,536,536',
'536,536,536,802,,802,536,536,,,,536,,536,536,536,536,536,536,536,,,',
',,536,536,536,536,536,536,536,,,536,,,,,,536,536,,536,536,536,536,536',
'536,536,536,536,,536,536,536,,536,536,536,536,536,,,,,,,,,,,,,,,,,,',
',536,,,536,,,536,536,,,536,,536,,,,536,,,,,,,,536,,,,,536,536,536,536',
',536,536,,,,536,536,,199,199,199,,199,536,,536,199,199,,,,199,,199,199',
'199,199,199,199,199,,,,,,199,199,199,199,199,199,199,,,199,,,,,,,199',
',,199,199,199,199,199,199,199,199,199,199,199,199,,199,199,199,199,199',
',,,,,,,,,,,,,,,,,,,199,,,199,,,199,199,,,199,,199,,199,,199,,,,,,,,199',
',,,,199,199,199,199,,199,199,,,,199,199,,202,202,202,,202,199,,199,202',
'202,,,,202,,202,202,202,202,202,202,202,,,,,,202,202,202,202,202,202',
'202,,,202,,,,,,,202,,,202,202,202,202,202,202,202,202,,202,202,202,',
'202,202,202,202,202,,,,,,,,,,,,,,,,,,,,202,,,202,,,202,202,,,202,,,',
',,202,,,,,,,,202,,,,,202,202,202,202,,202,202,,,,202,202,,203,203,203',
',203,202,,202,203,203,,,,203,,203,203,203,203,203,203,203,,,,,,203,203',
'203,203,203,203,203,,,203,,,,,,,203,,,203,203,203,203,203,203,203,203',
',203,203,203,,203,203,203,203,203,,,,,,,,,,,,,,,,,,,,203,,,203,,,203',
'203,,,203,,,,,,203,,,,,,,,203,,,,,203,203,203,203,,203,203,,,,203,203',
',204,204,204,,204,203,,203,204,204,,,,204,,204,204,204,204,204,204,204',
',,,,,204,204,204,204,204,204,204,,,204,,,,,,,204,,,204,204,204,204,204',
'204,204,204,,204,204,204,,204,204,204,204,204,,,,,,,,,,,,,,,,,,,,204',
',,204,,,204,204,,,204,,,,,,204,,,,,,,,204,,,,,204,204,204,204,,204,204',
',,,204,204,,205,205,205,,205,204,,204,205,205,,,,205,,205,205,205,205',
'205,205,205,,,,,,205,205,205,205,205,205,205,,,205,,,,,,,205,,,205,205',
'205,205,205,205,205,205,,205,205,205,,205,205,205,205,205,,,,,,,,,,',
',,,,,,,,,205,,,205,,,205,205,,,205,,,,,,205,,,,,,,,205,,,,,205,205,205',
'205,,205,205,,,,205,205,,206,206,206,,206,205,,205,206,206,,,,206,,206',
'206,206,206,206,206,206,,,,,,206,206,206,206,206,206,206,,,206,,,,,',
',206,,,206,206,206,206,206,206,206,206,,206,206,206,,206,206,206,206',
'206,,,,,,,,,,,,,,,,,,,,206,,,206,,,206,206,,,206,,,,,,206,,,,,,,,206',
',,,,206,206,206,206,,206,206,,,,206,206,206,762,762,762,,762,206,,206',
'762,762,,,,762,,762,762,762,762,762,762,762,,,,,,762,762,762,762,762',
'762,762,,,762,,,,,,,762,,,762,762,762,762,762,762,762,762,762,762,762',
'762,,762,762,762,762,762,,,,,,,,,,,,,,,,,,,,762,,,762,,,762,762,,,762',
',762,,762,,762,,,,,,,,762,,,,,762,762,762,762,,762,762,,,,762,762,,755',
'755,755,,755,762,,762,755,755,,,,755,,755,755,755,755,755,755,755,,',
',,,755,755,755,755,755,755,755,,,755,,,,,,,755,,,755,755,755,755,755',
'755,755,755,755,755,755,755,,755,755,755,755,755,,,,,,,,,,,,,,,,,,,',
'755,,,755,,,755,755,,,755,,755,,755,,755,,,,,,,,755,,,,,755,755,755',
'755,,755,755,,,,755,755,,743,743,743,,743,755,,755,743,743,,,,743,,743',
'743,743,743,743,743,743,,,,,,743,743,743,743,743,743,743,,,743,,,,,',
',743,,,743,743,743,743,743,743,743,743,,743,743,743,,743,743,743,743',
'743,,,,,,,,,,,,,,,,,,,,743,,,743,,,743,743,,,743,,,,,,743,,,,,,,,743',
',,,,743,743,743,743,,743,743,,,,743,743,,216,216,216,,216,743,,743,216',
'216,,,,216,,216,216,216,216,216,216,216,,,,,,216,216,216,216,216,216',
'216,,,216,,,,,,,216,,,216,216,216,216,216,216,216,216,,216,216,216,',
'216,216,216,216,216,,,,,,,,,,,,,,,,,,,,216,,,216,,,216,216,,,216,,,',
',,216,,,,,,,,216,,,,,216,216,216,216,,216,216,,,,216,216,,741,741,741',
',741,216,,216,741,741,,,,741,,741,741,741,741,741,741,741,,,,,,741,741',
'741,741,741,741,741,,,741,,,,,,,741,,,741,741,741,741,741,741,741,741',
',741,741,741,,741,741,741,741,741,,,,,,,,,,,,,,,,,,,,741,,,741,,,741',
'741,,,741,,,,,,741,,,,,,,,741,,,,,741,741,741,741,,741,741,,,,741,741',
',219,219,219,,219,741,,741,219,219,,,,219,,219,219,219,219,219,219,219',
',,,,,219,219,219,219,219,219,219,,,219,,,,,,,219,,,219,219,219,219,219',
'219,219,219,,219,219,219,,219,219,219,219,219,,,,,,,,,,,,,,,,,,,,219',
',,219,,,219,219,,,219,,,,,,219,,,,,,,,219,,,,,219,219,219,219,,219,219',
',,,219,219,,220,220,220,,220,219,,219,220,220,,,,220,,220,220,220,220',
'220,220,220,,,,,,220,220,220,220,220,220,220,,,220,,,,,,,220,,,220,220',
'220,220,220,220,220,220,,220,220,220,,220,220,220,220,220,,,,,,,,,,',
',,,,,,,,,220,,,220,,,220,220,,,220,,,,,,220,,,,,,,,220,,,,,220,220,220',
'220,,220,220,,,,220,220,,221,221,221,,221,220,,220,221,221,,,,221,,221',
'221,221,221,221,221,221,,,,,,221,221,221,221,221,221,221,,,221,,,,,',
',221,,,221,221,221,221,221,221,221,221,,221,221,221,,221,221,221,221',
'221,,,,,,,,,,,,,,,,,,,,221,,,221,,,221,221,,,221,,,,,,221,,,,,,,,221',
',,,,221,221,221,221,,221,221,,,,221,221,,222,222,222,,222,221,,221,222',
'222,,,,222,,222,222,222,222,222,222,222,,,,,,222,222,222,222,222,222',
'222,,,222,,,,,,,222,,,222,222,222,222,222,222,222,222,,222,222,222,',
'222,222,222,222,222,,,,,,,,,,,,,,,,,,,,222,,,222,,,222,222,,,222,,,',
',,222,,,,,,,,222,,,,,222,222,222,222,,222,222,,,,222,222,,223,223,223',
',223,222,,222,223,223,,,,223,,223,223,223,223,223,223,223,,,,,,223,223',
'223,223,223,223,223,,,223,,,,,,,223,,,223,223,223,223,223,223,223,223',
',223,223,223,,223,223,223,223,223,,,,,,,,,,,,,,,,,,,,223,,,223,,,223',
'223,,,223,,,,,,223,,,,,,,,223,,,,,223,223,223,223,,223,223,,,,223,223',
',224,224,224,,224,223,,223,224,224,,,,224,,224,224,224,224,224,224,224',
',,,,,224,224,224,224,224,224,224,,,224,,,,,,,224,,,224,224,224,224,224',
'224,224,224,,224,224,224,,224,224,224,224,224,,,,,,,,,,,,,,,,,,,,224',
',,224,,,224,224,,,224,,,,,,224,,,,,,,,224,,,,,224,224,224,224,,224,224',
',,,224,224,,225,225,225,,225,224,,224,225,225,,,,225,,225,225,225,225',
'225,225,225,,,,,,225,225,225,225,225,225,225,,,225,,,,,,,225,,,225,225',
'225,225,225,225,225,225,,225,225,225,,225,225,225,225,225,,,,,,,,,,',
',,,,,,,,,225,,,225,,,225,225,,,225,,,,,,225,,,,,,,,225,,,,,225,225,225',
'225,,225,225,,,,225,225,,226,226,226,,226,225,,225,226,226,,,,226,,226',
'226,226,226,226,226,226,,,,,,226,226,226,226,226,226,226,,,226,,,,,',
',226,,,226,226,226,226,226,226,226,226,,226,226,226,,226,226,226,226',
'226,,,,,,,,,,,,,,,,,,,,226,,,226,,,226,226,,,226,,,,,,226,,,,,,,,226',
',,,,226,226,226,226,,226,226,,,,226,226,,227,227,227,,227,226,,226,227',
'227,,,,227,,227,227,227,227,227,227,227,,,,,,227,227,227,227,227,227',
'227,,,227,,,,,,,227,,,227,227,227,227,227,227,227,227,,227,227,227,',
'227,227,227,227,227,,,,,,,,,,,,,,,,,,,,227,,,227,,,227,227,,,227,,,',
',,227,,,,,,,,227,,,,,227,227,227,227,,227,227,,,,227,227,,228,228,228',
',228,227,,227,228,228,,,,228,,228,228,228,228,228,228,228,,,,,,228,228',
'228,228,228,228,228,,,228,,,,,,,228,,,228,228,228,228,228,228,228,228',
',228,228,228,,228,228,228,228,228,,,,,,,,,,,,,,,,,,,,228,,,228,,,228',
'228,,,228,,,,,,228,,,,,,,,228,,,,,228,228,228,228,,228,228,,,,228,228',
',229,229,229,,229,228,,228,229,229,,,,229,,229,229,229,229,229,229,229',
',,,,,229,229,229,229,229,229,229,,,229,,,,,,,229,,,229,229,229,229,229',
'229,229,229,,229,229,229,,229,229,229,229,229,,,,,,,,,,,,,,,,,,,,229',
',,229,,,229,229,,,229,,,,,,229,,,,,,,,229,,,,,229,229,229,229,,229,229',
',,,229,229,,230,230,230,,230,229,,229,230,230,,,,230,,230,230,230,230',
'230,230,230,,,,,,230,230,230,230,230,230,230,,,230,,,,,,,230,,,230,230',
'230,230,230,230,230,230,,230,230,230,,230,230,230,230,230,,,,,,,,,,',
',,,,,,,,,230,,,230,,,230,230,,,230,,,,,,230,,,,,,,,230,,,,,230,230,230',
'230,,230,230,,,,230,230,,231,231,231,,231,230,,230,231,231,,,,231,,231',
'231,231,231,231,231,231,,,,,,231,231,231,231,231,231,231,,,231,,,,,',
',231,,,231,231,231,231,231,231,231,231,,231,231,231,,231,231,231,231',
'231,,,,,,,,,,,,,,,,,,,,231,,,231,,,231,231,,,231,,,,,,231,,,,,,,,231',
',,,,231,231,231,231,,231,231,,,,231,231,,232,232,232,,232,231,,231,232',
'232,,,,232,,232,232,232,232,232,232,232,,,,,,232,232,232,232,232,232',
'232,,,232,,,,,,,232,,,232,232,232,232,232,232,232,232,,232,232,232,',
'232,232,232,232,232,,,,,,,,,,,,,,,,,,,,232,,,232,,,232,232,,,232,,,',
',,232,,,,,,,,232,,,,,232,232,232,232,,232,232,,,,232,232,,233,233,233',
',233,232,,232,233,233,,,,233,,233,233,233,233,233,233,233,,,,,,233,233',
'233,233,233,233,233,,,233,,,,,,,233,,,233,233,233,233,233,233,233,233',
',233,233,233,,233,233,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233',
'233,,,233,,,,,,233,,,,,,,,233,,,,,233,233,233,233,,233,233,,,,233,233',
',234,234,234,,234,233,,233,234,234,,,,234,,234,234,234,234,234,234,234',
',,,,,234,234,234,234,234,234,234,,,234,,,,,,,234,,,234,234,234,234,234',
'234,234,234,,234,234,234,,234,234,234,234,234,,,,,,,,,,,,,,,,,,,,234',
',,234,,,234,234,,,234,,,,,,234,,,,,,,,234,,,,,234,234,234,234,,234,234',
',,,234,234,,235,235,235,,235,234,,234,235,235,,,,235,,235,235,235,235',
'235,235,235,,,,,,235,235,235,235,235,235,235,,,235,,,,,,,235,,,235,235',
'235,235,235,235,235,235,,235,235,235,,235,235,235,235,235,,,,,,,,,,',
',,,,,,,,,235,,,235,,,235,235,,,235,,,,,,235,,,,,,,,235,,,,,235,235,235',
'235,,235,235,,,,235,235,,236,236,236,,236,235,,235,236,236,,,,236,,236',
'236,236,236,236,236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,',
',236,,,236,236,236,236,236,236,236,236,,236,236,236,,236,236,236,236',
'236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,236',
',,,,236,236,236,236,,236,236,,,,236,236,,237,237,237,,237,236,,236,237',
'237,,,,237,,237,237,237,237,237,237,237,,,,,,237,237,237,237,237,237',
'237,,,237,,,,,,,237,,,237,237,237,237,237,237,237,237,,237,237,237,',
'237,237,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237,,,237,237,,,237,,,',
',,237,,,,,,,,237,,,,,237,237,237,237,,237,237,,,,237,237,,238,238,238',
',238,237,,237,238,238,,,,238,,238,238,238,238,238,238,238,,,,,,238,238',
'238,238,238,238,238,,,238,,,,,,,238,,,238,238,238,238,238,238,238,238',
',238,238,238,,238,238,238,238,238,,,,,,,,,,,,,,,,,,,,238,,,238,,,238',
'238,,,238,,,,,,238,,,,,,,,238,,,,,238,238,238,238,,238,238,,,,238,238',
',239,239,239,,239,238,,238,239,239,,,,239,,239,239,239,239,239,239,239',
',,,,,239,239,239,239,239,239,239,,,239,,,,,,,239,,,239,239,239,239,239',
'239,239,239,,239,239,239,,239,239,239,239,239,,,,,,,,,,,,,,,,,,,,239',
',,239,,,239,239,,,239,,,,,,239,,,,,,,,239,,,,,239,239,239,239,,239,239',
',,,239,239,,240,240,240,,240,239,,239,240,240,,,,240,,240,240,240,240',
'240,240,240,,,,,,240,240,240,240,240,240,240,,,240,,,,,,,240,,,240,240',
'240,240,240,240,240,240,,240,240,240,,240,240,240,240,240,,,,,,,,,,',
',,,,,,,,,240,,,240,,,240,240,,,240,,,,,,240,,,,,,,,240,,,,,240,240,240',
'240,,240,240,,,,240,240,,241,241,241,,241,240,,240,241,241,,,,241,,241',
'241,241,241,241,241,241,,,,,,241,241,241,241,241,241,241,,,241,,,,,',
',241,,,241,241,241,241,241,241,241,241,,241,241,241,,241,241,241,241',
'241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241,,,241,,,,,,241,,,,,,,,241',
',,,,241,241,241,241,,241,241,,,,241,241,,242,242,242,,242,241,,241,242',
'242,,,,242,,242,242,242,242,242,242,242,,,,,,242,242,242,242,242,242',
'242,,,242,,,,,,,242,,,242,242,242,242,242,242,242,242,,242,242,242,',
'242,242,242,242,242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242,,,242,,,',
',,242,,,,,,,,242,,,,,242,242,242,242,,242,242,,,,242,242,,243,243,243',
',243,242,,242,243,243,,,,243,,243,243,243,243,243,243,243,,,,,,243,243',
'243,243,243,243,243,,,243,,,,,,,243,,,243,243,243,243,243,243,243,243',
',243,243,243,,243,243,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243',
'243,,,243,,,,,,243,,,,,,,,243,,,,,243,243,243,243,,243,243,,,,243,243',
',244,244,244,,244,243,,243,244,244,,,,244,,244,244,244,244,244,244,244',
',,,,,244,244,244,244,244,244,244,,,244,,,,,,,244,,,244,244,244,244,244',
'244,244,244,,244,244,244,,244,244,244,244,244,,,,,,,,,,,,,,,,,,,,244',
',,244,,,244,244,,,244,,,,,,244,,,,,,,,244,,,,,244,244,244,244,,244,244',
',,,244,244,,5,5,5,5,5,244,,244,5,5,,,,5,,5,5,5,5,5,5,5,,,,,,5,5,5,5',
'5,5,5,,,5,,,,,,5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,,5,5,5,5,5,,,,,,,,,,,',
',,,,,,,,5,,,5,,,5,5,,,5,,5,,,,5,,,,,,,,5,,,,,5,5,5,5,,5,5,,,,5,5,,740',
'740,740,,740,5,,5,740,740,,,,740,,740,740,740,740,740,740,740,,,,,,740',
'740,740,740,740,740,740,,,740,,,,,,,740,,,740,740,740,740,740,740,740',
'740,,740,740,740,,740,740,740,740,740,,,,,,,,,,,,,,,,,,,,740,,,740,',
',740,740,,,740,,,,,,740,,,,,,,,740,,,,,740,740,740,740,,740,740,,,,740',
'740,,250,250,250,,250,740,,740,250,250,,,,250,,250,250,250,250,250,250',
'250,,,,,,250,250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250,250',
'250,250,250,250,250,250,250,250,,250,250,250,250,250,,,,,,,,,,,,,,,',
',,,,250,,,250,,,250,250,,,250,,250,,250,,250,,,,,,,,250,,,,,250,250',
'250,250,,250,250,,,,250,250,,251,251,251,,251,250,,250,251,251,,,,251',
',251,251,251,251,251,251,251,,,,,,251,251,251,251,251,251,251,,,251',
',,,,,,251,,,251,251,251,251,251,251,251,251,251,251,251,251,,251,251',
'251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,251,,251,',
'251,,,,,,,,251,,,,,251,251,251,251,,251,251,,,,251,251,,259,259,259',
',259,251,,251,259,259,,,,259,,259,259,259,259,259,259,259,,,,,,259,259',
'259,259,259,259,259,,,259,,,,,,,259,,,259,259,259,259,259,259,259,259',
'259,259,259,259,,259,259,259,259,259,,,,,,,,,,,,,,,,,,,,259,,,259,,',
'259,259,,,259,,259,,259,,259,,,,,,,,259,,,,,259,259,259,259,,259,259',
',,,259,259,259,739,739,739,,739,259,,259,739,739,,,,739,,739,739,739',
'739,739,739,739,,,,,,739,739,739,739,739,739,739,,,739,,,,,,,739,,,739',
'739,739,739,739,739,739,739,,739,739,739,,739,739,739,739,739,,,,,,',
',,,,,,,,,,,,,739,,,739,,,739,739,,,739,,,,,,739,,,,,,,,739,,,,,739,739',
'739,739,,739,739,,,,739,739,,738,738,738,,738,739,,739,738,738,,,,738',
',738,738,738,738,738,738,738,,,,,,738,738,738,738,738,738,738,,,738',
',,,,,,738,,,738,738,738,738,738,738,738,738,,738,738,738,,738,738,738',
'738,738,,,,,,,,,,,,,,,,,,,,738,,,738,,,738,738,,,738,,,,,,738,,,,,,',
',738,,,,,738,738,738,738,,738,738,,,,738,738,,726,726,726,,726,738,',
'738,726,726,,,,726,,726,726,726,726,726,726,726,,,,,,726,726,726,726',
'726,726,726,,,726,,,,,,,726,,,726,726,726,726,726,726,726,726,,726,726',
'726,,726,726,726,726,726,,,,,,,,,,,,,,,,,,,,726,,,726,,,726,726,,,726',
',,,,,726,,,,,,,,726,,,,,726,726,726,726,,726,726,,,,726,726,,266,266',
'266,,266,726,,726,266,266,,,,266,,266,266,266,266,266,266,266,,,,,,266',
'266,266,266,266,266,266,,,266,,,,,,,266,,,266,266,266,266,266,266,266',
'266,,266,266,266,,266,266,266,266,266,,,,,,,,,,,,,,,,,,,,266,,,266,',
',266,266,,,266,,,,,,266,,,,,,,,266,,,,,266,266,266,266,,266,266,,,,266',
'266,,724,724,724,,724,266,,266,724,724,,,,724,,724,724,724,724,724,724',
'724,,,,,,724,724,724,724,724,724,724,,,724,,,,,,,724,,,724,724,724,724',
'724,724,724,724,,724,724,724,,724,724,724,724,724,,,,,,,,,,,,,,,,,,',
',724,,,724,,,724,724,,,724,,,,,,724,,,,,,,,724,,,,,724,724,724,724,',
'724,724,,,,724,724,,268,268,268,,268,724,,724,268,268,,,,268,,268,268',
'268,268,268,268,268,,,,,,268,268,268,268,268,268,268,,,268,,,,,,,268',
',,268,268,268,268,268,268,268,268,,268,268,268,,268,268,268,268,268',
',,,,,,,,,,,,,,,,,,,268,,,268,,,268,268,,,268,,,,,,268,,,,,,,,268,,,',
',268,268,268,268,,268,268,,,,268,268,,270,270,270,,270,268,,268,270',
'270,,,,270,,270,270,270,270,270,270,270,,,,,,270,270,270,270,270,270',
'270,,,270,,,,,,,270,,,270,270,270,270,270,270,270,270,,270,270,270,',
'270,270,270,270,270,,,,,,,,,,,,,,,,,,,,270,,,270,,,270,270,,,270,,,',
',,270,,,,,,,,270,,,,,270,270,270,270,,270,270,,,,270,270,,275,275,275',
'275,275,270,,270,275,275,,,,275,,275,275,275,275,275,275,275,,,,,,275',
'275,275,275,275,275,275,,,275,,,,,,275,275,,275,275,275,275,275,275',
'275,275,275,,275,275,275,,275,275,275,275,275,,,,,,,,,,,,,,,,,,,,275',
',,275,,,275,275,,,275,,275,,,,275,,,,,,,,275,,,,,275,275,275,275,,275',
'275,,,,275,275,,471,471,471,471,471,275,,275,471,471,,,,471,,471,471',
'471,471,471,471,471,,,,,,471,471,471,471,471,471,471,,,471,,,,,,471',
'471,,471,471,471,471,471,471,471,471,471,,471,471,471,,471,471,471,471',
'471,617,617,617,617,617,617,617,617,617,617,617,,617,617,,,617,617,',
'471,,617,471,,,471,471,,,471,,471,617,,617,471,617,617,617,617,617,617',
'617,471,617,,,,471,471,471,471,,471,471,,,,471,471,,617,,617,,471,471',
',471,465,465,465,,465,,,,465,465,,,,465,,465,465,465,465,465,465,465',
',,,,,465,465,465,465,465,465,465,,,465,,,,,,,465,,,465,465,465,465,465',
'465,465,465,465,465,465,465,,465,465,465,465,465,,,,,,,,,,,,,,,,,,,',
'465,,,465,,,465,465,,,465,,,,465,,465,,,,,,,,465,,,,,465,465,465,465',
',465,465,,,,465,465,,463,463,463,,463,465,,465,463,463,,,,463,,463,463',
'463,463,463,463,463,,,,,,463,463,463,463,463,463,463,,,463,,,,,,,463',
',,463,463,463,463,463,463,463,463,463,463,463,463,,463,463,463,463,463',
',,,,,,,,,,,,,,,,,,,463,,,463,,,463,463,,,463,,463,,463,,463,,,,,,,,463',
',,,,463,463,463,463,,463,463,,,,463,463,,457,457,457,,457,463,,463,457',
'457,,,,457,,457,457,457,457,457,457,457,,,,,,457,457,457,457,457,457',
'457,,,457,,,,,,,457,,,457,457,457,457,457,457,457,457,457,457,457,457',
',457,457,457,457,457,,,,,,,,,,,,,,,,,,,,457,,,457,,,457,457,,,457,,',
',457,,457,,,,,,,,457,,,,,457,457,457,457,,457,457,,,,457,457,,897,897',
'897,,897,457,,457,897,897,,,,897,,897,897,897,897,897,897,897,,,,,,897',
'897,897,897,897,897,897,,,897,,,,,,,897,,,897,897,897,897,897,897,897',
'897,897,897,897,897,,897,897,897,897,897,,,,,,,,,,,,,,,,,,,,897,,,897',
',,897,897,,,897,,897,,897,,897,,,,,,,,897,,,,,897,897,897,897,,897,897',
',,,897,897,,895,895,895,,895,897,,897,895,895,,,,895,,895,895,895,895',
'895,895,895,,,,,,895,895,895,895,895,895,895,,,895,,,,,,,895,,,895,895',
'895,895,895,895,895,895,,895,895,895,,895,895,895,895,895,,,,,,,,,,',
',,,,,,,,,895,,,895,,,895,895,,,895,,895,,895,,895,,,,,,,,895,,,,,895',
'895,895,895,,895,895,,,,895,895,,892,892,892,,892,895,,895,892,892,',
',,892,,892,892,892,892,892,892,892,,,,,,892,892,892,892,892,892,892',
',,892,,,,,,,892,,,892,892,892,892,892,892,892,892,892,892,892,892,,892',
'892,892,892,892,,,,,,,,,,,,,,,,,,,,892,,,892,,,892,892,,,892,,892,,892',
',892,,,,,,,,892,,,,,892,892,892,892,,892,892,,,,892,892,,19,19,19,,19',
'892,,892,19,19,,,,19,,19,19,19,19,19,19,19,,,,,,19,19,19,19,19,19,19',
',,19,,,,,,,19,,,19,19,19,19,19,19,19,19,,19,19,19,,19,19,19,19,19,,',
',,,,,,,,,,,,,,,,,19,,,19,,,19,19,,,19,,,,,,19,,,,,,,,19,,,,,19,19,19',
'19,,19,19,,,,19,19,,832,832,832,,832,19,,19,832,832,,,,832,,832,832',
'832,832,832,832,832,,,,,,832,832,832,832,832,832,832,,,832,,,,,,,832',
',,832,832,832,832,832,832,832,832,,832,832,832,,832,832,,852,832,852',
'852,852,852,852,,,,,,,,,,,,,,,832,,,832,,,832,832,,,832,,,,,,852,,,',
',,,,,852,852,852,852,832,832,832,832,,832,832,,,,832,832,,818,818,818',
',818,832,,832,818,818,,,,818,,818,818,818,818,818,818,818,,,,,,818,818',
'818,818,818,818,818,,,818,,,,,,,818,,,818,818,818,818,818,818,818,818',
',818,818,818,,818,818,818,818,818,,,,,,,,,,,,,,,,,,,,818,,,818,,,818',
'818,,,818,,,,,,818,,,,,,,,818,,,,,818,818,818,818,,818,818,,,,818,818',
',27,27,27,,27,818,,818,27,27,,,,27,,27,27,27,27,27,27,27,,,,,,27,27',
'27,27,27,27,27,,,27,,,,,,,27,,,27,27,27,27,27,27,27,27,27,27,27,27,',
'27,27,27,27,27,,,,,,,,,,,,,,,,,,,,27,,,27,,,27,27,,,27,,27,,27,,27,',
',,,,,,27,,,,,27,27,27,27,,27,27,,,,27,27,,28,28,28,,28,27,,27,28,28',
',,,28,,28,28,28,28,28,28,28,,,,,,28,28,28,28,28,28,28,,,28,,,,,,,28',
',,28,28,28,28,28,28,28,28,28,28,28,28,,28,28,28,28,28,,,,,,,,,,,,,,',
',,,,,28,,,28,,,28,28,,,28,,28,,28,,28,,,,,,,,28,,,,,28,28,28,28,,28',
'28,,,,28,28,,29,29,29,,29,28,,28,29,29,,,,29,,29,29,29,29,29,29,29,',
',,,,29,29,29,29,29,29,29,,,29,,,,,,,29,,,29,29,29,29,29,29,29,29,29',
'29,29,29,,29,29,29,29,29,,,,,,,,,,,,,,,,,,,,29,,,29,,,29,29,,,29,,29',
',29,,29,,,,,,,,29,,,,,29,29,29,29,,29,29,,,,29,29,,32,32,32,,32,29,',
'29,32,32,,,,32,,32,32,32,32,32,32,32,,,,,,32,32,32,32,32,32,32,,,32',
',,,,,,32,,,32,32,32,32,32,32,32,32,,32,32,32,,32,32,,822,32,822,822',
'822,822,822,,,,,,,,,,,,,,,32,,,32,,,32,32,,,32,,32,,,,822,,,,,,,,,822',
'822,822,822,32,32,32,32,,32,32,,,,32,32,,33,33,33,,33,32,,32,33,33,',
',,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33,,,,,,,33,',
',33,33,33,33,33,33,33,33,,33,33,33,,33,33,,,33,817,817,817,817,817,817',
'817,817,817,817,817,,817,817,,,817,817,,33,,,33,,,33,33,,,33,,,817,',
'817,,817,817,817,817,817,817,817,,817,,,,33,33,33,33,,33,33,,,,33,33',
',817,,33,,,33,,33,39,39,39,,39,,,,39,39,,,,39,,39,39,39,39,39,39,39',
',,,,,39,39,39,39,39,39,39,,,39,,,,,,,39,,,39,39,39,39,39,39,39,39,,39',
'39,39,,39,39,39,39,39,,,,,,,,,,,,,,,,,,,,39,,,39,,,39,39,,,39,,,,,,39',
',,,,,,,39,,,,,39,39,39,39,,39,39,,,,39,39,,40,40,40,,40,39,,39,40,40',
',,,40,,40,40,40,40,40,40,40,,,,,,40,40,40,40,40,40,40,,,40,,,,,,,40',
',,40,40,40,40,40,40,40,40,,40,40,40,,40,40,40,40,40,,,,,,,,,,,,,,,,',
',,,40,,,40,,,40,40,,,40,,,,,,40,,,,,,,,40,,,,,40,40,40,40,,40,40,,,',
'40,40,,41,41,41,,41,40,,40,41,41,,,,41,,41,41,41,41,41,41,41,,,,,,41',
'41,41,41,41,41,41,,,41,,,,,,,41,,,41,41,41,41,41,41,41,41,,41,41,41',
',41,41,41,41,41,,,,,,,,,,,,,,,,,,,,41,,,41,,,41,41,,,41,,,,,,41,,,,',
',,,41,,,,,41,41,41,41,,41,41,,,,41,41,,801,801,801,,801,41,,41,801,801',
',,,801,,801,801,801,801,801,801,801,,,,,,801,801,801,801,801,801,801',
',,801,,,,,,,801,,,801,801,801,801,801,801,801,801,,801,801,801,,801',
'801,801,801,801,,,,,,,,,,,,,,,,,,,,801,,,801,,,801,801,,,801,,801,,',
',801,,,,,,,,801,,,,,801,801,801,801,,801,801,,,,801,801,,53,53,53,,53',
'801,,801,53,53,,,,53,,53,53,53,53,53,53,53,,,,,,53,53,53,53,53,53,53',
',,53,,,,,,,53,,,53,53,53,53,53,53,53,53,,53,53,53,,53,53,53,53,53,,',
',,,,,,,,,,,,,,,,,53,,,53,,,53,53,,,53,,,,,,53,,,,,,,,53,,,,,53,53,53',
'53,,53,53,,,,53,53,,54,54,54,,54,53,,53,54,54,,,,54,,54,54,54,54,54',
'54,54,,,,,,54,54,54,54,54,54,54,,,54,,,,,,,54,,,54,54,54,54,54,54,54',
'54,54,54,54,54,,54,54,54,54,54,,,,,,,,,,,,,,,,,,,,54,,,54,,,54,54,,',
'54,,54,,,,54,,,,,,,,54,,,,,54,54,54,54,,54,54,,,,54,54,,55,55,55,,55',
'54,,54,55,55,,,,55,,55,55,55,55,55,55,55,,,,,,55,55,55,55,55,55,55,',
',55,,,,,,,55,,,55,55,55,55,55,55,55,55,55,55,55,55,,55,55,55,55,55,',
',,,,,,,,,,,,,,,,,,55,,,55,,,55,55,,,55,,,,,,55,,,,,,,,55,,,,,55,55,55',
'55,,55,55,,,,55,55,,58,58,58,,58,55,,55,58,58,,,,58,,58,58,58,58,58',
'58,58,,,,,,58,58,58,58,58,58,58,,,58,,,,,,,58,,,58,58,58,58,58,58,58',
'58,,58,58,58,,58,58,58,58,58,,,,,,,,,,,,,,,,,,,,58,,,58,,,58,58,,,58',
',,,,,58,,,,,,,,58,,,,,58,58,58,58,,58,58,,,,58,58,,59,59,59,,59,58,',
'58,59,59,,,,59,,59,59,59,59,59,59,59,,,,,,59,59,59,59,59,59,59,,,59',
',,,,,,59,,,59,59,59,59,59,59,59,59,,59,59,59,,59,59,59,59,59,,,,,,,',
',,,,,,,,,,,,59,,,59,,,59,59,,,59,,,,,,59,,,,,,,,59,,,,,59,59,59,59,',
'59,59,,,,59,59,,62,62,62,,62,59,,59,62,62,,,,62,,62,62,62,62,62,62,62',
',,,,,62,62,62,62,62,62,62,,,62,,,,,,,62,,,62,62,62,62,62,62,62,62,,62',
'62,62,,62,62,62,62,62,20,20,20,20,20,20,20,20,20,20,20,,20,20,,,20,20',
',62,,,62,,,62,62,,,62,,,20,,20,62,20,20,20,20,20,20,20,62,20,,,,62,62',
'62,62,,62,62,,,,62,62,62,20,,,,62,62,,62,63,63,63,,63,,,,63,63,,,,63',
',63,63,63,63,63,63,63,,,,,,63,63,63,63,63,63,63,,,63,,,,,,,63,,,63,63',
'63,63,63,63,63,63,,63,63,63,,63,63,,820,63,820,820,820,820,820,,,,,',
',,,,,,,,,63,,,63,,,63,63,,,63,,63,,,,820,,,,,,,,,820,820,820,820,63',
'63,63,63,,63,63,,,,63,63,,64,64,64,,64,63,,63,64,64,,,,64,,64,64,64',
'64,64,64,64,,,,,,64,64,64,64,64,64,64,,,64,,,,,,,64,,,64,64,64,64,64',
'64,64,64,,64,64,64,,64,64,,559,64,559,559,559,559,559,,,,,,,,,,,,64',
',,64,,,64,,,64,64,,,64,,,,,,559,559,,,,,,,,559,559,559,559,64,64,64',
'64,,64,64,,,,64,64,,65,65,65,,65,64,,64,65,65,,,,65,,65,65,65,65,65',
'65,65,,,,,,65,65,65,65,65,65,65,,,65,,,,,,,65,,,65,65,65,65,65,65,65',
'65,,65,65,65,,65,65,,707,65,707,707,707,707,707,,,,,,,,,,,,,,,65,,,65',
',,65,65,,,65,,,,,,707,,,,,,,,,707,707,707,707,65,65,65,65,,65,65,,,',
'65,65,,796,796,796,,796,65,,65,796,796,,,,796,,796,796,796,796,796,796',
'796,,,,,,796,796,796,796,796,796,796,,,796,,,,,,,796,,,796,796,796,796',
'796,796,796,796,,796,796,796,,796,796,796,796,796,,,,,,,,,,,,,,,,,,',
',796,,,796,,,796,796,,,796,,,,,,796,,,,,,,,796,,,,,796,796,796,796,',
'796,796,,,,796,796,,101,101,101,101,101,796,,796,101,101,,,,101,,101',
'101,101,101,101,101,101,,,,,,101,101,101,101,101,101,101,,,101,,,,,',
'101,101,101,101,101,101,101,101,101,101,101,101,,101,101,101,,101,101',
'101,101,101,495,495,495,495,495,495,495,495,495,495,495,,495,495,,,495',
'495,,101,,,101,,,101,101,,,101,,101,495,,495,101,495,495,495,495,495',
'495,495,101,495,,,,101,101,101,101,,101,101,,,,101,101,,495,,,,101,101',
',101,106,106,106,,106,,,,106,106,,,,106,,106,106,106,106,106,106,106',
',,,,,106,106,106,106,106,106,106,,,106,,,,,,,106,,,106,106,106,106,106',
'106,106,106,,106,106,106,,106,106,106,106,106,,,,,,,,,,,,,,,,,,,,106',
',,106,,,106,106,,,106,,,,,,106,,,,,,,,106,,,,,106,106,106,106,,106,106',
',,,106,106,,107,107,107,,107,106,,106,107,107,,,,107,,107,107,107,107',
'107,107,107,,,,,,107,107,107,107,107,107,107,,,107,,,,,,,107,,,107,107',
'107,107,107,107,107,107,,107,107,107,,107,107,107,107,107,,,,,,,,,,',
',,,,,,,,,107,,,107,,,107,107,,,107,,,,,,107,,,,,,,,107,,,,,107,107,107',
'107,,107,107,,,,107,107,,108,108,108,,108,107,,107,108,108,,,,108,,108',
'108,108,108,108,108,108,,,,,,108,108,108,108,108,108,108,,,108,,,,,',
',108,,,108,108,108,108,108,108,108,108,,108,108,108,,108,108,108,108',
'108,,,,,,,,,,,,,,,,,,,,108,,,108,,,108,108,,,108,,,,,,108,,,,,,,,108',
',,,,108,108,108,108,,108,108,,,,108,108,,109,109,109,,109,108,,108,109',
'109,,,,109,,109,109,109,109,109,109,109,,,,,,109,109,109,109,109,109',
'109,,,109,,,,,,,109,,,109,109,109,109,109,109,109,109,,109,109,109,',
'109,109,109,109,109,,,,,,,,,,,,,,,,,,,,109,,,109,,,109,109,,,109,,,',
',,109,,,,,,,,109,,,,,109,109,109,109,,109,109,,,,109,109,,110,110,110',
'110,110,109,,109,110,110,,,,110,,110,110,110,110,110,110,110,,,,,,110',
'110,110,110,110,110,110,,,110,,,,,,110,110,,110,110,110,110,110,110',
'110,110,110,,110,110,110,,110,110,110,110,110,,,,,,,,,,,,,,,,,,,,110',
',,110,,,110,110,,,110,,110,,,,110,,,,,,,,110,,,,,110,110,110,110,,110',
'110,,,,110,110,,773,773,773,,773,110,,110,773,773,,,,773,,773,773,773',
'773,773,773,773,,,,,,773,773,773,773,773,773,773,,,773,,,,,,,773,,,773',
'773,773,773,773,773,773,773,,773,773,773,,773,773,,665,773,665,665,665',
'665,665,,,,,,,,,,,,,,,773,,,773,,,773,773,,,773,,,,,,665,,,,,,,,,665',
'665,665,665,773,773,773,773,,773,773,,,,773,773,,196,196,196,,196,773',
',773,196,196,,,,196,,196,196,196,196,196,196,196,,,,,,196,196,196,196',
'196,196,196,,,196,,,,,,,196,,,196,196,196,196,196,196,196,196,,196,196',
'196,,196,196,196,196,196,,,,,,,,,,,,,,,,,,,,196,,,196,,,196,196,,,196',
',196,,,,196,,,,,,,,196,,,,,196,196,196,196,,196,196,,,,196,196,,197',
'197,197,,197,196,,196,197,197,,,,197,,197,197,197,197,197,197,197,,',
',,,197,197,197,197,197,197,197,,,197,,,,,,,197,,,197,197,197,197,197',
'197,197,197,,197,197,197,,197,197,197,197,197,,,,,,,,,,,,,,,,,,,,197',
',,197,,,197,197,,,197,,197,,,,197,,,,,,,,197,,,,,197,197,197,197,,197',
'197,,,,197,197,,198,198,198,,198,197,,197,198,198,,,,198,,198,198,198',
'198,198,198,198,,,,,,198,198,198,198,198,198,198,,,198,,,,,,,198,,,198',
'198,198,198,198,198,198,198,,198,198,198,,198,198,198,198,198,,,,,,',
',,,,,,,,,,,,,198,,,198,,,198,198,,,198,,,,,,198,,,,,,,,198,,,,,198,198',
'198,198,,198,198,,,,198,198,,696,696,696,,696,198,,198,696,696,,,,696',
',696,696,696,696,696,696,696,,,,,,696,696,696,696,696,696,696,,,696',
',,,,,,696,,,696,696,696,696,696,696,696,696,,696,696,696,,696,696,696',
'696,696,,,,,,,,,,,,,,,,,,,,696,,,696,,,696,696,,,696,,,,,,696,,,,,,',
',696,,,,,696,696,696,696,,696,696,,,,696,696,,281,281,281,,281,696,',
'696,281,281,,,,281,,281,281,281,281,281,281,281,,,,,,281,281,281,281',
'281,281,281,,,281,,,,,,,281,,,281,281,281,281,281,281,281,281,,281,281',
'281,,281,281,,,281,407,407,407,407,407,407,407,407,407,407,407,,407',
'407,,,407,407,,281,,,281,,,281,281,,,281,,,407,,407,,407,407,407,407',
'407,407,407,,407,,,,281,281,281,281,,281,281,,,,281,281,,407,,281,,',
'281,,281,670,670,670,,670,,,,670,670,,,,670,,670,670,670,670,670,670',
'670,,,,,,670,670,670,670,670,670,670,,,670,,,,,,,670,,,670,670,670,670',
'670,670,670,670,,670,670,670,,670,670,670,670,670,,,,,,,,,,,,,,,,,,',
',670,,,670,,,670,670,,,670,,,,,,670,,,,,,,,670,,,,,670,670,670,670,',
'670,670,,,,670,670,,297,297,297,,297,670,,670,297,297,,,,297,,297,297',
'297,297,297,297,297,,,,,,297,297,297,297,297,297,297,,,297,,,,,,,297',
',,297,297,297,297,297,297,297,297,,297,297,297,,297,297,,663,297,663',
'663,663,663,663,,,,,,,,,,,,,,,297,,,297,,,297,297,,,297,,,,,,663,,,',
',,,,,663,663,663,663,297,297,297,297,,297,297,,,,297,297,,645,645,645',
',645,297,,297,645,645,,,,645,,645,645,645,645,645,645,645,,,,,,645,645',
'645,645,645,645,645,,,645,,,,,,,645,,,645,645,645,645,645,645,645,645',
',645,645,645,,645,645,,,645,,,,,,,,,,,,,,,,,,,,645,,,645,,,645,645,',
',645,,,,,,,,,,,,,,,,,,,645,645,645,645,,645,645,,,,645,645,,306,306',
'306,,306,645,,645,306,306,,,,306,,306,306,306,306,306,306,306,,,,,,306',
'306,306,306,306,306,306,,,306,,,,,,,306,,,306,306,306,306,306,306,306',
'306,,306,306,306,,306,306,306,306,306,,,,,,,,,,,,,,,,,,,,306,,,306,306',
',306,306,,,306,,,,,,306,,,,,,,,306,,,,,306,306,306,306,,306,306,,,,306',
'306,,634,634,634,,634,306,,306,634,634,,,,634,,634,634,634,634,634,634',
'634,,,,,,634,634,634,634,634,634,634,,,634,,,,,,,634,,,634,634,634,634',
'634,634,634,634,,634,634,634,,634,634,,,634,,,,,,,,,,,,,,,,,,,,634,',
',634,,,634,634,,,634,,,,,,,,,,,,,,,,,,,634,634,634,634,,634,634,,,,634',
'634,,629,629,629,,629,634,,634,629,629,,,,629,,629,629,629,629,629,629',
'629,,,,,,629,629,629,629,629,629,629,,,629,,,,,,,629,,,629,629,629,629',
'629,629,629,629,,629,629,629,,629,629,629,629,629,,,,,,,,,,,,,,,,,,',
',629,,,629,,,629,629,,,629,,,,,,629,,,,,,,,629,,,,,629,629,629,629,',
'629,629,,,,629,629,,323,323,323,,323,629,,629,323,323,,,,323,,323,323',
'323,323,323,323,323,,,,,,323,323,323,323,323,323,323,,,323,,,,,,,323',
',,323,323,323,323,323,323,323,323,,323,323,323,,323,323,323,323,323',
',,,,,,,,,,,,,,,,,,,323,,,323,,,323,323,,,323,,,,,,323,,,,,,,,323,,,',
',323,323,323,323,,323,323,,,,323,323,,324,324,324,,324,323,,323,324',
'324,,,,324,,324,324,324,324,324,324,324,,,,,,324,324,324,324,324,324',
'324,,,324,,,,,,,324,,,324,324,324,324,324,324,324,324,,324,324,324,',
'324,324,324,324,324,,,,,,,,,,,,,,,,,,,,324,,,324,,,324,324,,,324,,,',
',,324,,,,,,,,324,,,,,324,324,324,324,,324,324,,,,324,324,,595,595,595',
',595,324,,324,595,595,,,,595,,595,595,595,595,595,595,595,,,,,,595,595',
'595,595,595,595,595,,,595,,,,,,,595,,,595,595,595,595,595,595,595,595',
',595,595,595,,595,595,595,595,595,,,,,,,,,,,,,,,,,,,,595,,,595,,,595',
'595,,,595,,,,,,595,,,,,,,,595,,,,,595,595,595,595,,595,595,,,,595,595',
',594,594,594,,594,595,,595,594,594,,,,594,,594,594,594,594,594,594,594',
',,,,,594,594,594,594,594,594,594,,,594,,,,,,,594,,,594,594,594,594,594',
'594,594,594,,594,594,594,,594,594,594,594,594,,,,,,,,,,,,,,,,,,,,594',
',,594,,,594,594,,,594,,,,,,594,,,,,,,,594,,,,,594,594,594,594,,594,594',
',,,594,594,,590,590,590,,590,594,,594,590,590,,,,590,,590,590,590,590',
'590,590,590,,,,,,590,590,590,590,590,590,590,,,590,,,,,,,590,,,590,590',
'590,590,590,590,590,590,,590,590,590,,590,590,590,590,590,,,,,,,,,,',
',,,,,,,,,590,,,590,,,590,590,,,590,,,,,,590,,,,,,,,590,,,,,590,590,590',
'590,,590,590,,,,590,590,,589,589,589,,589,590,,590,589,589,,,,589,,589',
'589,589,589,589,589,589,,,,,,589,589,589,589,589,589,589,,,589,,,,,',
',589,,,589,589,589,589,589,589,589,589,,589,589,589,,589,589,589,589',
'589,,,,,,,,,,,,,,,,,,,,589,,,589,,,589,589,,,589,,,,,,589,,,,,,,,589',
',,,,589,589,589,589,,589,589,,,,589,589,,586,586,586,,586,589,,589,586',
'586,,,,586,,586,586,586,586,586,586,586,,,,,,586,586,586,586,586,586',
'586,,,586,,,,,,,586,,,586,586,586,586,586,586,586,586,,586,586,586,',
'586,586,586,586,586,,,,,,,,,,,,,,,,,,,,586,,,586,,,586,586,,,586,,,',
',,586,,,,,,,,586,,,,,586,586,586,586,,586,586,,,,586,586,,585,585,585',
',585,586,,586,585,585,,,,585,,585,585,585,585,585,585,585,,,,,,585,585',
'585,585,585,585,585,,,585,,,,,,,585,,,585,585,585,585,585,585,585,585',
',585,585,585,,585,585,585,585,585,,,,,,,,,,,,,,,,,,,,585,,,585,,,585',
'585,,,585,,585,,,,585,,,,,,,,585,,,,,585,585,585,585,,585,585,,,,585',
'585,,583,583,583,,583,585,,585,583,583,,,,583,,583,583,583,583,583,583',
'583,,,,,,583,583,583,583,583,583,583,,,583,,,,,,,583,,,583,583,583,583',
'583,583,583,583,,583,583,583,,583,583,583,583,583,,,,,,,,,,,,,,,,,,',
',583,,,583,,,583,583,,,583,,,,,,583,,,,,,,,583,,,,,583,583,583,583,',
'583,583,,,,583,583,,342,342,342,,342,583,,583,342,342,,,,342,,342,342',
'342,342,342,342,342,,,,,,342,342,342,342,342,342,342,,,342,,,,,,,342',
',,342,342,342,342,342,342,342,342,,342,342,342,,342,342,342,342,342',
',,,,,,,,,,,,,,,,,,,342,,,342,,,342,342,,,342,,,,,,342,,,,,,,,342,,,',
',342,342,342,342,,342,342,,,,342,342,,555,555,555,,555,342,,342,555',
'555,,,,555,,555,555,555,555,555,555,555,,,,,,555,555,555,555,555,555',
'555,,,555,,,,,,,555,,,555,555,555,555,555,555,555,555,,555,555,555,',
'555,555,555,555,555,,,,,,,,,,,,,,,,,,,,555,,,555,,,555,555,,,555,,,',
',,555,,,,,,,,555,,,,,555,555,555,555,,555,555,,,,555,555,,552,552,552',
',552,555,,555,552,552,,,,552,,552,552,552,552,552,552,552,,,,,,552,552',
'552,552,552,552,552,,,552,,,,,,,552,,,552,552,552,552,552,552,552,552',
'552,552,552,552,,552,552,552,552,552,,,,,,,,,,,,,,,,,,,,552,,,552,,',
'552,552,,,552,,552,,552,,552,,,,,,,,552,,,,,552,552,552,552,,552,552',
',,,552,552,,542,542,542,,542,552,,552,542,542,,,,542,,542,542,542,542',
'542,542,542,,,,,,542,542,542,542,542,542,542,,,542,,,,,,,542,,,542,542',
'542,542,542,542,542,542,542,542,542,542,,542,542,542,542,542,,,,,,,',
',,,,,,,,,,,,542,,,542,,,542,542,,,542,,542,,542,,542,,,,,,,,542,,,,',
'542,542,542,542,,542,542,,,,542,542,,541,541,541,,541,542,,542,541,541',
',,,541,,541,541,541,541,541,541,541,,,,,,541,541,541,541,541,541,541',
',,541,,,,,,,541,,,541,541,541,541,541,541,541,541,,541,541,541,,541',
'541,541,541,541,,,,,,,,,,,,,,,,,,,,541,,,541,,,541,541,,,541,,541,,',
',541,,,,,,,,541,,,,,541,541,541,541,,541,541,,,,541,541,,357,357,357',
',357,541,,541,357,357,,,,357,,357,357,357,357,357,357,357,,,,,,357,357',
'357,357,357,357,357,,,357,,,,,,,357,,,357,357,357,357,357,357,357,357',
',357,357,357,,357,357,357,357,357,,,,,,,,,,,,,,,,,,,,357,,,357,,,357',
'357,,,357,,,,,,357,,,,,,,,357,,,,,357,357,357,357,,357,357,,,,357,357',
',384,384,384,,384,357,,357,384,384,,,,384,,384,384,384,384,384,384,384',
',,,,,384,384,384,384,384,384,384,,,384,,,,,,,384,,,384,384,384,384,384',
'384,384,384,,384,384,384,,384,384,384,384,384,,,,,,,,,,,,,,,,,,,,384',
',,384,,,384,384,,,384,,,,,,384,,,,,,,,384,,,,,384,384,384,384,,384,384',
',,,384,384,,505,505,505,,505,384,,384,505,505,,,,505,,505,505,505,505',
'505,505,505,,,,,,505,505,505,505,505,505,505,,,505,,,,,,,505,,,505,505',
'505,505,505,505,505,505,505,505,505,505,,505,505,505,505,505,,,,,,,',
',,,,,,,,,,,,505,,,505,,,505,505,,,505,,,,,,505,,,,,,,,505,,,,,505,505',
'505,505,,505,505,,,,505,505,,502,502,502,,502,505,,505,502,502,,,,502',
',502,502,502,502,502,502,502,,,,,,502,502,502,502,502,502,502,,,502',
',,,,,,502,,,502,502,502,502,502,502,502,502,502,502,502,502,,502,502',
'502,502,502,,,,,,,,,,,,,,,,,,,,502,,,502,,,502,502,,,502,,502,,,,502',
',,,,,,,502,,,,,502,502,502,502,,502,502,,,,502,502,,498,498,498,,498',
'502,,502,498,498,,,,498,,498,498,498,498,498,498,498,,,,,,498,498,498',
'498,498,498,498,,,498,,,,,,,498,,,498,498,498,498,498,498,498,498,,498',
'498,498,,498,498,498,498,498,,,,,,,,,,,,,,,,,,,,498,,,498,,,498,498',
',,498,,498,,,,498,,,,,,,,498,,,,,498,498,498,498,,498,498,,,,498,498',
',496,496,496,,496,498,,498,496,496,,,,496,,496,496,496,496,496,496,496',
',,,,,496,496,496,496,496,496,496,,,496,,,,,,,496,,,496,496,496,496,496',
'496,496,496,,496,496,496,,496,496,496,496,496,,,,,,,,,,,,,,,,,,,,496',
',,496,,,496,496,,,496,,,,,,496,,,,,,,,496,,,,,496,496,496,496,,496,496',
',,,496,496,,492,492,492,,492,496,,496,492,492,,,,492,,492,492,492,492',
'492,492,492,,,,,,492,492,492,492,492,492,492,,,492,,,,,,,492,,,492,492',
'492,492,492,492,492,492,,492,492,492,,492,492,492,492,492,,,,,,,,,,',
',,,,,,,,,492,,,492,,,492,492,,,492,,,,,,492,,,,,,,,492,,,,,492,492,492',
'492,,492,492,,,,492,492,,491,491,491,,491,492,,492,491,491,,,,491,,491',
'491,491,491,491,491,491,,,,,,491,491,491,491,491,491,491,,,491,,,,,',
',491,,,491,491,491,491,491,491,491,491,,491,491,491,,491,491,491,491',
'491,,,,,,,,,,,,,,,,,,,,491,,,491,,,491,491,,,491,,,,,,491,,,,,,,,491',
',,,,491,491,491,491,,491,491,,,,491,491,,416,416,416,,416,491,,491,416',
'416,,,,416,,416,416,416,416,416,416,416,,,,,,416,416,416,416,416,416',
'416,,,416,,,,,,,416,,,416,416,416,416,416,416,416,416,416,416,416,416',
',416,416,416,416,416,,,,,,,,,,,,,,,,,,,,416,,,416,,,416,416,,,416,,416',
',416,,416,,,,,,,,416,,,,,416,416,416,416,,416,416,,,,416,416,,490,490',
'490,,490,416,,416,490,490,,,,490,,490,490,490,490,490,490,490,,,,,,490',
'490,490,490,490,490,490,,,490,,,,,,,490,,,490,490,490,490,490,490,490',
'490,,490,490,490,,490,490,490,490,490,,,,,,,,,,,,,,,,,,,,490,,,490,',
',490,490,,,490,,,,,,490,,,,,,,,490,,,,,490,490,490,490,,490,490,,,,490',
'490,,418,418,418,,418,490,,490,418,418,,,,418,,418,418,418,418,418,418',
'418,,,,,,418,418,418,418,418,418,418,,,418,,,,,,,418,,,418,418,418,418',
'418,418,418,418,,418,418,418,,418,418,418,418,418,,,,,,,,,,,,,,,,,,',
',418,,,418,,,418,418,,,418,,,,,,418,,,,,,,,418,,,,,418,418,418,418,',
'418,418,,,,418,418,,419,419,419,,419,418,,418,419,419,,,,419,,419,419',
'419,419,419,419,419,,,,,,419,419,419,419,419,419,419,,,419,,,,,,,419',
',,419,419,419,419,419,419,419,419,,419,419,419,,419,419,419,419,419',
',,,,,,,,,,,,,,,,,,,419,,,419,,,419,419,,,419,,,,,,419,,,,,,,,419,,,',
',419,419,419,419,,419,419,,,,419,419,,420,420,420,,420,419,,419,420',
'420,,,,420,,420,420,420,420,420,420,420,,,,,,420,420,420,420,420,420',
'420,,,420,,,,,,,420,,,420,420,420,420,420,420,420,420,,420,420,420,',
'420,420,420,420,420,,,,,,,,,,,,,,,,,,,,420,,,420,,,420,420,,,420,,,',
',,420,,,,,,,,420,,,,,420,420,420,420,,420,420,,,,420,420,,487,487,487',
',487,420,,420,487,487,,,,487,,487,487,487,487,487,487,487,,,,,,487,487',
'487,487,487,487,487,,,487,,,,,,,487,,,487,487,487,487,487,487,487,487',
',487,487,487,,487,487,,,487,,,,,,,,,,,,,,,,,,,,487,,,487,,,487,487,',
',487,,,,,,,,,,,,,,,,,,,487,487,487,487,,487,487,,,,487,487,,480,480',
'480,,480,487,,487,480,480,,,,480,,480,480,480,480,480,480,480,,,,,,480',
'480,480,480,480,480,480,,,480,,,,,,,480,,,480,480,480,480,480,480,480',
'480,480,480,480,480,,480,480,480,480,480,,,,,,,,,,,,,,,,,,,,480,,,480',
',,480,480,,,480,,480,,480,,480,,,,,,,,480,,,,,480,480,480,480,,480,480',
',,,480,480,,478,478,478,,478,480,,480,478,478,,,,478,,478,478,478,478',
'478,478,478,,,,,,478,478,478,478,478,478,478,,,478,,,,,,,478,,,478,478',
'478,478,478,478,478,478,,478,478,478,,478,478,,,478,,,,,,,,,,,,,,,,',
',,,478,,,478,,,478,478,,,478,,,,,,,,,,,,,,,,,,,478,478,478,478,,478',
'478,,,,478,478,,467,467,467,,467,478,,478,467,467,,,,467,,467,467,467',
'467,467,467,467,,,,,,467,467,467,467,467,467,467,,,467,,,,,,,467,,,467',
'467,467,467,467,467,467,467,,467,467,467,,467,467,467,467,467,446,446',
'446,446,446,446,446,446,446,446,446,,446,446,,,446,446,,467,,,467,,',
'467,467,,,467,,,446,,446,467,446,446,446,446,446,446,446,467,446,,,',
'467,467,467,467,,467,467,,,,467,467,446,446,395,,,,467,,467,395,395',
'395,,,395,395,395,,395,,,,,,,,,395,395,395,,,,,,,,,395,395,,395,395',
'395,395,395,,,,,,,,,,,,,,,,,,,,,,,395,395,395,395,395,395,395,395,395',
'395,395,395,395,395,,,395,395,395,,,395,,395,395,,,395,395,,395,,395',
',395,,395,395,395,395,395,395,395,448,395,395,395,,,,448,448,448,,,448',
'448,448,,448,395,395,,395,,395,,,,448,,,,,,,,,,448,448,,448,448,448',
'448,448,,,,,,,,,,,,,,,,,,,,,,,25,,,,,,,25,25,25,,448,25,25,25,,25,,448',
',,,,448,448,25,25,25,,,,,,,,,25,25,,25,25,25,25,25,,,448,,,,,,,,,,,',
',,448,,,,,448,25,25,25,25,25,25,25,25,25,25,25,25,25,25,,,25,25,25,',
',25,,25,25,,,25,25,,25,,25,,25,,25,25,25,25,25,25,25,26,25,25,25,,,',
'26,26,26,,,26,26,26,,26,25,25,,25,,25,,,,26,26,,,,,,,,,26,26,,26,26',
'26,26,26,,,,,,,,,,,,,,,,,,,,,,,26,26,26,26,26,26,26,26,26,26,26,26,26',
'26,,,26,26,26,,,26,,26,26,,,26,26,,26,,26,,26,,26,26,26,26,26,26,26',
'451,26,,26,,,,451,451,451,,,451,451,451,,451,26,26,,26,,26,,,,451,,',
',,,,,,,451,451,,451,451,451,451,451,,,,,,200,200,,,200,,,,,,,,200,200',
',200,200,200,200,200,200,200,,,200,200,,,451,200,200,200,200,,,451,',
',200,,451,451,,,,,200,200,,200,200,200,200,200,200,200,200,200,200,200',
',,200,451,,,,,,,,,,,,,,451,,,,,451,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9',
'9,9,9,9,9,9,9,,,,9,9,9,9,9,9,9,9,9,9,,,,,,9,9,9,9,9,9,9,9,9,,,9,,,,',
',,,9,9,,9,9,9,9,9,9,9,,,9,9,,,,9,9,9,9,,,,,,,,,,,,,,9,9,,9,9,9,9,9,9',
'9,9,9,9,9,,,9,9,,,,,,,,,,,9,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8',
'8,8,8,8,,,,8,8,8,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,8,8,8,,8,,,,,,,,8',
'8,,8,8,8,8,8,8,8,,,8,8,,,,8,8,8,8,,,,,,,,,,,,,,8,8,,8,8,8,8,8,8,8,8',
'8,8,8,,,8,8,,,,,,,,,,,8,581,581,581,581,581,581,581,581,581,581,581',
'581,581,581,581,581,581,581,581,581,581,581,581,581,,,,581,581,581,581',
'581,581,581,581,581,581,,,,,,581,581,581,581,581,581,581,581,581,,,581',
',,,,,,,581,581,,581,581,581,581,581,581,581,,,581,581,,,,581,581,581',
'581,,,,,,,,,,,,,,581,581,,581,581,581,581,581,581,581,581,581,581,581',
',,581,581,,,,,,,,,,,581,374,374,374,374,374,374,374,374,374,374,374',
'374,374,374,374,374,374,374,374,374,374,374,374,374,,,,374,374,374,374',
'374,374,374,374,374,374,,,,,,374,374,374,374,374,374,374,374,374,,,374',
',,,,,,,374,374,,374,374,374,374,374,374,374,,,374,374,,,,374,374,374',
'374,,,,,,,,,,,,,,374,374,,374,374,374,374,374,374,374,374,374,374,374',
',,374,374,,,,,,,,,,,374,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66',
'66,66,66,66,66,66,66,66,66,,,,66,66,66,66,66,66,66,66,66,66,,,,,,66',
'66,66,66,66,66,66,66,66,66,66,66,,66,,,,,,66,66,,66,66,66,66,66,66,66',
',,66,66,,,,66,66,66,66,,,,,,66,,,,,,,,66,66,,66,66,66,66,66,66,66,66',
'66,66,66,,,66,709,709,709,709,709,709,709,709,709,709,709,709,709,709',
'709,709,709,709,709,709,709,709,709,709,,,,709,709,709,709,709,709,709',
'709,709,709,,,,,,709,709,709,709,709,709,709,709,709,,,709,,,,,,,,709',
'709,,709,709,709,709,709,709,709,,,709,709,,,,709,709,709,709,,,,,,',
',,,,,,,709,709,,709,709,709,709,709,709,709,709,709,709,709,201,201',
'709,,201,,,,,,,,201,201,,201,201,201,201,201,201,201,,,201,201,,,,201',
'201,201,201,,,,,,201,,,,,,,,201,201,,201,201,201,201,201,201,201,201',
'201,201,201,247,247,201,,247,,,,,,,,247,247,,247,247,247,247,247,247',
'247,,,247,247,,,,247,247,247,247,,,,,,,,,,,,,,247,247,,247,247,247,247',
'247,247,247,247,247,247,247,248,248,247,,248,,,,,,,,248,248,,248,248',
'248,248,248,248,248,,,248,248,,,,248,248,248,248,,,,,,,,,,,,,,248,248',
',248,248,248,248,248,248,248,248,248,248,248,414,414,248,,414,,,,,,',
',414,414,,414,414,414,414,414,414,414,,,414,414,,,,414,414,414,414,',
',,,,414,,,,,,,,414,414,,414,414,414,414,414,414,414,414,414,414,414',
'415,415,414,,415,,,,,,,,415,415,,415,415,415,415,415,415,415,,,415,415',
',,,415,415,415,415,,,,,,415,,,,,,,,415,415,,415,415,415,415,415,415',
'415,415,415,415,415,481,481,415,,481,,,,,,,,481,481,,481,481,481,481',
'481,481,481,,,481,481,,,,481,481,481,481,,,,,,481,,,,,,,,481,481,,481',
'481,481,481,481,481,481,481,481,481,481,482,482,481,,482,,,,,,,,482',
'482,,482,482,482,482,482,482,482,,,482,482,,,,482,482,482,482,,,,,,482',
',,,,,,,482,482,,482,482,482,482,482,482,482,482,482,482,482,493,493',
'482,,493,,,,,,,,493,493,,493,493,493,493,493,493,493,,,493,493,,,,493',
'493,493,493,,,,,,493,,,,,,,,493,493,,493,493,493,493,493,493,493,493',
'493,493,493,494,494,493,,494,,,,,,,,494,494,,494,494,494,494,494,494',
'494,,,494,494,,,,494,494,494,494,,,,,,494,,,,,,,,494,494,,494,494,494',
'494,494,494,494,494,494,494,494,543,543,494,,543,,,,,,,,543,543,,543',
'543,543,543,543,543,543,,,543,543,,,,543,543,543,543,,,,,,543,,,,,,',
',543,543,,543,543,543,543,543,543,543,543,543,543,543,544,544,543,,544',
',,,,,,,544,544,,544,544,544,544,544,544,544,,,544,544,,,,544,544,544',
'544,,,,,,544,,,,,,,,544,544,,544,544,544,544,544,544,544,544,544,544',
'544,550,550,544,,550,,,,,,,,550,550,,550,550,550,550,550,550,550,,,550',
'550,,,,550,550,550,550,,,,,,550,,,,,,,,550,550,,550,550,550,550,550',
'550,550,550,550,550,550,551,551,550,,551,,,,,,,,551,551,,551,551,551',
'551,551,551,551,,,551,551,,,,551,551,551,551,,,,,,551,,,,,,,,551,551',
',551,551,551,551,551,551,551,551,551,551,551,898,898,551,,898,,,,,,',
',898,898,,898,898,898,898,898,898,898,,,898,898,,,,898,898,898,898,',
',,,,898,,,,,,,,898,898,,898,898,898,898,898,898,898,898,898,898,898',
'899,899,898,,899,,,,,,,,899,899,,899,899,899,899,899,899,899,,,899,899',
',,,899,899,899,899,,,,,,899,,,,,,,,899,899,,899,899,899,899,899,899',
'899,899,899,899,899,927,927,899,,927,,,,,,,,927,927,,927,927,927,927',
'927,927,927,,,927,927,,,,927,927,927,927,,,,,,927,,,,,,,,927,927,,927',
'927,927,927,927,927,927,927,927,927,927,,,927,646,646,646,646,646,646',
'646,646,646,646,646,,646,646,,,646,646,,,,,,,,,,,,,,,646,,646,,646,646',
'646,646,646,646,646,,646,,722,722,722,722,722,722,722,722,722,722,722',
',722,722,,646,722,722,,,,,,,,,,,,,,,722,,722,,722,722,722,722,722,722',
'722,,722,,725,725,725,725,725,725,725,725,725,725,725,,725,725,,722',
'725,725,,,,,,,,,,,,,,,725,,725,,725,725,725,725,725,725,725,,725,,729',
'729,729,729,729,729,729,729,729,729,729,,729,729,,725,729,729,,,,,,',
',,,,,,,,729,,729,,729,729,729,729,729,729,729,,729,,731,731,731,731',
'731,731,731,731,731,731,731,,731,731,,729,731,731,,,,,,,,,,,,,,,731',
',731,,731,731,731,731,731,731,731,,731,,734,734,734,734,734,734,734',
'734,734,734,734,,734,734,,731,734,734,,,,,,,,,,,,,,,734,,734,,734,734',
'734,734,734,734,734,,734,,736,736,736,736,736,736,736,736,736,736,736',
',736,736,,734,736,736,,,,,,,,,,,,,,,736,,736,,736,736,736,736,736,736',
'736,,736,,261,261,261,261,261,261,261,261,261,261,261,,261,261,,736',
'261,261,,,,,,,,,,,,,,,261,,261,,261,261,261,261,261,261,261,,261,,819',
'819,819,819,819,819,819,819,819,819,819,,819,819,,261,819,819,,,,,,',
',,,,,,,,819,,819,,819,819,819,819,819,819,819,,819,,,,,,,,,,,,,,,,,819' ]
        racc_action_check = arr = ::Array.new(23590, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  1765,   409,   nil,   472,   nil,  9537,  1158,  1005, 21602, 21478,
   974,   940,   936,   916,  1251,   398,   360,   nil,   -65, 12045,
 14178,   813,   nil,   318,     2, 21130, 21239, 12420, 12545, 12670,
   nil,  3287, 12795, 12920,   nil,   624,   451,   679,   426, 13053,
 13178, 13303,   606,  1007,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  1507,  1640, 13553, 13678, 13803,   -24,   nil, 13928, 14053,
   nil,   nil, 14178, 14311, 14436, 14561, 21974,   nil,   nil,   nil,
   nil,   nil,   150,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   125,   nil,   nil,   489,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   710,
   nil, 14811,   nil,   nil,   nil,   nil, 14944, 15069, 15194, 15319,
 15444,   754,   nil,   481,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   494,   nil,  1129, 15694, 15819, 15944,  4912,
 21346, 22146,  5037,  5162,  5287,  5412,  5537,   nil,   nil,   885,
   175,   493,   180,   330,   329,   nil,  6037,  3412,   296,  6287,
  6412,  6537,  6662,  6787,  6912,  7037,  7162,  7287,  7412,  7537,
  7662,  7787,  7912,  8037,  8162,  8287,  8412,  8537,  8662,  8787,
  8912,  9037,  9162,  9287,  9412,   nil,   nil, 22206, 22266,   279,
  9787,  9912,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 10037,
   nil, 23416,   nil,   217,   191,   nil, 10537,   225, 10787,   nil,
 10912,   nil,   nil,   416,   701, 11037,   144,  3912,    61,   -41,
   -84, 16194,  2640,   884,   882,  1298,   757,   nil,  1258,  1184,
   135,   nil,   nil,   nil,  1207,   508,  1161, 16452,   nil,   528,
  1201,  1181,   627,   nil,  1163,   nil, 16702,  1221,  1210,   541,
   nil,   297,   512,  1091,  1054,   -94,  1070,   nil,   nil,   551,
   499,    43,    -9, 17077, 17202,   503,  1126,  1022,    27,   559,
  1140,    41,  1228,   nil,   nil,   224,   225,   -34,   nil,   497,
   nil,    14, 18202,   nil,   nil,   434,   266,   340,   201,    15,
   314,   408,   222,   368,   nil,   -46,   nil, 18827,   nil,   182,
   401,   398,   306,   -34,   247,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   678, 21850,   nil,   nil,   nil,   nil,   698,
   nil,   nil,  1379,   nil, 18952,   692,   nil,   778,   nil,   nil,
  3026,   820,   nil,   414,   258, 20955,   nil,   nil,   nil,     0,
   364,   928,   nil,   nil,  3154,  2893,   nil, 16194,   nil,   nil,
   nil,   -25,   nil,   998, 22326, 22386, 19827,   124, 20077, 20202,
 20327,  3412,  2640,  1399,  1274,   801,   806,   821,   926,  3787,
  4037,  3912,  1890,  1765,  1640,  3537,  2390,  1254,  3287,  2140,
  2015,  2265,  1434,  1229,  3662,  2515, 20827,   165, 21064,   nil,
   nil, 21348,   nil,   nil,   991,   nil,   nil, 11545,   169,   -52,
   853,   nil,   nil, 11420,   nil, 11295,   nil, 20827,   nil,   nil,
   nil, 11162,  1129,   495,   -41,   nil,   nil,  -123, 20702,  1239,
 20577, 22446, 22506,    95,  1008,   nil,   nil, 20452,   961,   nil,
 19952, 19702, 19577, 22566, 22626, 14811, 19452,  1002, 19327,   nil,
   865,   nil, 19202,   nil,   nil, 19077,   nil,   nil,   nil,    -3,
  3118,   nil,   777,   774,   766,   nil,   nil,   nil,   nil,   nil,
   nil,   -77,   841,   nil,   619,   nil,   nil,   nil,   nil,   840,
   nil,   nil,   814,  4037,   802,   nil,  4787,    28,    24,   733,
   719, 18702, 18577, 22686, 22746,    -1,   nil,   nil,   461,   nil,
 22806, 22866, 18452,   nil,   nil, 18327,   499,   -17,  2140, 14449,
   nil,   nil,   nil,    58,   nil,   nil,   nil,   709,   nil,   nil,
   nil,  1179,   nil,   nil,    84,   nil,   nil,  1163,   nil,   nil,
   nil, 21726,   nil, 18077,  1149, 17952, 17827,   158,  1081, 17702,
 17577,  1049,   nil,   nil, 17452, 17327,  1045,   nil,   nil,   nil,
   -38,   -39,   619,   255,  1030,  2765,  1037,   nil,   453,   nil,
  4412,   nil,   nil,   nil,   nil,   -44,   nil, 11162,   -69,  1060,
   nil,  1084,   nil,  4537,  2265,   nil,  1084,   nil,  1128, 16952,
   nil,   nil,   570,   -72, 16827,  1093,   nil,  1097,    91,    87,
  1143,   367,   759,  1152,  1113, 16577, 23094,  1196,  1200,   146,
  1262,   nil,  3537,  1152,  1195,   nil,   nil,   nil,   250,   nil,
  1004,  1890,  1160, 16465,   nil, 15582,   nil,   nil,  1180,  1243,
 16327,   nil,   nil,   740,   nil,  1171,   357,  1227,  1212,   nil,
   nil,   276,   nil,  1327,   nil,   nil,   nil,   nil,  1334,   nil,
    17,  1222,    61,    57,   151,   147, 16069,   263,  1009,   nil,
    50,  2390,   185,   nil,   nil,   225,  4162, 14574,   268, 22086,
   nil,   nil,   nil,   nil,   nil,   nil,  3787,   nil,   nil,   nil,
   nil,   nil, 23140,   171, 10662, 23186, 10412,   nil,   nil, 23232,
   nil, 23278,   nil,   nil, 23324,   nil, 23370,   nil, 10287, 10162,
  9662,  6162,   184,  5912,   296,   320,   324,   nil,   347,   328,
  1019,   151,   nil,   454,  3026,  5787,   nil,   nil,   386,   432,
   537,   nil,  5662,   nil,   459,   164,   nil,   nil,   nil,  2515,
   nil,   nil,    -7, 15569,   nil,   nil,   525,   633,   527,   525,
   535,   nil,   nil,   537,   549,   nil,   555,   nil,   nil,   573,
   769,   571,   894,   nil,   699,   nil, 14686,   709,  3662,  1379,
   nil, 13428,  4662,    28,    54,   nil,   742,   nil,  4287,   nil,
   752,   652,   nil,   nil,   667,   651,   nil, 12920, 12295, 23462,
 14324,   nil, 12808,   nil,   nil,  1151,   nil,   727,   709,   nil,
   nil,   nil, 12170,   nil,   732,   718,   nil,   724,   nil,   nil,
   nil,   725,   nil,   879,  1010,  1119,   822,  1132,   nil,   nil,
   nil,   nil, 12183,   nil,   nil,  1055,   nil,  1026,   nil,   930,
   nil,   nil,   nil,   365,   426,   786,   nil,    -8,   nil,   916,
   926,   nil,   231,   nil,   nil,   930,   nil,   nil,  2857,   nil,
   831,   834,   836,   843,   nil,   844,   nil,   614,  1134,   935,
   nil,   nil, 11920,   nil,   nil, 11795,   990, 11670, 22926, 22986,
   -31,   891,   899,   902,   903,   911,   626,   931,   990,  2765,
   nil,   nil,   nil,   nil,   nil,  2015,   nil,  1254,  1471,   nil,
   nil,   805,   nil,   776,   nil,   nil,   nil, 23046,   nil,   978,
   nil,   989,    16,   -10,    47,  1379,   nil,   682,   nil,   nil,
   nil,   865,  1008,    20,  1231,  1341,   998,   993,   935,   921,
   511,   384,   nil,    32,   225,   883,   nil,   nil,   nil,   nil,
   901,   nil,   nil,   nil,   nil,   975,   nil ]

racc_action_default = [
    -3,  -552,    -1,  -538,    -4,  -552,    -7,  -552,  -552,  -552,
  -552,  -552,  -552,  -552,  -552,  -280,   -39,   -40,  -540,  -552,
   -45,   -47,   -48,   -49,  -255,  -255,  -255,  -290,  -325,  -326,
   -65,   -11,   -69,   -77,   -79,  -552,  -467,  -552,  -552,  -552,
  -552,  -552,  -540,  -232,  -273,  -274,  -275,  -276,  -277,  -278,
  -279,  -528,   -11,  -552,  -551,  -520,  -298,  -380,  -552,  -552,
  -303,  -306,  -538,  -552,  -552,  -552,  -552,  -327,  -328,  -416,
  -417,  -418,  -419,  -420,  -435,  -423,  -424,  -437,  -439,  -428,
  -433,  -449,  -437,  -451,  -452,  -526,  -456,  -457,  -527,  -459,
  -460,  -461,  -462,  -463,  -464,  -465,  -466,  -469,  -470,  -552,
    -2,  -539,  -547,  -548,  -549,    -6,  -552,  -552,  -552,  -552,
  -552,    -3,   -15,  -552,  -106,  -107,  -108,  -109,  -110,  -111,
  -112,  -113,  -114,  -118,  -119,  -120,  -121,  -122,  -123,  -124,
  -125,  -126,  -127,  -128,  -129,  -130,  -131,  -132,  -133,  -134,
  -135,  -136,  -137,  -138,  -139,  -140,  -141,  -142,  -143,  -144,
  -145,  -146,  -147,  -148,  -149,  -150,  -151,  -152,  -153,  -154,
  -155,  -156,  -157,  -158,  -159,  -160,  -161,  -162,  -163,  -164,
  -165,  -166,  -167,  -168,  -169,  -170,  -171,  -172,  -173,  -174,
  -175,  -176,  -177,  -178,  -179,  -180,  -181,  -182,  -183,  -184,
  -185,  -186,  -187,   -20,  -115,   -11,  -552,  -552,  -552,  -241,
  -552,  -552,  -552,  -552,  -552,  -552,  -540,  -541,   -44,  -552,
  -467,  -552,  -280,  -552,  -552,  -224,  -552,   -11,  -552,  -552,
  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
  -552,  -552,  -552,  -552,  -552,  -386,  -388,  -552,  -552,   -54,
  -241,  -552,  -297,  -391,  -400,  -402,   -60,  -397,   -61,  -540,
   -62,  -233,  -243,  -265,  -265,  -248,  -552,  -266,  -552,  -522,
  -552,   -63,   -64,  -538,   -12,  -552,   -67,   -11,  -540,  -552,
   -70,   -73,   -11,   -85,  -552,  -552,   -92,  -290,  -293,  -540,
  -552,  -325,  -326,  -329,  -398,  -552,   -75,  -552,   -81,  -287,
  -453,  -454,  -552,  -209,  -210,  -225,  -552,  -408,  -552,  -283,
  -234,  -544,  -544,  -552,  -552,  -544,  -552,  -299,  -300,  -490,
   -46,  -552,  -552,  -552,  -552,  -538,  -552,  -539,  -467,  -552,
  -552,  -280,  -552,  -339,  -340,  -101,  -102,  -552,  -104,  -552,
  -280,  -552,  -552,  -467,  -318,  -106,  -107,  -147,  -148,  -149,
  -165,  -170,  -177,  -180,  -320,  -552,  -518,  -552,  -421,  -552,
  -552,  -552,  -552,  -552,  -552,   967,    -5,  -550,   -21,   -22,
   -23,   -24,   -25,  -552,  -552,   -17,   -18,   -19,  -116,  -552,
   -27,   -36,  -188,  -266,  -552,  -552,   -28,   -37,   -38,   -29,
  -190,  -540,  -242,  -529,  -530,  -255,  -395,  -531,  -532,  -530,
  -529,  -255,  -394,  -396,  -531,  -532,   -35,  -198,   -41,   -42,
   -43,  -540,  -296,  -552,  -552,  -552,  -241,  -287,  -552,  -552,
  -552,  -199,  -200,  -201,  -202,  -203,  -204,  -205,  -206,  -211,
  -212,  -213,  -214,  -215,  -216,  -217,  -218,  -219,  -220,  -221,
  -222,  -223,  -226,  -227,  -228,  -229,  -540,  -369,  -255,  -529,
  -530,  -255,   -52,   -55,  -540,  -256,  -257,  -258,  -369,  -369,
  -540,  -292,  -244,  -264,  -245,  -264,  -262,  -552,  -267,  -525,
   -10,  -539,   -14,  -540,   -66,  -285,   -82,   -71,  -552,  -540,
  -241,  -552,  -552,   -91,  -552,  -453,  -454,  -552,   -78,   -83,
  -552,  -552,  -552,  -552,  -552,  -230,  -552,  -551,  -551,  -282,
  -540,  -235,  -546,  -545,  -237,  -546,  -288,  -289,  -521,  -552,
  -490,  -383,  -517,  -517,  -517,  -489,  -491,  -492,  -493,  -494,
  -495,  -496,  -552,  -499,  -552,  -501,  -507,  -509,  -510,  -512,
  -513,  -514,  -552,   -11,  -330,  -331,   -11,  -552,  -552,  -552,
  -552,  -552,  -241,  -552,  -552,  -287,  -311,  -101,  -102,  -103,
  -552,  -552,  -241,  -314,  -471,  -552,  -552,  -552,   -11,  -490,
  -322,  -536,  -537,  -540,  -422,  -436,  -441,  -552,  -443,  -425,
  -438,  -552,  -440,  -427,  -552,  -430,  -432,  -552,  -450,    -8,
   -16,  -552,   -26,  -552,  -272,  -552,  -552,  -399,  -552,  -552,
  -552,   -56,  -240,  -392,  -552,  -552,   -58,  -393,  -295,  -542,
  -529,  -530,  -529,  -530,  -540,  -188,  -552,  -370,  -374,  -372,
   -11,   -50,  -389,   -51,  -390,  -369,  -238,   -45,  -552,  -265,
  -254,  -540,  -260,   -11,   -11,  -291,  -265,  -263,  -268,  -552,
  -523,  -524,   -13,   -68,  -552,   -74,   -80,  -540,  -529,  -530,
  -239,   -88,   -90,  -552,   -76,  -552,  -197,  -207,  -208,  -540,
  -551,  -337,   -11,  -409,  -551,  -410,  -411,  -284,  -544,  -381,
   -11,   -11,  -374,  -552,  -482,  -552,  -485,  -487,  -552,  -552,
  -552,  -498,  -341,  -552,  -343,  -345,  -352,  -496,  -540,  -511,
  -515,  -551,  -332,  -551,  -304,  -333,  -334,  -307,  -552,  -310,
  -552,  -540,  -529,  -530,  -533,  -286,  -552,  -101,  -102,  -105,
  -540,   -11,  -552,  -473,  -316,  -552,   -11,  -490,  -552,  -552,
  -519,  -442,  -445,  -446,  -447,  -448,   -11,  -426,  -429,  -431,
  -434,  -117,  -189,  -270,  -552,  -191,  -552,  -543,   -31,  -193,
   -32,  -194,   -57,   -33,  -196,   -34,  -195,   -59,  -552,  -552,
  -552,  -552,  -399,  -552,  -517,  -517,  -517,  -368,  -552,  -374,
  -552,  -496,  -505,  -552,   -11,  -552,  -251,  -259,  -540,  -552,
  -552,  -246,  -264,  -269,   -72,   -86,   -84,  -294,    -9,   -11,
  -415,  -338,  -552,  -552,  -413,  -236,  -552,  -552,  -540,  -517,
  -517,  -502,  -516,  -517,  -517,  -508,  -517,  -497,  -503,  -540,
  -552,  -350,  -552,  -500,  -552,  -335,  -552,  -552,   -11,   -11,
  -309,  -552,   -11,  -399,  -552,  -399,  -552,  -472,   -11,  -319,
  -552,  -540,  -475,  -323,  -552,  -271,   -30,  -192,  -552,  -231,
  -359,  -361,  -552,  -364,  -366,  -552,  -371,  -552,  -375,  -376,
  -378,  -379,  -552,  -387,  -552,  -265,  -250,  -265,  -261,  -401,
  -403,  -265,  -414,   -11,   -93,  -552,  -552,  -100,  -412,  -384,
  -385,  -382,  -552,  -478,  -480,  -552,  -483,  -552,  -486,  -552,
  -488,  -342,  -344,  -348,  -552,  -353,  -301,  -552,  -302,  -552,
  -552,  -268,  -551,  -312,  -315,  -552,  -321,  -474,  -490,  -444,
  -517,  -517,  -517,  -517,  -506,  -517,  -373,  -552,  -504,  -552,
   -53,  -249,  -264,  -252,  -247,  -264,  -408,  -241,  -552,  -552,
   -99,  -517,  -517,  -517,  -517,  -346,  -552,  -351,  -552,   -11,
  -305,  -308,  -404,  -405,  -406,   -11,  -317,   -11,  -552,  -356,
  -358,  -552,  -362,  -552,  -365,  -367,  -377,  -552,  -287,  -265,
  -407,  -540,  -529,  -530,  -533,   -98,  -476,  -552,  -479,  -481,
  -484,  -552,  -349,  -551,  -552,  -552,  -517,  -517,  -517,  -517,
  -286,  -533,  -253,  -399,  -517,  -347,  -336,  -313,  -324,  -354,
  -552,  -357,  -360,  -363,  -477,  -517,  -355 ]

clist = [
'117,117,308,354,205,312,315,24,208,497,310,311,24,650,293,293,391,462',
'464,15,253,257,104,706,15,540,24,587,306,262,262,262,395,401,24,24,24',
'511,24,280,112,194,533,536,488,293,293,293,515,794,15,286,286,321,322',
'296,101,325,117,24,24,122,122,276,278,24,24,454,309,24,453,15,549,320',
'320,120,120,320,781,448,451,104,331,340,340,684,687,6,630,620,501,504',
'6,100,508,627,745,627,862,672,785,368,369,370,371,678,744,831,24,324',
'746,381,388,24,24,24,24,24,24,748,15,320,320,320,320,829,2,884,630,15',
'15,565,768,572,575,105,249,256,258,610,612,193,360,614,260,271,272,364',
'341,344,623,624,326,385,385,334,374,865,615,581,313,622,455,784,621',
'780,786,783,758,356,314,317,318,778,332,553,355,560,500,323,798,1,799',
'696,915,380,386,389,6,701,808,406,558,405,559,709,396,372,6,797,878',
'262,24,24,24,24,24,749,828,24,24,24,24,24,15,509,862,659,408,409,410',
'411,319,884,24,635,246,447,662,907,458,366,459,604,644,781,15,373,688',
'515,742,912,654,772,831,358,395,401,672,359,361,791,262,262,789,362',
'574,24,24,363,827,262,926,293,711,716,24,779,,,,942,,765,781,484,,,',
'293,,,24,,24,699,253,785,515,24,257,,104,,15,,15,637,,,286,15,,477,489',
',955,754,880,276,473,956,,640,276,479,286,,537,538,883,,881,885,882',
'640,471,803,,,24,24,,,,,805,747,320,320,,,917,,104,,719,,,24,902,13',
'873,903,901,904,13,557,,691,554,,472,470,24,672,117,672,456,700,,,563',
'756,,640,460,588,,,761,764,13,640,,630,,836,913,,,592,,,627,,,597,,',
',,,13,,,580,405,619,,396,802,732,655,626,539,947,737,262,948,946,949',
',24,,811,,122,,,,,606,,,954,515,775,905,672,,120,,,592,,,592,,,,,13',
'658,656,385,,,965,,293,13,13,,24,,,,,293,,11,309,,405,,11,396,24,,,672',
'262,672,,489,405,24,,396,15,,,843,489,,,286,690,,,,11,24,,,286,591,705',
',,649,,596,279,,672,,,,,,,11,627,,,627,,,,,,,333,,405,,,396,24,,405',
'24,262,,13,396,,24,702,,15,,262,15,685,685,632,24,611,,24,613,,24,,953',
'13,,320,914,11,117,,703,704,15,728,730,,11,11,733,735,,715,,909,891',
'588,893,,,,894,24,24,930,,,24,24,,,,770,515,,,774,,,721,,,293,24,,,',
',,588,,,13,293,13,15,24,24,,13,122,,592,,,597,,489,15,15,,,813,,120',
',,806,766,286,,,810,,,24,,,,,286,,11,24,24,,,15,,,,,,588,379,15,15,',
',952,,,588,,11,,,804,,,,,,,,,279,117,,24,,,837,,24,,,320,835,24,931',
'816,,,,841,15,807,,24,,15,,812,,,640,,,24,,15,,,,,,,,,,,11,,11,,,,,11',
',293,,,875,,279,24,,,,279,,14,,,,,14,15,,,24,,,,,,,,,,209,,15,,,867',
'847,,209,209,209,,14,284,284,,,24,,24,24,,,24,,320,,,293,24,,15,15,14',
'209,15,13,685,,209,209,15,,209,329,339,339,,,,,,,,,,,929,,,,,,,24,340',
',,,,,,,,,,15,,,,,945,14,,,,,209,209,209,209,14,14,,,36,,,13,,36,13,',
',,405,,,396,,,,,262,,,,,24,,,,,13,,,36,283,283,,24,588,,405,,,24,,24',
',,,15,,,,,36,15,,15,,,,,,11,,328,343,343,343,,,,,,,,,,,,,,13,14,209',
'209,209,209,,,209,209,209,209,209,13,13,,,,,,,36,,14,,,,,,,36,36,,,',
',,,,,,,13,11,,,11,,,,13,13,,,,681,209,209,683,,,,,,,209,,,11,,,,,,,',
',,,,,14,,14,,,,284,14,,,13,,,,,13,,,,,,,284,,,13,,,,,,,,,36,,,,,11,',
',,,,,,,209,209,,753,11,11,,,36,,,,,,,13,759,760,,209,,,,,,,,,,,13,,',
'11,209,,,,,,,11,11,,,771,,,,,,,,776,777,,,,,13,13,,,13,,,36,,36,13,',
',283,36,,,,,,,,,11,,,,,11,283,,,,,209,,,,11,,,,,,,13,,,,,814,,,,,,316',
',,,,,,,,,,,,,,,,,,209,11,,,,,,,,,,,,834,14,,11,,,,848,284,,209,,,,,842',
',284,412,,,,,13,,,209,,,13,,13,11,11,,,11,,,,,,11,,869,870,,,872,,,',
',,,,,,,,,,,14,,,14,,,,,461,209,,,,,11,,,,,209,,,209,,,14,896,474,,,',
',,,,,,,,,,,,,,,383,387,,,,,36,,,,209,209,,283,,209,209,,,,,,283,,,,',
',,,,14,,,11,,,,,,11,,11,,14,14,943,,,,,,944,,,284,,,,,,,,,,,284,,36',
',466,36,468,14,469,,,,,,,14,14,,,,,,,,,,,36,,,,,,,,,,,,,,,,,,,,,598',
',,209,,,,,14,,,,,14,,,,,,,,,,14,,,,,,,,36,,209,,,,,,,,,,616,36,36,,',
',625,,,,,,283,,,,,,14,633,,,,283,,636,,,,,36,584,,14,215,,,845,36,36',
',,261,261,261,,657,,,,,,,,303,304,305,,,,209,,14,14,,,14,,,261,261,',
'14,,664,666,667,,,36,,,,,36,,,,,,,,,,36,,888,,,,,,,,618,,,14,,710,628',
',316,,631,,,,,,,,,,,,,,,,,,36,,,,,,,,,,,,,653,,36,,628,,844,316,,,,',
',,,,209,,,,,,757,,,,,,14,,,36,36,,14,36,14,,,,,36,,383,,,,,,,767,,,',
',,,,,,,,,,,343,382,261,390,261,,,407,,,,36,,,793,,,,,,,215,723,,421',
'422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438',
'439,440,441,442,443,444,445,446,,,,,,261,261,,,,,,,,261,,763,,,,,261',
',261,,261,,36,,,,,,36,,36,,,,,,,,,838,,821,823,824,,,,,,,,,788,,,,495',
',,851,,,,,,,,,,,861,,,,,,853,854,,,856,858,,860,,,,,,,,,877,,,,,,,,',
',,,,,815,,,,,,,,,,,,,,,,,,,,,,,,,,,,261,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,261,,407,605,390,,,,,,,919,920,922,924,,925,871,,,,,,,,,,,,,,,936',
'938,939,940,,,,,,617,,,,,,261,,261,,261,,,,,,,,,,,,,261,,,,,,,,,,646',
'647,648,959,961,962,963,,261,,,964,261,,,261,,,,,,,966,,,,,,,,,,,,628',
',,871,,,,,,,,,,,,,,261,261,,,,,,,,,,261,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,722,,261,725,,,729,731,,,,734,736,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',261,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,261,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,261,,817,,,,,,,,,,,,729,731,736,734',
',819,,,,,,,,,,,,261,,,,,,,261,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'261,,,,,,,,,,,,,,,,,817,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,261,,,261,,261' ]
        racc_goto_table = arr = ::Array.new(2416, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'52,52,8,51,29,63,63,39,18,10,60,61,39,11,58,58,22,66,66,24,64,64,90',
'91,24,87,39,23,29,31,31,31,34,34,39,39,39,125,39,45,14,14,84,84,47,58',
'58,58,116,85,24,24,24,16,16,46,6,16,52,39,39,56,56,41,42,39,39,22,27',
'39,36,24,49,27,27,55,55,27,147,34,34,90,24,24,24,86,86,7,152,67,62,62',
'7,4,62,67,113,67,107,108,148,16,16,16,16,109,112,121,39,97,114,25,25',
'39,39,39,39,39,39,118,24,27,27,27,27,120,2,149,152,24,24,142,12,142',
'142,5,35,35,35,37,65,15,138,65,40,40,40,138,50,50,37,37,4,61,61,19,28',
'110,38,57,59,68,69,112,71,114,112,114,72,79,80,81,83,118,88,89,92,93',
'94,95,96,1,98,99,100,18,18,18,7,101,102,18,103,52,104,105,64,7,7,11',
'106,31,39,39,39,39,39,111,119,39,39,39,39,39,24,122,107,123,27,27,27',
'27,124,149,39,47,126,127,125,110,129,5,130,22,47,147,24,2,87,116,23',
'131,132,133,121,136,34,34,108,137,139,108,31,31,109,140,141,39,39,143',
'118,31,120,58,144,145,39,146,,,,110,,23,147,29,,,,58,,,39,,39,49,64',
'148,116,39,64,,90,,24,,24,22,,,24,24,,46,45,,110,37,113,41,42,85,,34',
'41,42,24,,16,16,112,,114,112,114,34,6,23,,,39,39,,,,,23,116,27,27,,',
'91,,90,,142,,,39,112,20,86,112,114,112,20,27,,22,90,,7,4,39,108,52,108',
'40,22,,,27,66,,34,40,29,,,66,47,20,34,,152,,67,11,,,64,,,67,,,64,,,',
',,20,,,14,52,63,,64,84,36,25,63,4,112,36,31,112,114,112,,39,,125,,56',
',,,,29,,,112,116,62,108,108,,55,,,64,,,64,,,,,20,63,60,61,,,112,,58',
'20,20,,39,,,,,58,,17,27,,52,,17,64,39,,,108,31,108,,45,52,39,,64,24',
',,84,45,,,24,61,,,,17,39,,,24,35,8,,,27,,35,9,,108,,,,,,,17,67,,,67',
',,,,,,17,,52,,,64,39,,52,39,31,,20,64,,39,16,,24,,31,24,90,90,7,39,35',
',39,35,,39,,23,20,,27,87,17,52,,90,90,24,18,18,,17,17,18,18,,24,,84',
'66,29,66,,,,66,39,39,10,,,39,39,,,,60,116,,,60,,,14,,,58,39,,,,,,29',
',,20,58,20,24,39,39,,20,56,,64,,,64,,45,24,24,,,51,,55,,,8,45,24,,,8',
',,39,,,,,24,,17,39,39,,,24,,,,,,29,9,24,24,,,66,,,29,,17,,,16,,,,,,',
',,9,52,,39,,,63,,39,,,27,61,39,22,18,,,,61,24,90,,39,,24,,90,,,34,,',
'39,,24,,,,,,,,,,,17,,17,,,,,17,,58,,,8,,9,39,,,,9,,21,,,,,21,24,,,39',
',,,,,,,,,21,,24,,,16,24,,21,21,21,,21,21,21,,,39,,39,39,,,39,,27,,,58',
'39,,24,24,21,21,24,20,90,,21,21,24,,21,21,21,21,,,,,,,,,,,63,,,,,,,39',
'24,,,,,,,,,,,24,,,,,8,21,,,,,21,21,21,21,21,21,,,48,,,20,,48,20,,,,52',
',,64,,,,,31,,,,,39,,,,,20,,,48,48,48,,39,29,,52,,,39,,39,,,,24,,,,,48',
'24,,24,,,,,,17,,48,48,48,48,,,,,,,,,,,,,,20,21,21,21,21,21,,,21,21,21',
'21,21,20,20,,,,,,,48,,21,,,,,,,48,48,,,,,,,,,,,20,17,,,17,,,,20,20,',
',,9,21,21,9,,,,,,,21,,,17,,,,,,,,,,,,,21,,21,,,,21,21,,,20,,,,,20,,',
',,,,21,,,20,,,,,,,,,48,,,,,17,,,,,,,,,21,21,,9,17,17,,,48,,,,,,,20,9',
'9,,21,,,,,,,,,,,20,,,17,21,,,,,,,17,17,,,9,,,,,,,,9,9,,,,,20,20,,,20',
',,48,,48,20,,,48,48,,,,,,,,,17,,,,,17,48,,,,,21,,,,17,,,,,,,20,,,,,9',
',,,,,26,,,,,,,,,,,,,,,,,,,21,17,,,,,,,,,,,,9,21,,17,,,,17,21,,21,,,',
',9,,21,43,,,,,20,,,21,,,20,,20,17,17,,,17,,,,,,17,,9,9,,,9,,,,,,,,,',
',,,,,21,,,21,,,,,43,21,,,,,17,,,,,21,,,21,,,21,9,43,,,,,,,,,,,,,,,,',
',,26,26,,,,,48,,,,21,21,,48,,21,21,,,,,,48,,,,,,,,,21,,,17,,,,,,17,',
'17,,21,21,9,,,,,,9,,,21,,,,,,,,,,,21,,48,,26,48,26,21,26,,,,,,,21,21',
',,,,,,,,,,48,,,,,,,,,,,,,,,,,,,,,43,,,21,,,,,21,,,,,21,,,,,,,,,,21,',
',,,,,,48,,21,,,,,,,,,,43,48,48,,,,43,,,,,,48,,,,,,21,43,,,,48,,43,,',
',,48,26,,21,30,,,21,48,48,,,30,30,30,,43,,,,,,,,30,30,30,,,,21,,21,21',
',,21,,,30,30,,21,,115,115,115,,,48,,,,,48,,,,,,,,,,48,,21,,,,,,,,26',
',,21,,43,26,,26,,26,,,,,,,,,,,,,,,,,,48,,,,,,,,,,,,,26,,48,,26,,48,26',
',,,,,,,,21,,,,,,43,,,,,,21,,,48,48,,21,48,21,,,,,48,,26,,,,,,,43,,,',
',,,,,,,,,,,48,30,30,30,30,,,30,,,,48,,,43,,,,,,,30,26,,30,30,30,30,30',
'30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,,,,,',
'30,30,,,,,,,,30,,26,,,,,30,,30,,30,,48,,,,,,48,,48,,,,,,,,,43,,115,115',
'115,,,,,,,,,26,,,,30,,,43,,,,,,,,,,,43,,,,,,115,115,,,115,115,,115,',
',,,,,,,43,,,,,,,,,,,,,,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,30,,30,30,30,,,,,,,115,115,115,115,,115,26,,,,,,',
',,,,,,,,115,115,115,115,,,,,,30,,,,,,30,,30,,30,,,,,,,,,,,,,30,,,,,',
',,,,30,30,30,115,115,115,115,,30,,,115,30,,,30,,,,,,,115,,,,,,,,,,,',
'26,,,26,,,,,,,,,,,,,,30,30,,,,,,,,,,30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',30,,30,30,,,30,30,,,,30,30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,30,,30,,,,,,,,,,,,30,30,30,30,,30,,,,,,,,,,',
',30,,,,,,,30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,,,,,,,,,,,,,,',
',,30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,30,,,30,,30' ]
        racc_goto_check = arr = ::Array.new(2416, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   181,   126,   nil,    90,   130,    53,    87,   -50,   483,
  -298,  -484,  -518,   nil,    32,   132,    -5,   471,   -11,    92,
   351,   767,  -183,  -364,    19,   -85,  1150,    15,    44,   -14,
  1518,     2,   nil,   nil,  -168,   112,  -179,  -308,  -294,     7,
   117,    32,    33,  1049,   nil,     7,    22,  -253,   881,  -265,
    84,   -63,    -8,   nil,   nil,    67,    53,  -219,   -18,   106,
   -44,   -43,  -221,   -49,    -4,  -308,  -246,  -368,  -296,   -89,
   nil,  -293,  -454,   nil,   nil,   nil,   nil,   nil,   nil,   103,
   115,   115,   nil,   115,  -279,  -632,  -452,  -301,   111,  -166,
    19,  -536,   110,  -178,  -131,   119,  -504,    48,  -505,  -363,
  -689,  -364,  -514,  -152,  -160,  -365,  -613,  -692,  -425,  -419,
  -635,  -401,  -502,  -512,  -498,  1065,  -271,   nil,  -489,  -542,
  -625,  -643,  -104,  -292,   165,  -282,   205,   -18,   nil,   -24,
   -23,  -631,  -256,  -411,   nil,   nil,   173,   175,    65,   172,
   176,  -106,  -228,   179,  -303,  -303,  -396,  -585,  -565,  -695,
   nil,   nil,  -377 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   327,   274,   nil,   307,
   nil,   795,   nil,   273,   nil,   nil,   nil,   213,    17,    12,
   214,   302,   nil,   nil,   212,   nil,   267,    16,   nil,   413,
    20,    21,    22,    23,   643,   nil,   nil,   nil,   nil,   290,
   392,    30,   nil,   nil,    32,    35,    34,   nil,   210,   338,
   nil,   119,   398,   118,   121,    70,    71,   nil,    43,   nil,
   651,   263,   nil,   264,   403,   593,   nil,   265,   nil,   nil,
   251,   nil,   nil,    44,    45,    46,    47,    48,    49,    50,
   nil,   252,    56,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   534,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   674,   523,   nil,
   675,   nil,   512,   nil,   514,   nil,   782,   607,   nil,   nil,
   nil,   520,   nil,   nil,   nil,   708,   nil,   nil,   402,   nil,
   nil,   nil,   nil,   nil,    69,    72,    73,   nil,   nil,   nil,
   nil,   nil,   570,   nil,   nil,   nil,   513,   525,   526,   752,
   529,   532,   269 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 138, :_reduce_none,
  2, 139, :_reduce_2,
  0, 140, :_reduce_3,
  1, 140, :_reduce_4,
  3, 140, :_reduce_5,
  2, 140, :_reduce_6,
  1, 142, :_reduce_none,
  4, 142, :_reduce_8,
  4, 145, :_reduce_9,
  2, 146, :_reduce_10,
  0, 150, :_reduce_11,
  1, 150, :_reduce_12,
  3, 150, :_reduce_13,
  2, 150, :_reduce_14,
  0, 165, :_reduce_15,
  4, 144, :_reduce_16,
  3, 144, :_reduce_17,
  3, 144, :_reduce_18,
  3, 144, :_reduce_19,
  2, 144, :_reduce_20,
  3, 144, :_reduce_21,
  3, 144, :_reduce_22,
  3, 144, :_reduce_23,
  3, 144, :_reduce_24,
  3, 144, :_reduce_25,
  4, 144, :_reduce_26,
  3, 144, :_reduce_27,
  3, 144, :_reduce_28,
  3, 144, :_reduce_29,
  6, 144, :_reduce_30,
  5, 144, :_reduce_31,
  5, 144, :_reduce_32,
  5, 144, :_reduce_33,
  5, 144, :_reduce_34,
  3, 144, :_reduce_35,
  3, 144, :_reduce_36,
  3, 144, :_reduce_37,
  3, 144, :_reduce_38,
  1, 144, :_reduce_none,
  1, 164, :_reduce_none,
  3, 164, :_reduce_41,
  3, 164, :_reduce_42,
  3, 164, :_reduce_43,
  2, 164, :_reduce_44,
  1, 164, :_reduce_none,
  1, 153, :_reduce_none,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  1, 169, :_reduce_none,
  4, 169, :_reduce_50,
  4, 169, :_reduce_51,
  0, 175, :_reduce_52,
  5, 173, :_reduce_53,
  2, 168, :_reduce_54,
  3, 168, :_reduce_55,
  4, 168, :_reduce_56,
  5, 168, :_reduce_57,
  4, 168, :_reduce_58,
  5, 168, :_reduce_59,
  2, 168, :_reduce_60,
  2, 168, :_reduce_61,
  2, 168, :_reduce_62,
  2, 168, :_reduce_63,
  2, 168, :_reduce_64,
  1, 156, :_reduce_65,
  3, 156, :_reduce_66,
  1, 179, :_reduce_67,
  3, 179, :_reduce_68,
  1, 178, :_reduce_none,
  2, 178, :_reduce_70,
  3, 178, :_reduce_71,
  5, 178, :_reduce_72,
  2, 178, :_reduce_73,
  4, 178, :_reduce_74,
  2, 178, :_reduce_75,
  4, 178, :_reduce_76,
  1, 178, :_reduce_77,
  3, 178, :_reduce_78,
  1, 182, :_reduce_none,
  3, 182, :_reduce_80,
  2, 181, :_reduce_81,
  3, 181, :_reduce_82,
  1, 184, :_reduce_83,
  3, 184, :_reduce_84,
  1, 183, :_reduce_85,
  4, 183, :_reduce_86,
  3, 183, :_reduce_87,
  3, 183, :_reduce_88,
  3, 183, :_reduce_89,
  3, 183, :_reduce_90,
  2, 183, :_reduce_91,
  1, 183, :_reduce_92,
  1, 154, :_reduce_93,
  4, 154, :_reduce_94,
  3, 154, :_reduce_95,
  3, 154, :_reduce_96,
  3, 154, :_reduce_97,
  3, 154, :_reduce_98,
  2, 154, :_reduce_99,
  1, 154, :_reduce_100,
  1, 186, :_reduce_101,
  1, 186, :_reduce_none,
  2, 187, :_reduce_103,
  1, 187, :_reduce_104,
  3, 187, :_reduce_105,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 191, :_reduce_111,
  1, 191, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 152, :_reduce_115,
  0, 194, :_reduce_116,
  4, 152, :_reduce_117,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  3, 167, :_reduce_188,
  5, 167, :_reduce_189,
  3, 167, :_reduce_190,
  5, 167, :_reduce_191,
  6, 167, :_reduce_192,
  5, 167, :_reduce_193,
  5, 167, :_reduce_194,
  5, 167, :_reduce_195,
  5, 167, :_reduce_196,
  4, 167, :_reduce_197,
  3, 167, :_reduce_198,
  3, 167, :_reduce_199,
  3, 167, :_reduce_200,
  3, 167, :_reduce_201,
  3, 167, :_reduce_202,
  3, 167, :_reduce_203,
  3, 167, :_reduce_204,
  3, 167, :_reduce_205,
  3, 167, :_reduce_206,
  4, 167, :_reduce_207,
  4, 167, :_reduce_208,
  2, 167, :_reduce_209,
  2, 167, :_reduce_210,
  3, 167, :_reduce_211,
  3, 167, :_reduce_212,
  3, 167, :_reduce_213,
  3, 167, :_reduce_214,
  3, 167, :_reduce_215,
  3, 167, :_reduce_216,
  3, 167, :_reduce_217,
  3, 167, :_reduce_218,
  3, 167, :_reduce_219,
  3, 167, :_reduce_220,
  3, 167, :_reduce_221,
  3, 167, :_reduce_222,
  3, 167, :_reduce_223,
  2, 167, :_reduce_224,
  2, 167, :_reduce_225,
  3, 167, :_reduce_226,
  3, 167, :_reduce_227,
  3, 167, :_reduce_228,
  3, 167, :_reduce_229,
  3, 167, :_reduce_230,
  6, 167, :_reduce_231,
  1, 167, :_reduce_none,
  1, 163, :_reduce_none,
  1, 196, :_reduce_none,
  2, 196, :_reduce_none,
  4, 196, :_reduce_236,
  2, 196, :_reduce_237,
  3, 201, :_reduce_238,
  0, 202, :_reduce_239,
  1, 202, :_reduce_none,
  0, 159, :_reduce_241,
  1, 159, :_reduce_none,
  1, 177, :_reduce_243,
  2, 177, :_reduce_244,
  2, 177, :_reduce_245,
  4, 177, :_reduce_246,
  6, 177, :_reduce_247,
  1, 177, :_reduce_248,
  4, 205, :_reduce_249,
  3, 205, :_reduce_250,
  2, 205, :_reduce_251,
  4, 205, :_reduce_252,
  6, 205, :_reduce_253,
  1, 205, :_reduce_254,
  0, 207, :_reduce_255,
  2, 172, :_reduce_256,
  1, 206, :_reduce_257,
  0, 208, :_reduce_258,
  3, 206, :_reduce_259,
  0, 209, :_reduce_260,
  4, 206, :_reduce_261,
  2, 204, :_reduce_262,
  2, 203, :_reduce_263,
  1, 203, :_reduce_264,
  0, 203, :_reduce_265,
  1, 198, :_reduce_266,
  2, 198, :_reduce_267,
  3, 198, :_reduce_268,
  4, 198, :_reduce_269,
  3, 162, :_reduce_270,
  4, 162, :_reduce_271,
  2, 162, :_reduce_272,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_281,
  3, 195, :_reduce_282,
  0, 231, :_reduce_283,
  4, 195, :_reduce_284,
  3, 195, :_reduce_285,
  3, 195, :_reduce_286,
  2, 195, :_reduce_287,
  3, 195, :_reduce_288,
  3, 195, :_reduce_289,
  1, 195, :_reduce_290,
  4, 195, :_reduce_291,
  3, 195, :_reduce_292,
  1, 195, :_reduce_293,
  5, 195, :_reduce_294,
  4, 195, :_reduce_295,
  3, 195, :_reduce_296,
  2, 195, :_reduce_297,
  1, 195, :_reduce_none,
  2, 195, :_reduce_299,
  2, 195, :_reduce_300,
  6, 195, :_reduce_301,
  6, 195, :_reduce_302,
  0, 232, :_reduce_303,
  0, 233, :_reduce_304,
  7, 195, :_reduce_305,
  0, 234, :_reduce_306,
  0, 235, :_reduce_307,
  7, 195, :_reduce_308,
  5, 195, :_reduce_309,
  4, 195, :_reduce_310,
  0, 236, :_reduce_311,
  0, 237, :_reduce_312,
  9, 195, :_reduce_313,
  0, 238, :_reduce_314,
  6, 195, :_reduce_315,
  0, 239, :_reduce_316,
  7, 195, :_reduce_317,
  0, 240, :_reduce_318,
  5, 195, :_reduce_319,
  0, 241, :_reduce_320,
  6, 195, :_reduce_321,
  0, 242, :_reduce_322,
  0, 243, :_reduce_323,
  9, 195, :_reduce_324,
  1, 195, :_reduce_325,
  1, 195, :_reduce_326,
  1, 195, :_reduce_327,
  1, 195, :_reduce_328,
  1, 158, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  2, 221, :_reduce_332,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 222, :_reduce_none,
  5, 222, :_reduce_336,
  1, 148, :_reduce_none,
  2, 148, :_reduce_338,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 244, :_reduce_none,
  3, 244, :_reduce_342,
  1, 247, :_reduce_343,
  3, 247, :_reduce_344,
  1, 246, :_reduce_none,
  4, 246, :_reduce_346,
  6, 246, :_reduce_347,
  3, 246, :_reduce_348,
  5, 246, :_reduce_349,
  2, 246, :_reduce_350,
  4, 246, :_reduce_351,
  1, 246, :_reduce_352,
  3, 246, :_reduce_353,
  6, 248, :_reduce_354,
  8, 248, :_reduce_355,
  4, 248, :_reduce_356,
  6, 248, :_reduce_357,
  4, 248, :_reduce_358,
  2, 248, :_reduce_none,
  6, 248, :_reduce_360,
  2, 248, :_reduce_361,
  4, 248, :_reduce_362,
  6, 248, :_reduce_363,
  2, 248, :_reduce_364,
  4, 248, :_reduce_365,
  2, 248, :_reduce_366,
  4, 248, :_reduce_367,
  1, 248, :_reduce_368,
  0, 174, :_reduce_369,
  1, 174, :_reduce_370,
  3, 254, :_reduce_371,
  1, 254, :_reduce_372,
  4, 254, :_reduce_373,
  0, 255, :_reduce_374,
  2, 255, :_reduce_375,
  1, 256, :_reduce_376,
  3, 256, :_reduce_377,
  1, 257, :_reduce_378,
  1, 257, :_reduce_none,
  0, 261, :_reduce_380,
  3, 220, :_reduce_381,
  4, 259, :_reduce_382,
  1, 259, :_reduce_383,
  3, 260, :_reduce_384,
  3, 260, :_reduce_385,
  0, 264, :_reduce_386,
  5, 263, :_reduce_387,
  2, 170, :_reduce_388,
  4, 170, :_reduce_389,
  4, 170, :_reduce_390,
  2, 219, :_reduce_391,
  4, 219, :_reduce_392,
  4, 219, :_reduce_393,
  3, 219, :_reduce_394,
  3, 219, :_reduce_395,
  3, 219, :_reduce_396,
  2, 219, :_reduce_397,
  1, 219, :_reduce_398,
  4, 219, :_reduce_399,
  0, 266, :_reduce_400,
  5, 218, :_reduce_401,
  0, 267, :_reduce_402,
  5, 218, :_reduce_403,
  5, 224, :_reduce_404,
  1, 268, :_reduce_405,
  1, 268, :_reduce_none,
  6, 147, :_reduce_407,
  0, 147, :_reduce_408,
  1, 269, :_reduce_409,
  1, 269, :_reduce_none,
  1, 269, :_reduce_none,
  2, 270, :_reduce_412,
  1, 270, :_reduce_none,
  2, 149, :_reduce_414,
  1, 149, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 211, :_reduce_419,
  1, 272, :_reduce_420,
  2, 272, :_reduce_421,
  3, 273, :_reduce_422,
  1, 273, :_reduce_423,
  1, 273, :_reduce_424,
  3, 212, :_reduce_425,
  4, 213, :_reduce_426,
  3, 214, :_reduce_427,
  0, 277, :_reduce_428,
  3, 277, :_reduce_429,
  1, 278, :_reduce_430,
  2, 278, :_reduce_431,
  3, 215, :_reduce_432,
  0, 280, :_reduce_433,
  3, 280, :_reduce_434,
  0, 274, :_reduce_435,
  2, 274, :_reduce_436,
  0, 275, :_reduce_437,
  2, 275, :_reduce_438,
  0, 276, :_reduce_439,
  2, 276, :_reduce_440,
  1, 279, :_reduce_441,
  2, 279, :_reduce_442,
  0, 282, :_reduce_443,
  4, 279, :_reduce_444,
  1, 281, :_reduce_445,
  1, 281, :_reduce_446,
  1, 281, :_reduce_447,
  1, 281, :_reduce_none,
  1, 192, :_reduce_449,
  3, 193, :_reduce_450,
  1, 271, :_reduce_451,
  1, 271, :_reduce_452,
  2, 271, :_reduce_453,
  2, 271, :_reduce_454,
  1, 185, :_reduce_455,
  1, 185, :_reduce_456,
  1, 185, :_reduce_457,
  1, 185, :_reduce_458,
  1, 185, :_reduce_459,
  1, 185, :_reduce_460,
  1, 185, :_reduce_461,
  1, 185, :_reduce_462,
  1, 185, :_reduce_463,
  1, 185, :_reduce_464,
  1, 185, :_reduce_465,
  1, 185, :_reduce_466,
  1, 216, :_reduce_467,
  1, 157, :_reduce_468,
  1, 161, :_reduce_469,
  1, 161, :_reduce_470,
  1, 226, :_reduce_471,
  3, 226, :_reduce_472,
  2, 226, :_reduce_473,
  3, 228, :_reduce_474,
  2, 228, :_reduce_475,
  6, 262, :_reduce_476,
  8, 262, :_reduce_477,
  4, 262, :_reduce_478,
  6, 262, :_reduce_479,
  4, 262, :_reduce_480,
  6, 262, :_reduce_481,
  2, 262, :_reduce_482,
  4, 262, :_reduce_483,
  6, 262, :_reduce_484,
  2, 262, :_reduce_485,
  4, 262, :_reduce_486,
  2, 262, :_reduce_487,
  4, 262, :_reduce_488,
  1, 262, :_reduce_489,
  0, 262, :_reduce_490,
  1, 258, :_reduce_491,
  1, 258, :_reduce_492,
  1, 258, :_reduce_493,
  1, 258, :_reduce_494,
  1, 245, :_reduce_none,
  1, 245, :_reduce_496,
  3, 245, :_reduce_497,
  2, 245, :_reduce_498,
  1, 284, :_reduce_none,
  3, 284, :_reduce_500,
  1, 249, :_reduce_501,
  3, 249, :_reduce_502,
  3, 285, :_reduce_503,
  3, 286, :_reduce_504,
  1, 250, :_reduce_505,
  3, 250, :_reduce_506,
  1, 283, :_reduce_507,
  3, 283, :_reduce_508,
  1, 287, :_reduce_none,
  1, 287, :_reduce_none,
  2, 251, :_reduce_511,
  1, 251, :_reduce_512,
  1, 288, :_reduce_none,
  1, 288, :_reduce_none,
  2, 253, :_reduce_515,
  2, 252, :_reduce_516,
  0, 252, :_reduce_517,
  1, 229, :_reduce_none,
  3, 229, :_reduce_519,
  0, 217, :_reduce_520,
  2, 217, :_reduce_none,
  1, 200, :_reduce_522,
  3, 200, :_reduce_523,
  3, 289, :_reduce_524,
  2, 289, :_reduce_525,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 265, :_reduce_none,
  1, 265, :_reduce_none,
  1, 265, :_reduce_none,
  1, 230, :_reduce_none,
  1, 230, :_reduce_none,
  0, 141, :_reduce_none,
  1, 141, :_reduce_none,
  0, 166, :_reduce_none,
  1, 166, :_reduce_none,
  2, 180, :_reduce_542,
  2, 160, :_reduce_543,
  0, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 227, :_reduce_547,
  1, 227, :_reduce_none,
  1, 143, :_reduce_none,
  2, 143, :_reduce_none,
  0, 197, :_reduce_551 ]

racc_reduce_n = 552

racc_shift_n = 967

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUMINUS_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tPLUS => 104,
  :tMINUS => 105,
  :tLT => 106,
  :tGT => 107,
  :tPIPE => 108,
  :tBANG => 109,
  :tCARET => 110,
  :tLCURLY => 111,
  :tRCURLY => 112,
  :tBACK_REF2 => 113,
  :tSYMBEG => 114,
  :tSTRING_BEG => 115,
  :tXSTRING_BEG => 116,
  :tREGEXP_BEG => 117,
  :tREGEXP_OPT => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tCHARACTER => 134,
  :tEQL => 135,
  :tLOWEST => 136 }

racc_nt_base = 137

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "lhs",
  "command_call",
  "mlhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "backref",
  "mrhs",
  "arg_value",
  "expr",
  "@1",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "@2",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@3",
  "primary",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "call_args2",
  "open_args",
  "@4",
  "@5",
  "@6",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@20",
  "f_args",
  "do_block",
  "@21",
  "operation3",
  "@22",
  "@23",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@24",
  "f_optarg",
  "f_arg_item",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'macruby.y', 51)
  def _reduce_2(val, _values, result)
                          result = @builder.compstmt(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 56)
  def _reduce_3(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 60)
  def _reduce_4(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 64)
  def _reduce_5(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 68)
  def _reduce_6(val, _values, result)
                          result = [ val[1] ]
                    
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'macruby.y', 74)
  def _reduce_8(val, _values, result)
                          result = @builder.preexe(val[0], val[1], val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 79)
  def _reduce_9(val, _values, result)
                          rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_.nil?
                        diagnostic :warning, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 95)
  def _reduce_10(val, _values, result)
                          result = @builder.compstmt(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 100)
  def _reduce_11(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 104)
  def _reduce_12(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 108)
  def _reduce_13(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 112)
  def _reduce_14(val, _values, result)
                          result = [ val[1] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 117)
  def _reduce_15(val, _values, result)
                          @lexer.state = :expr_fname
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 121)
  def _reduce_16(val, _values, result)
                          result = @builder.alias(val[0], val[1], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 125)
  def _reduce_17(val, _values, result)
                          result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 131)
  def _reduce_18(val, _values, result)
                          result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 137)
  def _reduce_19(val, _values, result)
                          diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 141)
  def _reduce_20(val, _values, result)
                          result = @builder.undef_method(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 145)
  def _reduce_21(val, _values, result)
                          result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 150)
  def _reduce_22(val, _values, result)
                          result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 155)
  def _reduce_23(val, _values, result)
                          result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 159)
  def _reduce_24(val, _values, result)
                          result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 163)
  def _reduce_25(val, _values, result)
                          rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 171)
  def _reduce_26(val, _values, result)
                          result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 175)
  def _reduce_27(val, _values, result)
                          result = @builder.assign(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 179)
  def _reduce_28(val, _values, result)
                          result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 183)
  def _reduce_29(val, _values, result)
                          result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 187)
  def _reduce_30(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 194)
  def _reduce_31(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 201)
  def _reduce_32(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 208)
  def _reduce_33(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 215)
  def _reduce_34(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 222)
  def _reduce_35(val, _values, result)
                          @builder.op_assign(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 226)
  def _reduce_36(val, _values, result)
                          result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 231)
  def _reduce_37(val, _values, result)
                          result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 235)
  def _reduce_38(val, _values, result)
                          result = @builder.multi_assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
  end
.,.,

# reduce 39 omitted

# reduce 40 omitted

module_eval(<<'.,.,', 'macruby.y', 243)
  def _reduce_41(val, _values, result)
                          result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 247)
  def _reduce_42(val, _values, result)
                          result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 251)
  def _reduce_43(val, _values, result)
                          result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 255)
  def _reduce_44(val, _values, result)
                          result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
  end
.,.,

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

module_eval(<<'.,.,', 'macruby.y', 267)
  def _reduce_50(val, _values, result)
                          result = @builder.call_method(val[0], val[1], val[2],
                                  *val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 272)
  def _reduce_51(val, _values, result)
                          result = @builder.call_method(val[0], val[1], val[2],
                                  *val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 278)
  def _reduce_52(val, _values, result)
                          @static_env.extend_dynamic
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 282)
  def _reduce_53(val, _values, result)
                          result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 289)
  def _reduce_54(val, _values, result)
                          result = @builder.call_method(nil, nil, val[0],
                                  *val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 294)
  def _reduce_55(val, _values, result)
                          method_call = @builder.call_method(nil, nil, val[0],
                                        *val[1])

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 303)
  def _reduce_56(val, _values, result)
                          result = @builder.call_method(val[0], val[1], val[2],
                                  *val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 308)
  def _reduce_57(val, _values, result)
                          method_call = @builder.call_method(val[0], val[1], val[2],
                                        *val[3])

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 317)
  def _reduce_58(val, _values, result)
                          result = @builder.call_method(val[0], val[1], val[2],
                                  *val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 322)
  def _reduce_59(val, _values, result)
                          method_call = @builder.call_method(val[0], val[1], val[2],
                                        *val[3])

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 331)
  def _reduce_60(val, _values, result)
                          result = @builder.keyword_cmd(:super, val[0],
                                  *val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 336)
  def _reduce_61(val, _values, result)
                          result = @builder.keyword_cmd(:yield, val[0],
                                  *val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 341)
  def _reduce_62(val, _values, result)
                          result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 346)
  def _reduce_63(val, _values, result)
                          result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 351)
  def _reduce_64(val, _values, result)
                          result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 357)
  def _reduce_65(val, _values, result)
                          result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 361)
  def _reduce_66(val, _values, result)
                          result = @builder.begin(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 366)
  def _reduce_67(val, _values, result)
                          result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 370)
  def _reduce_68(val, _values, result)
                          result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
  end
.,.,

# reduce 69 omitted

module_eval(<<'.,.,', 'macruby.y', 376)
  def _reduce_70(val, _values, result)
                          result = val[0].
                                  push(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 381)
  def _reduce_71(val, _values, result)
                          result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 386)
  def _reduce_72(val, _values, result)
                          result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 392)
  def _reduce_73(val, _values, result)
                          result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 397)
  def _reduce_74(val, _values, result)
                          result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 403)
  def _reduce_75(val, _values, result)
                          result = [ @builder.splat(val[0], val[1]) ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 407)
  def _reduce_76(val, _values, result)
                          result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 412)
  def _reduce_77(val, _values, result)
                          result = [ @builder.splat(val[0]) ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 416)
  def _reduce_78(val, _values, result)
                          result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
  end
.,.,

# reduce 79 omitted

module_eval(<<'.,.,', 'macruby.y', 423)
  def _reduce_80(val, _values, result)
                          result = @builder.begin(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 428)
  def _reduce_81(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 432)
  def _reduce_82(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 437)
  def _reduce_83(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 441)
  def _reduce_84(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 446)
  def _reduce_85(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 450)
  def _reduce_86(val, _values, result)
                          result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 454)
  def _reduce_87(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 458)
  def _reduce_88(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 462)
  def _reduce_89(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 466)
  def _reduce_90(val, _values, result)
                          result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 471)
  def _reduce_91(val, _values, result)
                          result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 476)
  def _reduce_92(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 481)
  def _reduce_93(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 485)
  def _reduce_94(val, _values, result)
                          result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 489)
  def _reduce_95(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 493)
  def _reduce_96(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 497)
  def _reduce_97(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 501)
  def _reduce_98(val, _values, result)
                          result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 506)
  def _reduce_99(val, _values, result)
                          result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 511)
  def _reduce_100(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 516)
  def _reduce_101(val, _values, result)
                          diagnostic :error, :module_name_const, nil, val[0]
                    
    result
  end
.,.,

# reduce 102 omitted

module_eval(<<'.,.,', 'macruby.y', 522)
  def _reduce_103(val, _values, result)
                          result = @builder.const_global(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 526)
  def _reduce_104(val, _values, result)
                          result = @builder.const(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 530)
  def _reduce_105(val, _values, result)
                          result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
  end
.,.,

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

module_eval(<<'.,.,', 'macruby.y', 539)
  def _reduce_111(val, _values, result)
                          result = @builder.symbol(val[0])
                    
    result
  end
.,.,

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

module_eval(<<'.,.,', 'macruby.y', 548)
  def _reduce_115(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 552)
  def _reduce_116(val, _values, result)
                          @lexer.state = :expr_fname
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 556)
  def _reduce_117(val, _values, result)
                          result = val[0] << val[3]
                    
    result
  end
.,.,

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

module_eval(<<'.,.,', 'macruby.y', 577)
  def _reduce_188(val, _values, result)
                          result = @builder.assign(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 581)
  def _reduce_189(val, _values, result)
                          rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result  = @builder.assign(val[0], val[1], rescue_)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 591)
  def _reduce_190(val, _values, result)
                          result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 595)
  def _reduce_191(val, _values, result)
                          rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result = @builder.op_assign(val[0], val[1], rescue_)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 605)
  def _reduce_192(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 612)
  def _reduce_193(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 619)
  def _reduce_194(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 626)
  def _reduce_195(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 633)
  def _reduce_196(val, _values, result)
                          diagnostic :error, :dynamic_const, nil, val[2], [ val[3] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 637)
  def _reduce_197(val, _values, result)
                          diagnostic :error, :dynamic_const, nil, val[1], [ val[2] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 641)
  def _reduce_198(val, _values, result)
                          result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 645)
  def _reduce_199(val, _values, result)
                          result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 649)
  def _reduce_200(val, _values, result)
                          result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 653)
  def _reduce_201(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 657)
  def _reduce_202(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 661)
  def _reduce_203(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 665)
  def _reduce_204(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 669)
  def _reduce_205(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 673)
  def _reduce_206(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 677)
  def _reduce_207(val, _values, result)
                          result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    @builder.integer(val[1]),
                                      val[2], val[3]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 684)
  def _reduce_208(val, _values, result)
                          result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    @builder.float(val[1]),
                                      val[2], val[3]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 691)
  def _reduce_209(val, _values, result)
                          result = @builder.unary_op(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 695)
  def _reduce_210(val, _values, result)
                          result = @builder.unary_op(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 699)
  def _reduce_211(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 703)
  def _reduce_212(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 707)
  def _reduce_213(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 711)
  def _reduce_214(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 715)
  def _reduce_215(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 719)
  def _reduce_216(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 723)
  def _reduce_217(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 727)
  def _reduce_218(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 731)
  def _reduce_219(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 735)
  def _reduce_220(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 739)
  def _reduce_221(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 743)
  def _reduce_222(val, _values, result)
                          result = @builder.match_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 747)
  def _reduce_223(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 751)
  def _reduce_224(val, _values, result)
                          result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 755)
  def _reduce_225(val, _values, result)
                          result = @builder.unary_op(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 759)
  def _reduce_226(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 763)
  def _reduce_227(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 767)
  def _reduce_228(val, _values, result)
                          result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 771)
  def _reduce_229(val, _values, result)
                          result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 775)
  def _reduce_230(val, _values, result)
                          result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 780)
  def _reduce_231(val, _values, result)
                          result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
  end
.,.,

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

module_eval(<<'.,.,', 'macruby.y', 791)
  def _reduce_236(val, _values, result)
                          result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 795)
  def _reduce_237(val, _values, result)
                          result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 800)
  def _reduce_238(val, _values, result)
                          result = val
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 805)
  def _reduce_239(val, _values, result)
                          result = [ nil, [], nil ]
                    
    result
  end
.,.,

# reduce 240 omitted

module_eval(<<'.,.,', 'macruby.y', 811)
  def _reduce_241(val, _values, result)
                          result = []
                    
    result
  end
.,.,

# reduce 242 omitted

module_eval(<<'.,.,', 'macruby.y', 817)
  def _reduce_243(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 821)
  def _reduce_244(val, _values, result)
                          result = val[0].concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 825)
  def _reduce_245(val, _values, result)
                          result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 830)
  def _reduce_246(val, _values, result)
                          assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 836)
  def _reduce_247(val, _values, result)
                          val[2][-1] = @builder.objc_varargs(val[2][-1], val[4])
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 843)
  def _reduce_248(val, _values, result)
                          result =  [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 848)
  def _reduce_249(val, _values, result)
                          result = [ val[0], *val[2].concat(val[3]) ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 852)
  def _reduce_250(val, _values, result)
                          result = [ val[0], val[2] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 856)
  def _reduce_251(val, _values, result)
                          result =  [ @builder.associate(nil, val[0], nil),
                                  *val[1] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 861)
  def _reduce_252(val, _values, result)
                          result =  [ val[0],
                                  @builder.associate(nil, val[2], nil),
                                  *val[3] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 867)
  def _reduce_253(val, _values, result)
                          result =  [ val[0],
                                  *val[2].
                                    push(@builder.associate(nil, val[4], nil)).
                                    concat(val[5]) ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 874)
  def _reduce_254(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 878)
  def _reduce_255(val, _values, result)
                          result = @lexer.cmdarg.dup
                      @lexer.cmdarg.push(true)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 883)
  def _reduce_256(val, _values, result)
                          @lexer.cmdarg = val[0]

                      result = val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 890)
  def _reduce_257(val, _values, result)
                          result = [ nil, val[0], nil ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 894)
  def _reduce_258(val, _values, result)
                          @lexer.state = :expr_endarg
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 898)
  def _reduce_259(val, _values, result)
                          result = [ val[0], [], val[2] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 902)
  def _reduce_260(val, _values, result)
                          @lexer.state = :expr_endarg
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 906)
  def _reduce_261(val, _values, result)
                          result = [ val[0], val[1], val[3] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 911)
  def _reduce_262(val, _values, result)
                          result = @builder.block_pass(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 916)
  def _reduce_263(val, _values, result)
                          result = [ val[1] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 920)
  def _reduce_264(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 924)
  def _reduce_265(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 929)
  def _reduce_266(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 933)
  def _reduce_267(val, _values, result)
                          result = [ @builder.splat(val[0], val[1]) ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 937)
  def _reduce_268(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 941)
  def _reduce_269(val, _values, result)
                          result = val[0] << @builder.splat(val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 946)
  def _reduce_270(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 950)
  def _reduce_271(val, _values, result)
                          result = val[0] << @builder.splat(val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 954)
  def _reduce_272(val, _values, result)
                          result = [ @builder.splat(val[0], val[1]) ]
                    
    result
  end
.,.,

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

module_eval(<<'.,.,', 'macruby.y', 967)
  def _reduce_281(val, _values, result)
                          result = @builder.call_method(nil, nil, val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 971)
  def _reduce_282(val, _values, result)
                          result = @builder.begin_keyword(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 975)
  def _reduce_283(val, _values, result)
                          @lexer.state = :expr_endarg
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 979)
  def _reduce_284(val, _values, result)
                          result = @builder.begin(val[0], val[1], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 983)
  def _reduce_285(val, _values, result)
                          result = @builder.begin(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 987)
  def _reduce_286(val, _values, result)
                          result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 991)
  def _reduce_287(val, _values, result)
                          result = @builder.const_global(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 995)
  def _reduce_288(val, _values, result)
                          result = @builder.array(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 999)
  def _reduce_289(val, _values, result)
                          result = @builder.associate(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1003)
  def _reduce_290(val, _values, result)
                          result = @builder.keyword_cmd(:return, val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1007)
  def _reduce_291(val, _values, result)
                          result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1011)
  def _reduce_292(val, _values, result)
                          result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1015)
  def _reduce_293(val, _values, result)
                          result = @builder.keyword_cmd(:yield, val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1019)
  def _reduce_294(val, _values, result)
                          result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1024)
  def _reduce_295(val, _values, result)
                          result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1028)
  def _reduce_296(val, _values, result)
                          result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1032)
  def _reduce_297(val, _values, result)
                          method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
  end
.,.,

# reduce 298 omitted

module_eval(<<'.,.,', 'macruby.y', 1041)
  def _reduce_299(val, _values, result)
                          begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1047)
  def _reduce_300(val, _values, result)
                          lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[1]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1055)
  def _reduce_301(val, _values, result)
                          else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1062)
  def _reduce_302(val, _values, result)
                          else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1069)
  def _reduce_303(val, _values, result)
                          @lexer.cond.push(true)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1073)
  def _reduce_304(val, _values, result)
                          @lexer.cond.pop
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1077)
  def _reduce_305(val, _values, result)
                          result = @builder.loop(:while, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1082)
  def _reduce_306(val, _values, result)
                          @lexer.cond.push(true)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1086)
  def _reduce_307(val, _values, result)
                          @lexer.cond.pop
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1090)
  def _reduce_308(val, _values, result)
                          result = @builder.loop(:until, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1095)
  def _reduce_309(val, _values, result)
                          *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1103)
  def _reduce_310(val, _values, result)
                          *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1111)
  def _reduce_311(val, _values, result)
                          @lexer.cond.push(true)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1115)
  def _reduce_312(val, _values, result)
                          @lexer.cond.pop
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1119)
  def _reduce_313(val, _values, result)
                          result = @builder.for(val[0], val[1],
                                            val[2], val[4],
                                            val[5], val[7], val[8])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1125)
  def _reduce_314(val, _values, result)
                          @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1130)
  def _reduce_315(val, _values, result)
                          if in_def?
                        diagnostic :error, :class_in_def, nil, val[0]
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(val[0], val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1144)
  def _reduce_316(val, _values, result)
                          result = @def_level
                      @def_level = 0

                      @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1152)
  def _reduce_317(val, _values, result)
                          result = @builder.def_sclass(val[0], val[1], val[2],
                                                   val[5], val[6])

                      @lexer.pop_cmdarg
                      @static_env.unextend

                      @def_level = val[4]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1162)
  def _reduce_318(val, _values, result)
                          @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1167)
  def _reduce_319(val, _values, result)
                          if in_def?
                        diagnostic :error, :module_in_def, nil, val[0]
                      end

                      result = @builder.def_module(val[0], val[1],
                                                   val[3], val[4])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1179)
  def _reduce_320(val, _values, result)
                          @def_level += 1
                      @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1185)
  def _reduce_321(val, _values, result)
                          result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @def_level -= 1
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1194)
  def _reduce_322(val, _values, result)
                          @lexer.state = :expr_fname
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1198)
  def _reduce_323(val, _values, result)
                          @def_level += 1
                      @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1204)
  def _reduce_324(val, _values, result)
                          result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @def_level -= 1
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1213)
  def _reduce_325(val, _values, result)
                          result = @builder.keyword_cmd(:break, val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1217)
  def _reduce_326(val, _values, result)
                          result = @builder.keyword_cmd(:next, val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1221)
  def _reduce_327(val, _values, result)
                          result = @builder.keyword_cmd(:redo, val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1225)
  def _reduce_328(val, _values, result)
                          result = @builder.keyword_cmd(:retry, val[0])
                    
    result
  end
.,.,

# reduce 329 omitted

# reduce 330 omitted

# reduce 331 omitted

module_eval(<<'.,.,', 'macruby.y', 1234)
  def _reduce_332(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

# reduce 333 omitted

# reduce 334 omitted

# reduce 335 omitted

module_eval(<<'.,.,', 'macruby.y', 1243)
  def _reduce_336(val, _values, result)
                          else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
  end
.,.,

# reduce 337 omitted

module_eval(<<'.,.,', 'macruby.y', 1254)
  def _reduce_338(val, _values, result)
                          result = val
                    
    result
  end
.,.,

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

module_eval(<<'.,.,', 'macruby.y', 1263)
  def _reduce_342(val, _values, result)
                          result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1268)
  def _reduce_343(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1272)
  def _reduce_344(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

# reduce 345 omitted

module_eval(<<'.,.,', 'macruby.y', 1278)
  def _reduce_346(val, _values, result)
                          result = val[0].
                                  push(@builder.objc_restarg(val[2], val[3]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1283)
  def _reduce_347(val, _values, result)
                          result = val[0].
                                  push(@builder.objc_restarg(val[2], val[3])).
                                  concat(val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1289)
  def _reduce_348(val, _values, result)
                          result = val[0].
                                  push(@builder.objc_restarg(val[2]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1294)
  def _reduce_349(val, _values, result)
                          result = val[0].
                                  push(@builder.objc_restarg(val[2])).
                                  concat(val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1300)
  def _reduce_350(val, _values, result)
                          result = [ @builder.objc_restarg(val[0], val[1]) ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1304)
  def _reduce_351(val, _values, result)
                          result = [ @builder.objc_restarg(val[0], val[1]),
                                 *val[3] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1309)
  def _reduce_352(val, _values, result)
                          result = [ @builder.objc_restarg(val[0]) ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1313)
  def _reduce_353(val, _values, result)
                          result = [ @builder.objc_restarg(val[0]),
                                 *val[2] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1319)
  def _reduce_354(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1326)
  def _reduce_355(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1334)
  def _reduce_356(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1340)
  def _reduce_357(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1347)
  def _reduce_358(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

# reduce 359 omitted

module_eval(<<'.,.,', 'macruby.y', 1354)
  def _reduce_360(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1361)
  def _reduce_361(val, _values, result)
                          result = val[0].concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1365)
  def _reduce_362(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1371)
  def _reduce_363(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1378)
  def _reduce_364(val, _values, result)
                          result = val[0].
                                  concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1383)
  def _reduce_365(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1389)
  def _reduce_366(val, _values, result)
                          result = val[0].
                                  concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1394)
  def _reduce_367(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1400)
  def _reduce_368(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1405)
  def _reduce_369(val, _values, result)
                          result = @builder.args(nil, [], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1409)
  def _reduce_370(val, _values, result)
                          @lexer.state = :expr_value
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1414)
  def _reduce_371(val, _values, result)
                          result = @builder.args(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1418)
  def _reduce_372(val, _values, result)
                          result = @builder.args(val[0], [], val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1422)
  def _reduce_373(val, _values, result)
                          result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1427)
  def _reduce_374(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1431)
  def _reduce_375(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1436)
  def _reduce_376(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1440)
  def _reduce_377(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1445)
  def _reduce_378(val, _values, result)
                          result = @builder.shadowarg(val[0])
                    
    result
  end
.,.,

# reduce 379 omitted

module_eval(<<'.,.,', 'macruby.y', 1450)
  def _reduce_380(val, _values, result)
                          @static_env.extend_dynamic
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1454)
  def _reduce_381(val, _values, result)
                          result = [ val[1], val[2] ]

                      @static_env.unextend
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1461)
  def _reduce_382(val, _values, result)
                          result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1465)
  def _reduce_383(val, _values, result)
                          result = @builder.args(nil, val[0], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1470)
  def _reduce_384(val, _values, result)
                          result = [ val[0], val[1], val[2] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1474)
  def _reduce_385(val, _values, result)
                          result = [ val[0], val[1], val[2] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1479)
  def _reduce_386(val, _values, result)
                          @static_env.extend_dynamic
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1483)
  def _reduce_387(val, _values, result)
                          result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1490)
  def _reduce_388(val, _values, result)
                          begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1496)
  def _reduce_389(val, _values, result)
                          lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1502)
  def _reduce_390(val, _values, result)
                          lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1509)
  def _reduce_391(val, _values, result)
                          lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1515)
  def _reduce_392(val, _values, result)
                          lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1521)
  def _reduce_393(val, _values, result)
                          lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1527)
  def _reduce_394(val, _values, result)
                          result = @builder.call_method(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1531)
  def _reduce_395(val, _values, result)
                          lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1537)
  def _reduce_396(val, _values, result)
                          lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1543)
  def _reduce_397(val, _values, result)
                          lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1549)
  def _reduce_398(val, _values, result)
                          result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1553)
  def _reduce_399(val, _values, result)
                          result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1558)
  def _reduce_400(val, _values, result)
                          @static_env.extend_dynamic
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1562)
  def _reduce_401(val, _values, result)
                          result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1568)
  def _reduce_402(val, _values, result)
                          @static_env.extend_dynamic
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1572)
  def _reduce_403(val, _values, result)
                          result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1579)
  def _reduce_404(val, _values, result)
                          result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1585)
  def _reduce_405(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

# reduce 406 omitted

module_eval(<<'.,.,', 'macruby.y', 1591)
  def _reduce_407(val, _values, result)
                          assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1604)
  def _reduce_408(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1609)
  def _reduce_409(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

# reduce 410 omitted

# reduce 411 omitted

module_eval(<<'.,.,', 'macruby.y', 1616)
  def _reduce_412(val, _values, result)
                          result = [ val[0], val[1] ]
                    
    result
  end
.,.,

# reduce 413 omitted

module_eval(<<'.,.,', 'macruby.y', 1622)
  def _reduce_414(val, _values, result)
                          result = [ val[0], val[1] ]
                    
    result
  end
.,.,

# reduce 415 omitted

# reduce 416 omitted

# reduce 417 omitted

# reduce 418 omitted

module_eval(<<'.,.,', 'macruby.y', 1632)
  def _reduce_419(val, _values, result)
                          result = @builder.string_compose(nil, val[0], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1637)
  def _reduce_420(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1641)
  def _reduce_421(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1646)
  def _reduce_422(val, _values, result)
                          result = @builder.string_compose(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1650)
  def _reduce_423(val, _values, result)
                          result = @builder.string(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1654)
  def _reduce_424(val, _values, result)
                          result = @builder.character(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1659)
  def _reduce_425(val, _values, result)
                          result = @builder.xstring_compose(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1664)
  def _reduce_426(val, _values, result)
                          opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1670)
  def _reduce_427(val, _values, result)
                          result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1675)
  def _reduce_428(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1679)
  def _reduce_429(val, _values, result)
                          result = val[0] << @builder.word(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1684)
  def _reduce_430(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1688)
  def _reduce_431(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1693)
  def _reduce_432(val, _values, result)
                          result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1698)
  def _reduce_433(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1702)
  def _reduce_434(val, _values, result)
                          result = val[0] << @builder.string_internal(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1707)
  def _reduce_435(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1711)
  def _reduce_436(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1716)
  def _reduce_437(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1720)
  def _reduce_438(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1725)
  def _reduce_439(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1729)
  def _reduce_440(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1734)
  def _reduce_441(val, _values, result)
                          result = @builder.string_internal(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1738)
  def _reduce_442(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1742)
  def _reduce_443(val, _values, result)
                          @lexer.cond.push(false)
                      @lexer.cmdarg.push(false)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1747)
  def _reduce_444(val, _values, result)
                          @lexer.cond.lexpop
                      @lexer.cmdarg.lexpop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1755)
  def _reduce_445(val, _values, result)
                          result = @builder.gvar(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1759)
  def _reduce_446(val, _values, result)
                          result = @builder.ivar(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1763)
  def _reduce_447(val, _values, result)
                          result = @builder.cvar(val[0])
                    
    result
  end
.,.,

# reduce 448 omitted

module_eval(<<'.,.,', 'macruby.y', 1770)
  def _reduce_449(val, _values, result)
                          result = @builder.symbol(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1775)
  def _reduce_450(val, _values, result)
                          result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1780)
  def _reduce_451(val, _values, result)
                          result = @builder.integer(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1784)
  def _reduce_452(val, _values, result)
                          result = @builder.float(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1788)
  def _reduce_453(val, _values, result)
                          result = @builder.negate(val[0],
                                  @builder.integer(val[1]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1793)
  def _reduce_454(val, _values, result)
                          result = @builder.negate(val[0],
                                  @builder.float(val[1]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1799)
  def _reduce_455(val, _values, result)
                          result = @builder.ident(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1803)
  def _reduce_456(val, _values, result)
                          result = @builder.ivar(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1807)
  def _reduce_457(val, _values, result)
                          result = @builder.gvar(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1811)
  def _reduce_458(val, _values, result)
                          result = @builder.const(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1815)
  def _reduce_459(val, _values, result)
                          result = @builder.cvar(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1819)
  def _reduce_460(val, _values, result)
                          result = @builder.nil(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1823)
  def _reduce_461(val, _values, result)
                          result = @builder.self(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1827)
  def _reduce_462(val, _values, result)
                          result = @builder.true(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1831)
  def _reduce_463(val, _values, result)
                          result = @builder.false(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1835)
  def _reduce_464(val, _values, result)
                          result = @builder.__FILE__(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1839)
  def _reduce_465(val, _values, result)
                          result = @builder.__LINE__(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1843)
  def _reduce_466(val, _values, result)
                          result = @builder.__ENCODING__(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1848)
  def _reduce_467(val, _values, result)
                          result = @builder.accessible(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1853)
  def _reduce_468(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1858)
  def _reduce_469(val, _values, result)
                          result = @builder.nth_ref(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1862)
  def _reduce_470(val, _values, result)
                          result = @builder.back_ref(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1867)
  def _reduce_471(val, _values, result)
                          result = nil
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1871)
  def _reduce_472(val, _values, result)
                          result = [ val[0], val[1] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1875)
  def _reduce_473(val, _values, result)
                          yyerrok
                      result = nil
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1881)
  def _reduce_474(val, _values, result)
                          result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1887)
  def _reduce_475(val, _values, result)
                          result = @builder.args(nil, val[0], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1892)
  def _reduce_476(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1899)
  def _reduce_477(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1907)
  def _reduce_478(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1913)
  def _reduce_479(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1920)
  def _reduce_480(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1926)
  def _reduce_481(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1933)
  def _reduce_482(val, _values, result)
                          result = val[0].
                                  concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1938)
  def _reduce_483(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1944)
  def _reduce_484(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1951)
  def _reduce_485(val, _values, result)
                          result = val[0].
                                  concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1956)
  def _reduce_486(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1962)
  def _reduce_487(val, _values, result)
                          result = val[0].
                                  concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1967)
  def _reduce_488(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1973)
  def _reduce_489(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1977)
  def _reduce_490(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1982)
  def _reduce_491(val, _values, result)
                          diagnostic :error, :argument_const, nil, val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1986)
  def _reduce_492(val, _values, result)
                          diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1990)
  def _reduce_493(val, _values, result)
                          diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1994)
  def _reduce_494(val, _values, result)
                          diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
  end
.,.,

# reduce 495 omitted

module_eval(<<'.,.,', 'macruby.y', 2000)
  def _reduce_496(val, _values, result)
                          @static_env.declare val[0][0]

                      result = @builder.arg(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 2006)
  def _reduce_497(val, _values, result)
                          @static_env.declare val[2][0]

                      result = @builder.objc_kwarg(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 2012)
  def _reduce_498(val, _values, result)
                          @static_env.declare val[1][0]

                      result = @builder.objc_kwarg(val[0], nil, val[1])
                    
    result
  end
.,.,

# reduce 499 omitted

module_eval(<<'.,.,', 'macruby.y', 2020)
  def _reduce_500(val, _values, result)
                          result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 2025)
  def _reduce_501(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 2029)
  def _reduce_502(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 2034)
  def _reduce_503(val, _values, result)
                          @static_env.declare val[0][0]

                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 2041)
  def _reduce_504(val, _values, result)
                          @static_env.declare val[0][0]

                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 2048)
  def _reduce_505(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 2052)
  def _reduce_506(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 2057)
  def _reduce_507(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 2061)
  def _reduce_508(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

# reduce 509 omitted

# reduce 510 omitted

module_eval(<<'.,.,', 'macruby.y', 2068)
  def _reduce_511(val, _values, result)
                          @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 2074)
  def _reduce_512(val, _values, result)
                          result = [ @builder.restarg(val[0]) ]
                    
    result
  end
.,.,

# reduce 513 omitted

# reduce 514 omitted

module_eval(<<'.,.,', 'macruby.y', 2081)
  def _reduce_515(val, _values, result)
                          @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 2088)
  def _reduce_516(val, _values, result)
                          result = [ val[1] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 2092)
  def _reduce_517(val, _values, result)
                          result = []
                    
    result
  end
.,.,

# reduce 518 omitted

module_eval(<<'.,.,', 'macruby.y', 2098)
  def _reduce_519(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 2103)
  def _reduce_520(val, _values, result)
                          result = []
                    
    result
  end
.,.,

# reduce 521 omitted

module_eval(<<'.,.,', 'macruby.y', 2109)
  def _reduce_522(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 2113)
  def _reduce_523(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 2118)
  def _reduce_524(val, _values, result)
                          result = @builder.pair(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 2122)
  def _reduce_525(val, _values, result)
                          result = @builder.pair_keyword(val[0], val[1])
                    
    result
  end
.,.,

# reduce 526 omitted

# reduce 527 omitted

# reduce 528 omitted

# reduce 529 omitted

# reduce 530 omitted

# reduce 531 omitted

# reduce 532 omitted

# reduce 533 omitted

# reduce 534 omitted

# reduce 535 omitted

# reduce 536 omitted

# reduce 537 omitted

# reduce 538 omitted

# reduce 539 omitted

# reduce 540 omitted

# reduce 541 omitted

module_eval(<<'.,.,', 'macruby.y', 2133)
  def _reduce_542(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 2137)
  def _reduce_543(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

# reduce 544 omitted

# reduce 545 omitted

# reduce 546 omitted

module_eval(<<'.,.,', 'macruby.y', 2143)
  def _reduce_547(val, _values, result)
                        yyerrok
                  
    result
  end
.,.,

# reduce 548 omitted

# reduce 549 omitted

# reduce 550 omitted

module_eval(<<'.,.,', 'macruby.y', 2152)
  def _reduce_551(val, _values, result)
                        result = nil
                  
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class MacRuby
  end   # module Parser
