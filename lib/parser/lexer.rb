# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-

# line 1 "lib/parser/lexer.rl"

# line 3 "lib/parser/lexer.rl"
#
# === BEFORE YOU START ===
#
# Read the Ruby Hacking Guide chapter 11, available in English at
# http://whitequark.org/blog/2013/04/01/ruby-hacking-guide-ch-11-finite-state-lexer/
#
# Remember two things about Ragel scanners:
#
#   1) Longest match wins.
#
#   2) If two matches have the same length, the first
#      in source code wins.
#
# General rules of making Ragel and Bison happy:
#
#  * `p` (position) and `@te` contain the index of the character
#    they're pointing to ("current"), plus one. `@ts` contains the index
#    of the corresponding character. The code for extracting matched token is:
#
#       @source_buffer.slice(@ts...@te)
#
#  * If your input is `foooooooobar` and the rule is:
#
#       'f' 'o'+
#
#    the result will be:
#
#       foooooooobar
#       ^ ts=0   ^ p=te=9
#
#  * A Ragel lexer action should not emit more than one token, unless
#    you know what you are doing.
#
#  * All Ragel commands (fnext, fgoto, ...) end with a semicolon.
#
#  * If an action emits the token and transitions to another state, use
#    these Ragel commands:
#
#       emit($whatever)
#       fnext $next_state; fbreak;
#
#    If you perform `fgoto` in an action which does not emit a token nor
#    rewinds the stream pointer, the parser's side-effectful,
#    context-sensitive lookahead actions will break in a hard to detect
#    and debug way.
#
#  * If an action does not emit a token:
#
#       fgoto $next_state;
#
#  * If an action features lookbehind, i.e. matches characters with the
#    intent of passing them to another action:
#
#       p = @ts - 1
#       fgoto $next_state;
#
#    or, if the lookbehind consists of a single character:
#
#       fhold; fgoto $next_state;
#
#  * Ragel merges actions. So, if you have `e_lparen = '(' %act` and
#    `c_lparen = '('` and a lexer action `e_lparen | c_lparen`, the result
#    _will_ invoke the action `act`.
#
#    e_something stands for "something with **e**mbedded action".
#
#  * EOF is explicit and is matched by `c_eof`. If you want to introspect
#    the state of the lexer, add this rule to the state:
#
#       c_eof => do_eof;
#
#  * If you proceed past EOF, the lexer will complain:
#
#       NoMethodError: undefined method `ord' for nil:NilClass
#

class Parser::Lexer

  
# line 85 "lib/parser/lexer.rb"
class << self
	attr_accessor :_lex_trans_keys
	private :_lex_trans_keys, :_lex_trans_keys=
end
self._lex_trans_keys = [
	0, 0, 101, 101, 103, 103, 
	105, 105, 110, 110, 69, 
	69, 78, 78, 68, 68, 
	95, 95, 95, 95, 0, 26, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 45, 
	0, 77, 0, 77, 0, 92, 
	0, 26, 0, 26, 0, 
	45, 0, 99, 0, 26, 
	67, 99, 45, 45, 0, 92, 
	0, 77, 0, 102, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 45, 0, 77, 
	0, 77, 0, 92, 0, 
	26, 0, 26, 0, 45, 
	0, 99, 0, 26, 67, 99, 
	45, 45, 0, 92, 0, 
	77, 0, 102, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 58, 58, 0, 127, 
	58, 58, 60, 60, 62, 
	62, 10, 10, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 115, 115, 99, 99, 
	117, 117, 101, 101, 108, 
	116, 101, 101, 115, 115, 
	115, 115, 105, 105, 108, 108, 
	105, 105, 108, 108, 58, 
	58, 0, 127, 10, 10, 
	0, 127, 58, 58, 98, 98, 
	101, 101, 103, 103, 105, 
	105, 110, 110, 0, 122, 
	61, 61, 0, 127, 0, 127, 
	61, 126, 0, 127, 0, 
	127, 93, 93, 0, 127, 
	0, 127, 10, 10, 10, 34, 
	10, 10, 10, 39, 0, 
	127, 10, 96, 0, 45, 
	0, 77, 0, 77, 0, 92, 
	0, 26, 0, 26, 0, 
	45, 0, 99, 0, 26, 
	67, 99, 45, 45, 0, 92, 
	0, 77, 0, 102, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	58, 58, 58, 58, 0, 
	127, 43, 57, 48, 57, 
	48, 57, 48, 57, 48, 57, 
	0, 127, 58, 58, 9, 
	92, 9, 92, 9, 92, 
	9, 92, 9, 92, 9, 92, 
	60, 60, 10, 10, 9, 
	46, 46, 46, 0, 95, 
	9, 32, 0, 0, 10, 10, 
	10, 10, 98, 98, 9, 
	32, 10, 10, 95, 95, 
	0, 92, 9, 32, 36, 123, 
	0, 127, 48, 57, 0, 
	120, 0, 0, 0, 0, 
	48, 55, 48, 55, 0, 0, 
	0, 0, 0, 92, 0, 
	0, 0, 0, 0, 0, 
	0, 92, 45, 45, 0, 0, 
	0, 0, 0, 0, 0, 
	92, 0, 45, 0, 92, 
	0, 92, 0, 0, 0, 0, 
	0, 92, 0, 45, 10, 
	10, 0, 92, 0, 123, 
	0, 26, 0, 26, 0, 26, 
	0, 0, 0, 102, 0, 
	102, 0, 102, 0, 0, 
	0, 125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 
	0, 0, 125, 0, 125, 
	0, 0, 0, 125, 0, 26, 
	0, 125, 0, 125, 0, 
	125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 125, 
	0, 125, 0, 0, 0, 
	125, 0, 0, 48, 102, 
	0, 0, 0, 92, 36, 123, 
	0, 127, 48, 57, 0, 
	120, 0, 0, 0, 0, 
	48, 55, 48, 55, 0, 0, 
	0, 0, 0, 92, 0, 
	0, 0, 0, 0, 0, 
	0, 92, 45, 45, 0, 0, 
	0, 0, 0, 0, 0, 
	92, 0, 45, 0, 92, 
	0, 92, 0, 0, 0, 0, 
	0, 92, 0, 45, 10, 
	10, 0, 92, 0, 123, 
	0, 26, 0, 26, 0, 26, 
	0, 0, 0, 102, 0, 
	102, 0, 102, 0, 0, 
	0, 125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 
	0, 0, 125, 0, 125, 
	0, 0, 0, 125, 0, 26, 
	0, 125, 0, 125, 0, 
	125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 125, 
	0, 125, 0, 0, 0, 
	125, 0, 0, 48, 102, 
	0, 0, 0, 92, 9, 32, 
	0, 26, 0, 92, 0, 
	26, 0, 35, 36, 123, 
	0, 127, 48, 57, 0, 26, 
	65, 122, 65, 122, 36, 
	64, 0, 127, 48, 57, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 9, 32, 0, 
	0, 61, 126, 10, 10, 
	10, 10, 0, 127, 0, 127, 
	48, 57, 38, 38, 42, 
	42, 64, 64, 58, 58, 
	60, 61, 62, 62, 61, 126, 
	61, 61, 61, 62, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 93, 93, 10, 
	10, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 124, 124, 0, 127, 
	0, 127, 9, 32, 10, 
	10, 10, 10, 10, 10, 
	0, 0, 0, 127, 0, 127, 
	61, 61, 0, 0, 9, 
	32, 0, 0, 61, 126, 
	10, 10, 10, 10, 38, 38, 
	42, 42, 64, 64, 60, 
	61, 62, 62, 61, 126, 
	61, 61, 61, 62, 0, 127, 
	93, 93, 10, 10, 124, 
	124, 0, 126, 0, 127, 
	0, 61, 9, 61, 9, 61, 
	0, 0, 9, 61, 9, 
	62, 46, 46, 46, 46, 
	58, 58, 9, 32, 0, 0, 
	0, 127, 0, 0, 9, 
	124, 0, 0, 10, 10, 
	10, 10, 0, 0, 9, 61, 
	58, 58, 60, 60, 62, 
	62, 9, 32, 10, 10, 
	0, 127, 102, 102, 101, 101, 
	110, 110, 104, 104, 0, 
	127, 0, 127, 0, 127, 
	0, 0, 0, 127, 10, 10, 
	0, 123, 9, 32, 10, 
	10, 10, 10, 10, 10, 
	0, 0, 111, 111, 0, 0, 
	0, 127, 0, 127, 9, 
	32, 0, 0, 10, 10, 
	10, 10, 10, 10, 0, 0, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 58, 
	61, 0, 0, 61, 126, 
	61, 61, 0, 0, 0, 0, 
	0, 0, 9, 32, 61, 
	61, 9, 32, 61, 126, 
	10, 10, 10, 10, 65, 122, 
	0, 122, 38, 61, 0, 
	0, 42, 61, 61, 61, 
	48, 61, 48, 62, 46, 46, 
	46, 46, 0, 26, 0, 
	127, 0, 127, 61, 61, 
	0, 0, 61, 126, 61, 62, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 61, 126, 
	0, 127, 48, 57, 38, 38, 
	42, 42, 64, 64, 60, 
	61, 62, 62, 61, 61, 
	61, 62, 124, 124, 60, 61, 
	0, 0, 62, 62, 61, 
	126, 61, 62, 0, 122, 
	0, 0, 0, 127, 0, 127, 
	0, 120, 0, 0, 0, 
	0, 48, 55, 48, 55, 
	0, 0, 0, 0, 0, 92, 
	0, 0, 0, 0, 0, 
	0, 0, 92, 45, 45, 
	0, 0, 0, 0, 0, 0, 
	0, 92, 0, 45, 0, 
	92, 0, 92, 0, 0, 
	0, 0, 0, 92, 0, 45, 
	10, 10, 0, 92, 0, 
	123, 0, 26, 0, 26, 
	0, 26, 0, 0, 0, 102, 
	0, 102, 0, 102, 0, 
	0, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 125, 
	0, 0, 0, 125, 0, 
	125, 0, 0, 0, 125, 
	0, 26, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 
	125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 
	125, 0, 125, 0, 0, 
	0, 0, 48, 102, 0, 0, 
	0, 127, 0, 127, 0, 
	127, 0, 0, 10, 10, 
	0, 0, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 61, 
	126, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 0, 
	61, 124, 0, 92, 9, 32, 
	0, 0, 10, 10, 10, 
	10, 10, 10, 0, 0, 
	0, 127, 0, 127, 9, 32, 
	0, 0, 10, 10, 10, 
	10, 10, 10, 0, 0, 
	0, 127, 0, 127, 61, 61, 
	0, 0, 9, 32, 0, 
	0, 61, 126, 10, 10, 
	10, 10, 0, 127, 0, 127, 
	48, 57, 61, 61, 38, 
	61, 0, 0, 0, 0, 
	42, 61, 61, 62, 46, 57, 
	46, 46, 48, 101, 48, 
	95, 46, 120, 48, 114, 
	43, 57, 48, 105, 0, 0, 
	105, 105, 0, 0, 48, 
	114, 48, 114, 48, 114, 
	48, 114, 105, 114, 0, 0, 
	105, 105, 0, 0, 48, 
	114, 48, 114, 48, 114, 
	48, 114, 48, 114, 48, 114, 
	48, 114, 48, 114, 46, 
	114, 48, 114, 46, 114, 
	48, 114, 58, 58, 60, 61, 
	62, 62, 61, 126, 61, 
	61, 61, 62, 0, 127, 
	0, 127, 0, 0, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 0, 10, 10, 0, 0, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	9, 92, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 0, 
	61, 124, 0, 0, 9, 
	46, 9, 46, 46, 46, 
	10, 61, 10, 10, 10, 101, 
	10, 110, 10, 100, 10, 
	10, 0
]

class << self
	attr_accessor :_lex_key_spans
	private :_lex_key_spans, :_lex_key_spans=
end
self._lex_key_spans = [
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 27, 128, 128, 128, 128, 46, 
	78, 78, 93, 27, 27, 46, 100, 27, 
	33, 1, 93, 78, 103, 128, 128, 128, 
	128, 46, 78, 78, 93, 27, 27, 46, 
	100, 27, 33, 1, 93, 78, 103, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 1, 128, 1, 1, 1, 1, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 1, 1, 1, 1, 9, 1, 1, 
	1, 1, 1, 1, 1, 1, 128, 1, 
	128, 1, 1, 1, 1, 1, 1, 123, 
	1, 128, 128, 66, 128, 128, 1, 128, 
	128, 1, 25, 1, 30, 128, 87, 46, 
	78, 78, 93, 27, 27, 46, 100, 27, 
	33, 1, 93, 78, 103, 128, 128, 128, 
	128, 128, 128, 1, 1, 128, 15, 10, 
	10, 10, 10, 128, 1, 84, 84, 84, 
	84, 84, 84, 1, 1, 38, 1, 96, 
	24, 0, 1, 1, 1, 24, 1, 1, 
	93, 24, 88, 128, 10, 121, 0, 0, 
	8, 8, 0, 0, 93, 0, 0, 0, 
	93, 1, 0, 0, 0, 93, 46, 93, 
	93, 0, 0, 93, 46, 1, 93, 124, 
	27, 27, 27, 0, 103, 103, 103, 0, 
	126, 126, 126, 126, 126, 0, 126, 126, 
	0, 126, 27, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 0, 126, 0, 55, 
	0, 93, 88, 128, 10, 121, 0, 0, 
	8, 8, 0, 0, 93, 0, 0, 0, 
	93, 1, 0, 0, 0, 93, 46, 93, 
	93, 0, 0, 93, 46, 1, 93, 124, 
	27, 27, 27, 0, 103, 103, 103, 0, 
	126, 126, 126, 126, 126, 0, 126, 126, 
	0, 126, 27, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 0, 126, 0, 55, 
	0, 93, 24, 27, 93, 27, 36, 88, 
	128, 10, 27, 58, 58, 29, 128, 10, 
	128, 128, 128, 128, 24, 0, 66, 1, 
	1, 128, 128, 10, 1, 1, 1, 1, 
	2, 1, 66, 1, 2, 128, 128, 128, 
	128, 128, 128, 128, 1, 1, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 1, 128, 128, 24, 1, 1, 1, 
	0, 128, 128, 1, 0, 24, 0, 66, 
	1, 1, 1, 1, 1, 2, 1, 66, 
	1, 2, 128, 1, 1, 1, 127, 128, 
	62, 53, 53, 0, 53, 54, 1, 1, 
	1, 24, 0, 128, 0, 116, 0, 1, 
	1, 0, 53, 1, 1, 1, 24, 1, 
	128, 1, 1, 1, 1, 128, 128, 128, 
	0, 128, 1, 124, 24, 1, 1, 1, 
	0, 1, 0, 128, 128, 24, 0, 1, 
	1, 1, 0, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 4, 0, 66, 
	1, 0, 0, 0, 24, 1, 24, 66, 
	1, 1, 58, 123, 24, 0, 20, 1, 
	14, 15, 1, 1, 27, 128, 128, 1, 
	0, 66, 2, 0, 0, 0, 0, 66, 
	128, 10, 1, 1, 1, 2, 1, 1, 
	2, 1, 2, 0, 1, 66, 2, 123, 
	0, 128, 128, 121, 0, 0, 8, 8, 
	0, 0, 93, 0, 0, 0, 93, 1, 
	0, 0, 0, 93, 46, 93, 93, 0, 
	0, 93, 46, 1, 93, 124, 27, 27, 
	27, 0, 103, 103, 103, 0, 126, 126, 
	126, 126, 126, 0, 126, 126, 0, 126, 
	27, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 0, 
	0, 55, 0, 128, 128, 128, 0, 1, 
	0, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 66, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 0, 
	64, 93, 24, 0, 1, 1, 1, 0, 
	128, 128, 24, 0, 1, 1, 1, 0, 
	128, 128, 1, 0, 24, 0, 66, 1, 
	1, 128, 128, 10, 1, 24, 0, 0, 
	20, 2, 12, 1, 54, 48, 75, 67, 
	15, 58, 0, 1, 0, 67, 67, 67, 
	67, 10, 0, 1, 0, 67, 67, 67, 
	67, 67, 67, 67, 67, 69, 67, 69, 
	67, 1, 2, 1, 66, 1, 2, 128, 
	128, 0, 128, 128, 128, 128, 128, 128, 
	0, 1, 0, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	84, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 0, 64, 0, 38, 38, 1, 
	52, 1, 92, 101, 91, 1
]

class << self
	attr_accessor :_lex_index_offsets
	private :_lex_index_offsets, :_lex_index_offsets=
end
self._lex_index_offsets = [
	0, 0, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 46, 175, 304, 433, 562, 
	609, 688, 767, 861, 889, 917, 964, 1065, 
	1093, 1127, 1129, 1223, 1302, 1406, 1535, 1664, 
	1793, 1922, 1969, 2048, 2127, 2221, 2249, 2277, 
	2324, 2425, 2453, 2487, 2489, 2583, 2662, 2766, 
	2895, 3024, 3153, 3282, 3411, 3540, 3669, 3798, 
	3927, 4056, 4058, 4187, 4189, 4191, 4193, 4195, 
	4324, 4453, 4582, 4711, 4840, 4969, 5098, 5227, 
	5356, 5485, 5614, 5743, 5872, 6001, 6130, 6259, 
	6388, 6517, 6519, 6521, 6523, 6525, 6535, 6537, 
	6539, 6541, 6543, 6545, 6547, 6549, 6551, 6680, 
	6682, 6811, 6813, 6815, 6817, 6819, 6821, 6823, 
	6947, 6949, 7078, 7207, 7274, 7403, 7532, 7534, 
	7663, 7792, 7794, 7820, 7822, 7853, 7982, 8070, 
	8117, 8196, 8275, 8369, 8397, 8425, 8472, 8573, 
	8601, 8635, 8637, 8731, 8810, 8914, 9043, 9172, 
	9301, 9430, 9559, 9688, 9690, 9692, 9821, 9837, 
	9848, 9859, 9870, 9881, 10010, 10012, 10097, 10182, 
	10267, 10352, 10437, 10522, 10524, 10526, 10565, 10567, 
	10664, 10689, 10690, 10692, 10694, 10696, 10721, 10723, 
	10725, 10819, 10844, 10933, 11062, 11073, 11195, 11196, 
	11197, 11206, 11215, 11216, 11217, 11311, 11312, 11313, 
	11314, 11408, 11410, 11411, 11412, 11413, 11507, 11554, 
	11648, 11742, 11743, 11744, 11838, 11885, 11887, 11981, 
	12106, 12134, 12162, 12190, 12191, 12295, 12399, 12503, 
	12504, 12631, 12758, 12885, 13012, 13139, 13140, 13267, 
	13394, 13395, 13522, 13550, 13677, 13804, 13931, 14058, 
	14185, 14312, 14439, 14566, 14693, 14694, 14821, 14822, 
	14878, 14879, 14973, 15062, 15191, 15202, 15324, 15325, 
	15326, 15335, 15344, 15345, 15346, 15440, 15441, 15442, 
	15443, 15537, 15539, 15540, 15541, 15542, 15636, 15683, 
	15777, 15871, 15872, 15873, 15967, 16014, 16016, 16110, 
	16235, 16263, 16291, 16319, 16320, 16424, 16528, 16632, 
	16633, 16760, 16887, 17014, 17141, 17268, 17269, 17396, 
	17523, 17524, 17651, 17679, 17806, 17933, 18060, 18187, 
	18314, 18441, 18568, 18695, 18822, 18823, 18950, 18951, 
	19007, 19008, 19102, 19127, 19155, 19249, 19277, 19314, 
	19403, 19532, 19543, 19571, 19630, 19689, 19719, 19848, 
	19859, 19988, 20117, 20246, 20375, 20400, 20401, 20468, 
	20470, 20472, 20601, 20730, 20741, 20743, 20745, 20747, 
	20749, 20752, 20754, 20821, 20823, 20826, 20955, 21084, 
	21213, 21342, 21471, 21600, 21729, 21731, 21733, 21862, 
	21991, 22120, 22249, 22378, 22507, 22636, 22765, 22894, 
	23023, 23152, 23281, 23410, 23539, 23668, 23797, 23926, 
	24055, 24184, 24313, 24442, 24571, 24700, 24829, 24958, 
	25087, 25216, 25345, 25474, 25603, 25732, 25861, 25990, 
	26119, 26248, 26377, 26506, 26635, 26764, 26893, 27022, 
	27151, 27280, 27409, 27538, 27667, 27796, 27925, 28054, 
	28183, 28312, 28441, 28570, 28699, 28828, 28957, 29086, 
	29215, 29344, 29473, 29602, 29731, 29860, 29989, 30118, 
	30247, 30376, 30505, 30634, 30763, 30892, 31021, 31150, 
	31279, 31408, 31537, 31666, 31795, 31924, 32053, 32182, 
	32311, 32440, 32442, 32571, 32700, 32725, 32727, 32729, 
	32731, 32732, 32861, 32990, 32992, 32993, 33018, 33019, 
	33086, 33088, 33090, 33092, 33094, 33096, 33099, 33101, 
	33168, 33170, 33173, 33302, 33304, 33306, 33308, 33436, 
	33565, 33628, 33682, 33736, 33737, 33791, 33846, 33848, 
	33850, 33852, 33877, 33878, 34007, 34008, 34125, 34126, 
	34128, 34130, 34131, 34185, 34187, 34189, 34191, 34216, 
	34218, 34347, 34349, 34351, 34353, 34355, 34484, 34613, 
	34742, 34743, 34872, 34874, 34999, 35024, 35026, 35028, 
	35030, 35031, 35033, 35034, 35163, 35292, 35317, 35318, 
	35320, 35322, 35324, 35325, 35454, 35583, 35712, 35841, 
	35970, 36099, 36228, 36357, 36486, 36615, 36744, 36873, 
	37002, 37131, 37260, 37389, 37518, 37647, 37652, 37653, 
	37720, 37722, 37723, 37724, 37725, 37750, 37752, 37777, 
	37844, 37846, 37848, 37907, 38031, 38056, 38057, 38078, 
	38080, 38095, 38111, 38113, 38115, 38143, 38272, 38401, 
	38403, 38404, 38471, 38474, 38475, 38476, 38477, 38478, 
	38545, 38674, 38685, 38687, 38689, 38691, 38694, 38696, 
	38698, 38701, 38703, 38706, 38707, 38709, 38776, 38779, 
	38903, 38904, 39033, 39162, 39284, 39285, 39286, 39295, 
	39304, 39305, 39306, 39400, 39401, 39402, 39403, 39497, 
	39499, 39500, 39501, 39502, 39596, 39643, 39737, 39831, 
	39832, 39833, 39927, 39974, 39976, 40070, 40195, 40223, 
	40251, 40279, 40280, 40384, 40488, 40592, 40593, 40720, 
	40847, 40974, 41101, 41228, 41229, 41356, 41483, 41484, 
	41611, 41639, 41766, 41893, 42020, 42147, 42274, 42401, 
	42528, 42655, 42782, 42909, 43036, 43163, 43290, 43417, 
	43418, 43419, 43475, 43476, 43605, 43734, 43863, 43864, 
	43866, 43867, 43996, 44125, 44254, 44383, 44512, 44641, 
	44770, 44899, 45028, 45157, 45286, 45415, 45544, 45673, 
	45802, 45931, 46060, 46189, 46318, 46447, 46576, 46705, 
	46834, 46963, 47092, 47221, 47350, 47479, 47608, 47737, 
	47866, 47995, 48124, 48253, 48382, 48511, 48640, 48769, 
	48898, 49027, 49156, 49285, 49414, 49543, 49672, 49801, 
	49930, 50059, 50188, 50317, 50446, 50575, 50704, 50833, 
	50962, 51091, 51220, 51349, 51478, 51607, 51674, 51803, 
	51932, 52061, 52190, 52319, 52448, 52577, 52706, 52835, 
	52964, 53093, 53222, 53351, 53480, 53609, 53738, 53867, 
	53996, 54125, 54254, 54383, 54512, 54641, 54770, 54899, 
	54900, 54965, 55059, 55084, 55085, 55087, 55089, 55091, 
	55092, 55221, 55350, 55375, 55376, 55378, 55380, 55382, 
	55383, 55512, 55641, 55643, 55644, 55669, 55670, 55737, 
	55739, 55741, 55870, 55999, 56010, 56012, 56037, 56038, 
	56039, 56060, 56063, 56076, 56078, 56133, 56182, 56258, 
	56326, 56342, 56401, 56402, 56404, 56405, 56473, 56541, 
	56609, 56677, 56688, 56689, 56691, 56692, 56760, 56828, 
	56896, 56964, 57032, 57100, 57168, 57236, 57306, 57374, 
	57444, 57512, 57514, 57517, 57519, 57586, 57588, 57591, 
	57720, 57849, 57850, 57979, 58108, 58237, 58366, 58495, 
	58624, 58625, 58627, 58628, 58757, 58886, 59015, 59144, 
	59273, 59402, 59531, 59660, 59789, 59918, 60047, 60176, 
	60305, 60434, 60563, 60692, 60821, 60950, 61079, 61208, 
	61337, 61466, 61595, 61724, 61853, 61982, 62111, 62240, 
	62369, 62498, 62627, 62756, 62885, 63014, 63143, 63272, 
	63401, 63486, 63615, 63744, 63873, 64002, 64131, 64260, 
	64389, 64518, 64647, 64776, 64905, 65034, 65163, 65292, 
	65421, 65550, 65679, 65808, 65937, 66066, 66195, 66324, 
	66453, 66582, 66711, 66840, 66969, 67098, 67227, 67356, 
	67485, 67614, 67743, 67872, 68001, 68130, 68259, 68388, 
	68517, 68646, 68775, 68904, 69033, 69162, 69291, 69420, 
	69549, 69678, 69807, 69936, 70065, 70194, 70323, 70452, 
	70581, 70710, 70839, 70968, 71097, 71226, 71355, 71484, 
	71613, 71742, 71871, 71872, 71937, 71938, 71977, 72016, 
	72018, 72071, 72073, 72166, 72268, 72360
]

class << self
	attr_accessor :_lex_indicies
	private :_lex_indicies, :_lex_indicies=
end
self._lex_indicies = [
	1, 0, 2, 0, 3, 0, 4, 0, 
	5, 0, 6, 0, 7, 0, 8, 0, 
	9, 0, 10, 0, 0, 0, 10, 0, 
	0, 0, 0, 0, 11, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 10, 0, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 14, 
	14, 12, 14, 12, 14, 14, 12, 12, 
	14, 14, 14, 15, 14, 14, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	14, 14, 14, 14, 14, 14, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 12, 14, 12, 12, 13, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 12, 12, 12, 14, 12, 13, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 12, 12, 12, 12, 12, 12, 12, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 12, 12, 12, 12, 14, 12, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 12, 12, 12, 12, 12, 14, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 12, 12, 12, 12, 12, 12, 
	17, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 12, 12, 12, 12, 13, 
	12, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 12, 12, 12, 12, 12, 
	13, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	13, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 13, 18, 19, 19, 19, 18, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 18, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 20, 
	19, 18, 21, 21, 21, 18, 21, 21, 
	21, 21, 21, 22, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 18, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 23, 21, 
	18, 21, 21, 21, 18, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 18, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 24, 21, 18, 
	25, 25, 25, 18, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 18, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 26, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 27, 25, 18, 28, 28, 
	28, 18, 28, 28, 28, 28, 28, 29, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 18, 
	28, 18, 28, 28, 28, 18, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 18, 28, 18, 19, 19, 
	19, 18, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 18, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 30, 19, 18, 31, 31, 31, 
	18, 31, 31, 31, 31, 31, 32, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 18, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 33, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	34, 31, 31, 31, 31, 31, 31, 35, 
	31, 18, 31, 31, 31, 18, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 18, 31, 36, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 37, 18, 37, 
	18, 18, 38, 38, 38, 18, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 18, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	39, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 40, 38, 18, 
	21, 21, 21, 18, 21, 21, 21, 21, 
	21, 22, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 18, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 24, 21, 18, 41, 
	41, 41, 18, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	18, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	41, 41, 41, 41, 41, 41, 41, 42, 
	42, 42, 42, 42, 42, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 42, 
	42, 42, 42, 42, 42, 41, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 45, 
	45, 43, 45, 43, 45, 45, 43, 43, 
	45, 45, 45, 46, 45, 45, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	45, 45, 45, 45, 45, 45, 45, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 43, 45, 43, 43, 44, 45, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 43, 43, 43, 45, 43, 44, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 43, 43, 43, 43, 43, 43, 43, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 43, 43, 43, 43, 45, 43, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 43, 43, 43, 43, 43, 45, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 43, 43, 43, 43, 43, 43, 
	48, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 43, 43, 43, 43, 44, 
	43, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 43, 43, 43, 43, 43, 
	44, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 43, 43, 43, 43, 43, 
	43, 43, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 43, 43, 43, 43, 
	44, 43, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 43, 43, 43, 43, 
	43, 44, 49, 50, 50, 50, 49, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 49, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 51, 
	50, 49, 52, 52, 52, 49, 52, 52, 
	52, 52, 52, 53, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 49, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 54, 52, 
	49, 52, 52, 52, 49, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 49, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 55, 52, 49, 
	56, 56, 56, 49, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 49, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 57, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 58, 56, 49, 59, 59, 
	59, 49, 59, 59, 59, 59, 59, 60, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 49, 
	59, 49, 59, 59, 59, 49, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 49, 59, 49, 50, 50, 
	50, 49, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 49, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 61, 50, 49, 62, 62, 62, 
	49, 62, 62, 62, 62, 62, 63, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 49, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 64, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	65, 62, 62, 62, 62, 62, 62, 66, 
	62, 49, 62, 62, 62, 49, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 49, 62, 67, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 68, 49, 68, 
	49, 49, 69, 69, 69, 49, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 49, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	70, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 71, 69, 49, 
	52, 52, 52, 49, 52, 52, 52, 52, 
	52, 53, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 49, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 55, 52, 49, 72, 
	72, 72, 49, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	49, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	72, 72, 72, 72, 72, 72, 72, 73, 
	73, 73, 73, 73, 73, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 73, 
	73, 73, 73, 73, 73, 72, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 76, 
	76, 74, 76, 74, 76, 76, 74, 74, 
	76, 76, 76, 77, 76, 76, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	76, 76, 76, 76, 76, 76, 76, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 74, 76, 74, 74, 75, 76, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 74, 74, 74, 76, 74, 75, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 74, 74, 74, 74, 74, 74, 74, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 74, 74, 74, 74, 76, 74, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 74, 74, 74, 74, 74, 76, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 74, 74, 74, 74, 74, 74, 
	79, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 74, 74, 74, 74, 75, 
	74, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 74, 74, 74, 74, 74, 
	75, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 74, 74, 74, 74, 74, 
	74, 74, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 74, 74, 74, 74, 
	75, 74, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 74, 74, 74, 74, 
	74, 75, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 81, 81, 82, 81, 82, 
	81, 81, 82, 82, 81, 81, 81, 83, 
	81, 81, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 81, 81, 81, 81, 
	81, 81, 81, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 82, 81, 82, 
	82, 80, 81, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 82, 82, 82, 
	81, 82, 80, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 82, 82, 82, 
	82, 82, 82, 82, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 82, 82, 
	82, 82, 81, 82, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 82, 82, 
	82, 82, 82, 81, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 82, 82, 
	82, 82, 82, 82, 86, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 82, 
	82, 82, 82, 85, 82, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 82, 
	82, 82, 82, 82, 85, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 82, 
	82, 82, 82, 82, 82, 82, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	82, 82, 82, 82, 87, 82, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	82, 82, 82, 82, 82, 87, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	88, 88, 88, 88, 88, 88, 88, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 88, 88, 88, 88, 89, 88, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 88, 88, 88, 88, 88, 89, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	92, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 93, 90, 90, 90, 90, 92, 90, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 90, 90, 90, 90, 91, 90, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 90, 90, 90, 90, 90, 91, 
	93, 90, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 96, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 97, 94, 94, 94, 
	94, 96, 94, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 94, 94, 94, 
	94, 95, 94, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 94, 94, 94, 
	94, 94, 95, 97, 94, 99, 98, 100, 
	98, 101, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 103, 98, 103, 103, 
	103, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 103, 98, 98, 98, 98, 
	104, 105, 98, 106, 98, 107, 108, 109, 
	110, 111, 104, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 112, 98, 113, 
	109, 114, 115, 98, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 116, 117, 
	109, 118, 102, 98, 102, 102, 102, 102, 
	102, 102, 102, 102, 119, 102, 102, 102, 
	102, 102, 102, 102, 102, 120, 102, 102, 
	121, 102, 122, 102, 102, 102, 123, 124, 
	98, 118, 98, 102, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 125, 98, 125, 
	125, 125, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 125, 98, 98, 98, 
	98, 126, 127, 98, 128, 98, 129, 130, 
	131, 132, 133, 126, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 134, 98, 
	135, 131, 136, 137, 98, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 138, 
	139, 131, 100, 95, 98, 95, 95, 95, 
	95, 95, 95, 95, 95, 140, 95, 95, 
	95, 95, 95, 95, 95, 95, 141, 95, 
	95, 142, 95, 143, 95, 95, 95, 144, 
	145, 98, 100, 98, 95, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 96, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 97, 
	98, 98, 98, 98, 96, 98, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	98, 98, 98, 98, 95, 98, 95, 95, 
	95, 95, 95, 146, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	98, 98, 98, 98, 98, 95, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 96, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	97, 98, 98, 98, 98, 96, 98, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 98, 98, 98, 98, 95, 98, 95, 
	95, 95, 95, 147, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 98, 98, 98, 98, 98, 95, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	96, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 97, 98, 98, 98, 98, 96, 98, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 98, 98, 98, 98, 95, 98, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 148, 95, 95, 95, 95, 95, 
	95, 95, 98, 98, 98, 98, 98, 95, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 96, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 97, 98, 98, 98, 98, 96, 
	98, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 98, 98, 98, 98, 95, 
	98, 95, 95, 149, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 98, 98, 98, 98, 98, 
	95, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 96, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 97, 98, 98, 98, 98, 
	96, 98, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 98, 98, 98, 98, 
	95, 98, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 150, 95, 
	95, 95, 95, 95, 98, 98, 98, 98, 
	98, 95, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 96, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 97, 98, 98, 98, 
	98, 96, 98, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 98, 98, 98, 
	98, 95, 98, 95, 95, 95, 95, 146, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 98, 98, 98, 
	98, 98, 95, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 96, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 97, 98, 98, 
	98, 98, 96, 98, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 98, 98, 
	98, 98, 95, 98, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 151, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 98, 98, 
	98, 98, 98, 95, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 96, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 97, 98, 
	98, 98, 98, 96, 98, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 98, 
	98, 98, 98, 95, 98, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	152, 95, 95, 95, 95, 95, 95, 95, 
	153, 95, 95, 95, 95, 95, 95, 98, 
	98, 98, 98, 98, 95, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 96, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 97, 
	98, 98, 98, 98, 96, 98, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	98, 98, 98, 98, 95, 98, 95, 95, 
	95, 95, 154, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	98, 98, 98, 98, 98, 95, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 96, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	97, 98, 98, 98, 98, 96, 98, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 98, 98, 98, 98, 95, 98, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 155, 95, 95, 95, 95, 95, 95, 
	95, 98, 98, 98, 98, 98, 95, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	96, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 97, 98, 98, 98, 98, 96, 98, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 98, 98, 98, 98, 95, 98, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 146, 95, 95, 95, 95, 95, 
	95, 95, 98, 98, 98, 98, 98, 95, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 96, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 97, 98, 98, 98, 98, 96, 
	98, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 98, 98, 98, 98, 95, 
	98, 95, 95, 95, 95, 95, 95, 95, 
	95, 156, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 98, 98, 98, 98, 98, 
	95, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 96, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 97, 98, 98, 98, 98, 
	96, 98, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 98, 98, 98, 98, 
	95, 98, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 146, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 98, 98, 98, 98, 
	98, 95, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 96, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 97, 98, 98, 98, 
	98, 96, 98, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 98, 98, 98, 
	98, 95, 98, 95, 95, 95, 95, 95, 
	95, 95, 157, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 98, 98, 98, 
	98, 98, 95, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 96, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 97, 98, 98, 
	98, 98, 96, 98, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 98, 98, 
	98, 98, 95, 98, 95, 95, 95, 95, 
	95, 95, 95, 95, 158, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 98, 98, 
	98, 98, 98, 95, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 96, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 97, 98, 
	98, 98, 98, 96, 98, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 98, 
	98, 98, 98, 95, 98, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	150, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 98, 
	98, 98, 98, 98, 95, 160, 159, 161, 
	159, 162, 159, 131, 159, 163, 159, 159, 
	159, 159, 159, 159, 159, 164, 159, 165, 
	159, 166, 159, 131, 159, 167, 159, 131, 
	159, 168, 159, 162, 159, 170, 169, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	173, 171, 173, 173, 173, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 173, 
	171, 171, 171, 171, 171, 171, 171, 174, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 171, 175, 171, 171, 172, 171, 
	172, 172, 172, 176, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 171, 171, 171, 171, 171, 172, 
	177, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 179, 171, 179, 179, 179, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 179, 171, 171, 171, 171, 171, 
	171, 171, 180, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 171, 181, 171, 
	171, 178, 171, 178, 178, 178, 182, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 171, 171, 171, 
	171, 171, 178, 183, 184, 186, 185, 187, 
	185, 188, 185, 189, 185, 190, 185, 191, 
	192, 192, 192, 191, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 191, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 192, 192, 192, 192, 192, 192, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 192, 194, 183, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 197, 197, 
	195, 197, 195, 197, 197, 195, 195, 197, 
	197, 197, 198, 197, 197, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 197, 
	197, 197, 197, 197, 197, 197, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	195, 197, 195, 195, 196, 197, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	195, 195, 195, 197, 195, 196, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	195, 195, 195, 195, 195, 195, 195, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 195, 195, 195, 195, 197, 195, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 195, 195, 195, 195, 195, 197, 200, 
	197, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	197, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 201, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 195, 195, 195, 
	195, 196, 195, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 195, 195, 195, 
	195, 195, 196, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 195, 195, 
	195, 195, 196, 195, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 195, 195, 
	195, 195, 195, 196, 200, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	203, 195, 195, 195, 195, 204, 195, 195, 
	195, 195, 195, 205, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 194, 195, 195, 195, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 195, 195, 195, 195, 202, 206, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 195, 195, 195, 205, 195, 202, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 209, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 208, 208, 208, 208, 208, 208, 208, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 208, 208, 208, 208, 207, 208, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 208, 208, 208, 208, 208, 207, 
	211, 210, 195, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 212, 203, 209, 208, 195, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 212, 204, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 203, 
	195, 195, 195, 195, 204, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	195, 195, 195, 195, 202, 206, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	195, 195, 195, 195, 195, 202, 195, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 212, 206, 213, 214, 
	214, 214, 213, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	213, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 215, 214, 213, 216, 216, 
	216, 213, 216, 216, 216, 216, 216, 217, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 213, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 218, 216, 213, 216, 216, 216, 
	213, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 213, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 219, 216, 213, 220, 220, 220, 213, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 213, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 221, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 222, 
	220, 213, 223, 223, 223, 213, 223, 223, 
	223, 223, 223, 224, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 213, 223, 213, 223, 223, 
	223, 213, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 213, 
	223, 213, 214, 214, 214, 213, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 213, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 225, 214, 
	213, 226, 226, 226, 213, 226, 226, 226, 
	226, 226, 227, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 213, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 228, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 229, 226, 226, 226, 
	226, 226, 226, 230, 226, 213, 226, 226, 
	226, 213, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 213, 
	226, 231, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 232, 213, 232, 213, 213, 233, 233, 
	233, 213, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 213, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 234, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 235, 233, 213, 216, 216, 216, 213, 
	216, 216, 216, 216, 216, 217, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 213, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	219, 216, 213, 236, 236, 236, 213, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 213, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 236, 236, 236, 236, 
	236, 236, 236, 237, 237, 237, 237, 237, 
	237, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 237, 237, 237, 237, 237, 
	237, 236, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 239, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 240, 183, 183, 241, 
	183, 239, 183, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 183, 183, 183, 
	183, 238, 183, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 183, 183, 183, 
	183, 183, 238, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 239, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 240, 195, 195, 
	241, 195, 239, 195, 238, 238, 238, 238, 
	238, 238, 242, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 195, 195, 
	195, 195, 238, 195, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 195, 195, 
	195, 195, 195, 238, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 239, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 240, 195, 
	195, 241, 195, 239, 195, 238, 238, 238, 
	238, 238, 238, 238, 238, 243, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 195, 
	195, 195, 195, 238, 195, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 195, 
	195, 195, 195, 195, 238, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 239, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 240, 
	195, 195, 241, 195, 239, 195, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 244, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	195, 195, 195, 195, 238, 195, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	195, 195, 195, 195, 195, 238, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 239, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	240, 195, 195, 241, 195, 239, 195, 238, 
	238, 238, 244, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 195, 195, 195, 195, 238, 195, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 195, 195, 195, 195, 195, 238, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	247, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 248, 245, 245, 245, 245, 247, 245, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 245, 245, 245, 245, 246, 245, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 245, 245, 245, 245, 245, 246, 
	248, 245, 245, 249, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 250, 250, 
	250, 250, 250, 250, 250, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 250, 
	250, 250, 250, 251, 250, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 250, 
	250, 250, 250, 250, 251, 253, 252, 253, 
	252, 252, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 252, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 252, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 252, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 256, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	256, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	250, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 250, 250, 250, 250, 250, 
	250, 250, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 250, 250, 250, 250, 
	259, 250, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 250, 250, 250, 250, 
	250, 259, 260, 256, 261, 262, 261, 261, 
	261, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 261, 256, 256, 263, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 264, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 265, 
	256, 266, 267, 266, 266, 266, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	266, 256, 256, 268, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 269, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 270, 256, 272, 273, 
	272, 272, 272, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 272, 271, 271, 
	274, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 275, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 276, 271, 278, 279, 278, 278, 278, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 278, 277, 277, 280, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 281, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 282, 277, 
	278, 279, 278, 278, 278, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 278, 
	277, 277, 280, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 283, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 282, 277, 278, 284, 278, 
	278, 278, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 278, 277, 277, 280, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	281, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	282, 277, 285, 256, 262, 256, 287, 286, 
	287, 287, 287, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 287, 286, 286, 
	286, 286, 286, 288, 286, 286, 286, 286, 
	286, 286, 286, 289, 286, 290, 286, 292, 
	291, 291, 291, 292, 291, 291, 291, 291, 
	293, 294, 293, 293, 293, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 292, 291, 291, 291, 291, 291, 293, 
	291, 291, 295, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 296, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 297, 291, 291, 298, 291, 
	293, 299, 293, 293, 293, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 293, 
	299, 300, 301, 302, 303, 304, 306, 305, 
	308, 309, 308, 308, 308, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 308, 
	307, 294, 305, 310, 305, 312, 311, 311, 
	311, 312, 311, 311, 311, 311, 313, 314, 
	313, 313, 313, 311, 311, 311, 311, 311, 
	311, 311, 311, 311, 311, 311, 311, 312, 
	311, 311, 311, 311, 311, 313, 311, 311, 
	315, 311, 311, 311, 311, 311, 311, 311, 
	311, 311, 311, 311, 311, 311, 311, 311, 
	311, 311, 311, 311, 311, 311, 311, 311, 
	311, 311, 311, 311, 311, 311, 311, 311, 
	311, 311, 311, 311, 311, 311, 311, 311, 
	311, 311, 311, 311, 311, 311, 311, 311, 
	311, 311, 311, 311, 311, 311, 311, 311, 
	311, 316, 311, 313, 317, 313, 313, 313, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 313, 317, 319, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	320, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 321, 318, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 322, 322, 322, 
	322, 322, 322, 322, 322, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 322, 
	322, 322, 322, 322, 322, 322, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	322, 322, 322, 322, 13, 322, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	322, 322, 322, 322, 322, 13, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	322, 325, 324, 324, 324, 325, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 325, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 326, 326, 326, 326, 326, 326, 326, 
	326, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 327, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 328, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 329, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 324, 324, 
	324, 324, 324, 324, 324, 324, 330, 324, 
	324, 331, 324, 332, 333, 335, 335, 335, 
	335, 335, 335, 335, 335, 334, 336, 336, 
	336, 336, 336, 336, 336, 336, 334, 334, 
	337, 337, 38, 38, 38, 337, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 337, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	39, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 338, 38, 339, 
	340, 341, 341, 38, 38, 38, 341, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 341, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 39, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 342, 38, 
	37, 341, 343, 344, 345, 345, 25, 25, 
	25, 345, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 345, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 26, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 346, 25, 341, 19, 19, 19, 341, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 341, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	347, 19, 337, 25, 25, 25, 337, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 337, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 26, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 27, 25, 
	337, 348, 348, 348, 337, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 337, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 349, 348, 350, 351, 
	351, 348, 348, 348, 351, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 351, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 348, 348, 348, 348, 
	348, 348, 348, 348, 352, 348, 351, 19, 
	19, 19, 351, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	351, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 347, 19, 353, 351, 351, 
	25, 25, 25, 351, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 351, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 26, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 27, 25, 354, 355, 355, 
	355, 354, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 355, 355, 355, 355, 354, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 355, 355, 356, 356, 356, 
	356, 356, 356, 356, 356, 356, 356, 355, 
	355, 355, 355, 355, 355, 355, 356, 356, 
	356, 356, 356, 356, 355, 355, 355, 355, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 355, 355, 355, 356, 356, 
	356, 356, 356, 356, 355, 355, 355, 355, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 355, 355, 355, 355, 355, 
	357, 355, 354, 358, 358, 358, 354, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 354, 358, 354, 359, 
	359, 359, 354, 359, 359, 359, 359, 359, 
	359, 359, 359, 359, 359, 359, 359, 359, 
	359, 359, 359, 359, 359, 359, 359, 359, 
	354, 359, 354, 360, 360, 360, 354, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 354, 360, 354, 354, 
	358, 358, 358, 354, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 354, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 358, 358, 358, 358, 358, 358, 358, 
	361, 361, 361, 361, 361, 361, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	358, 358, 358, 358, 358, 358, 358, 358, 
	361, 361, 361, 361, 361, 361, 358, 354, 
	359, 359, 359, 354, 359, 359, 359, 359, 
	359, 359, 359, 359, 359, 359, 359, 359, 
	359, 359, 359, 359, 359, 359, 359, 359, 
	359, 354, 359, 359, 359, 359, 359, 359, 
	359, 359, 359, 359, 359, 359, 359, 359, 
	359, 359, 359, 359, 359, 359, 359, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 359, 359, 359, 359, 359, 359, 359, 
	362, 362, 362, 362, 362, 362, 359, 359, 
	359, 359, 359, 359, 359, 359, 359, 359, 
	359, 359, 359, 359, 359, 359, 359, 359, 
	359, 359, 359, 359, 359, 359, 359, 359, 
	362, 362, 362, 362, 362, 362, 359, 354, 
	360, 360, 360, 354, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 354, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 360, 360, 360, 360, 360, 360, 360, 
	363, 363, 363, 363, 363, 363, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	363, 363, 363, 363, 363, 363, 360, 364, 
	367, 366, 366, 366, 367, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 367, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	368, 368, 366, 366, 366, 366, 366, 366, 
	366, 368, 368, 368, 368, 368, 368, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 368, 368, 368, 368, 368, 368, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 358, 366, 367, 
	369, 369, 369, 367, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 367, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 369, 369, 369, 369, 369, 369, 369, 
	370, 370, 370, 370, 370, 370, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	370, 370, 370, 370, 370, 370, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 371, 369, 367, 372, 
	372, 372, 367, 372, 372, 372, 372, 372, 
	372, 372, 372, 372, 372, 372, 372, 372, 
	372, 372, 372, 372, 372, 372, 372, 372, 
	367, 372, 372, 372, 372, 372, 372, 372, 
	372, 372, 372, 372, 372, 372, 372, 372, 
	372, 372, 372, 372, 372, 372, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	372, 372, 372, 372, 372, 372, 372, 373, 
	373, 373, 373, 373, 373, 372, 372, 372, 
	372, 372, 372, 372, 372, 372, 372, 372, 
	372, 372, 372, 372, 372, 372, 372, 372, 
	372, 372, 372, 372, 372, 372, 372, 373, 
	373, 373, 373, 373, 373, 372, 372, 372, 
	372, 372, 372, 372, 372, 372, 372, 372, 
	372, 372, 372, 372, 372, 372, 372, 372, 
	372, 372, 372, 374, 372, 367, 375, 375, 
	375, 367, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 367, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 375, 
	375, 375, 375, 375, 375, 375, 376, 376, 
	376, 376, 376, 376, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 376, 376, 
	376, 376, 376, 376, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 367, 375, 367, 375, 375, 375, 
	367, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 367, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 375, 375, 
	375, 375, 375, 375, 375, 376, 376, 376, 
	376, 376, 376, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 376, 376, 376, 
	376, 376, 376, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 367, 375, 377, 367, 376, 376, 376, 
	367, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 367, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 377, 376, 367, 376, 376, 376, 367, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 367, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	365, 376, 365, 367, 373, 373, 373, 367, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 367, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	360, 373, 365, 360, 360, 360, 365, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 365, 360, 367, 369, 
	369, 369, 367, 369, 369, 369, 369, 378, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	367, 369, 369, 369, 369, 369, 378, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 379, 379, 
	379, 379, 379, 379, 379, 379, 379, 379, 
	369, 369, 369, 369, 369, 369, 369, 379, 
	379, 379, 379, 379, 379, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 379, 
	379, 379, 379, 379, 379, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 380, 369, 367, 375, 375, 
	375, 367, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 367, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 381, 381, 381, 
	381, 381, 381, 381, 381, 381, 381, 375, 
	375, 375, 375, 375, 375, 375, 381, 381, 
	381, 381, 381, 381, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 381, 381, 
	381, 381, 381, 381, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 367, 375, 367, 375, 375, 375, 
	367, 375, 375, 375, 375, 378, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 367, 375, 
	375, 375, 375, 375, 378, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 375, 375, 
	375, 375, 375, 375, 375, 382, 382, 382, 
	382, 382, 382, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 382, 382, 382, 
	382, 382, 382, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 380, 375, 367, 375, 375, 375, 367, 
	375, 375, 375, 375, 378, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 367, 375, 375, 
	375, 375, 375, 378, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 375, 375, 375, 
	375, 375, 375, 375, 383, 383, 383, 383, 
	383, 383, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 383, 383, 383, 383, 
	383, 383, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	380, 375, 367, 375, 375, 375, 367, 375, 
	375, 375, 375, 378, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 367, 375, 375, 375, 
	375, 375, 378, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 384, 384, 384, 384, 384, 384, 
	384, 384, 384, 384, 375, 375, 375, 375, 
	375, 375, 375, 384, 384, 384, 384, 384, 
	384, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 384, 384, 384, 384, 384, 
	384, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 380, 
	375, 367, 375, 375, 375, 367, 375, 375, 
	375, 375, 378, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 367, 375, 375, 375, 375, 
	375, 378, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 375, 375, 375, 375, 375, 
	375, 375, 385, 385, 385, 385, 385, 385, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 385, 385, 385, 385, 385, 385, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 380, 375, 
	367, 375, 375, 375, 367, 375, 375, 375, 
	375, 378, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 367, 375, 375, 375, 375, 375, 
	378, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 375, 375, 375, 375, 375, 375, 
	375, 386, 386, 386, 386, 386, 386, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 386, 386, 386, 386, 386, 386, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 380, 375, 367, 
	375, 375, 375, 367, 375, 375, 375, 375, 
	378, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 367, 375, 375, 375, 375, 375, 378, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 387, 
	387, 387, 387, 387, 387, 387, 387, 387, 
	387, 375, 375, 375, 375, 375, 375, 375, 
	387, 387, 387, 387, 387, 387, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	387, 387, 387, 387, 387, 387, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 380, 375, 367, 375, 
	375, 375, 367, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	367, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 387, 387, 
	387, 387, 387, 387, 387, 387, 387, 387, 
	375, 375, 375, 375, 375, 375, 375, 387, 
	387, 387, 387, 387, 387, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 387, 
	387, 387, 387, 387, 387, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 377, 375, 388, 367, 372, 
	372, 372, 367, 372, 372, 372, 372, 378, 
	372, 372, 372, 372, 372, 372, 372, 372, 
	372, 372, 372, 372, 372, 372, 372, 372, 
	367, 372, 372, 372, 372, 372, 378, 372, 
	372, 372, 372, 372, 372, 372, 372, 372, 
	372, 372, 372, 372, 372, 372, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	372, 372, 372, 372, 372, 372, 372, 383, 
	383, 383, 383, 383, 383, 372, 372, 372, 
	372, 372, 372, 372, 372, 372, 372, 372, 
	372, 372, 372, 372, 372, 372, 372, 372, 
	372, 372, 372, 372, 372, 372, 372, 383, 
	383, 383, 383, 383, 383, 372, 372, 372, 
	372, 372, 372, 372, 372, 372, 372, 372, 
	372, 372, 372, 372, 372, 372, 372, 372, 
	372, 372, 372, 380, 372, 389, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	390, 390, 390, 390, 390, 390, 390, 391, 
	391, 391, 391, 391, 391, 390, 390, 390, 
	390, 390, 390, 390, 390, 390, 390, 390, 
	390, 390, 390, 390, 390, 390, 390, 390, 
	390, 390, 390, 390, 390, 390, 390, 391, 
	391, 391, 391, 391, 391, 390, 390, 393, 
	392, 392, 392, 393, 392, 392, 392, 392, 
	392, 394, 392, 392, 392, 392, 392, 392, 
	392, 392, 392, 392, 392, 392, 392, 392, 
	392, 393, 392, 392, 392, 392, 392, 392, 
	392, 392, 395, 392, 392, 392, 392, 392, 
	392, 392, 392, 392, 392, 392, 392, 392, 
	392, 392, 392, 392, 392, 392, 392, 392, 
	392, 392, 392, 392, 392, 392, 392, 392, 
	392, 392, 392, 392, 392, 392, 392, 392, 
	392, 392, 392, 392, 392, 392, 392, 392, 
	392, 392, 392, 392, 392, 392, 392, 392, 
	392, 392, 392, 396, 392, 398, 397, 397, 
	397, 397, 397, 397, 397, 397, 397, 397, 
	397, 397, 397, 397, 397, 397, 397, 397, 
	397, 397, 397, 397, 397, 397, 397, 397, 
	397, 399, 397, 397, 397, 397, 397, 397, 
	397, 397, 397, 397, 397, 397, 397, 397, 
	397, 397, 397, 397, 397, 397, 397, 397, 
	397, 397, 397, 397, 397, 397, 397, 397, 
	397, 397, 397, 397, 397, 397, 397, 397, 
	397, 397, 397, 397, 397, 397, 397, 397, 
	397, 397, 397, 397, 397, 397, 397, 397, 
	397, 397, 397, 397, 400, 397, 401, 401, 
	401, 401, 401, 401, 401, 401, 401, 401, 
	401, 401, 401, 401, 401, 401, 401, 401, 
	401, 401, 401, 401, 401, 401, 401, 401, 
	401, 401, 401, 401, 401, 401, 401, 401, 
	401, 401, 401, 401, 401, 401, 401, 401, 
	401, 401, 401, 401, 401, 401, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	401, 401, 401, 401, 401, 401, 401, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 401, 401, 401, 401, 44, 401, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 401, 401, 401, 401, 401, 44, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 401, 404, 403, 403, 403, 404, 403, 
	403, 403, 403, 403, 403, 403, 403, 403, 
	403, 403, 403, 403, 403, 403, 403, 403, 
	403, 403, 403, 403, 404, 403, 403, 403, 
	403, 403, 403, 403, 403, 403, 403, 403, 
	403, 403, 403, 403, 403, 403, 403, 403, 
	403, 403, 405, 405, 405, 405, 405, 405, 
	405, 405, 403, 403, 403, 403, 403, 403, 
	403, 403, 403, 403, 403, 406, 403, 403, 
	403, 403, 403, 403, 403, 403, 403, 407, 
	403, 403, 403, 403, 403, 403, 403, 403, 
	403, 403, 403, 403, 403, 403, 403, 403, 
	403, 403, 403, 403, 403, 408, 403, 403, 
	403, 403, 403, 403, 403, 403, 403, 403, 
	403, 403, 403, 403, 403, 403, 403, 409, 
	403, 403, 410, 403, 411, 412, 414, 414, 
	414, 414, 414, 414, 414, 414, 413, 415, 
	415, 415, 415, 415, 415, 415, 415, 413, 
	413, 416, 416, 69, 69, 69, 416, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 416, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 70, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 417, 69, 
	418, 419, 420, 420, 69, 69, 69, 420, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 420, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 70, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 421, 
	69, 68, 420, 422, 423, 424, 424, 56, 
	56, 56, 424, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	424, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 57, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 425, 56, 420, 50, 50, 50, 
	420, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 420, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 426, 50, 416, 56, 56, 56, 416, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 416, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 57, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 58, 
	56, 416, 427, 427, 427, 416, 427, 427, 
	427, 427, 427, 427, 427, 427, 427, 427, 
	427, 427, 427, 427, 427, 427, 427, 427, 
	427, 427, 427, 416, 427, 427, 427, 427, 
	427, 427, 427, 427, 427, 427, 427, 427, 
	427, 427, 427, 427, 427, 427, 427, 427, 
	427, 427, 427, 427, 427, 427, 427, 427, 
	427, 427, 427, 427, 427, 427, 427, 427, 
	427, 427, 427, 427, 427, 427, 427, 427, 
	427, 427, 427, 427, 427, 427, 427, 427, 
	427, 427, 427, 427, 427, 427, 427, 427, 
	427, 427, 427, 427, 427, 428, 427, 429, 
	430, 430, 427, 427, 427, 430, 427, 427, 
	427, 427, 427, 427, 427, 427, 427, 427, 
	427, 427, 427, 427, 427, 427, 427, 427, 
	427, 427, 427, 430, 427, 427, 427, 427, 
	427, 427, 427, 427, 427, 427, 427, 427, 
	427, 427, 427, 427, 427, 427, 427, 427, 
	427, 427, 427, 427, 427, 427, 427, 427, 
	427, 427, 427, 427, 427, 427, 427, 427, 
	427, 427, 427, 427, 427, 427, 427, 427, 
	427, 427, 427, 427, 427, 427, 427, 427, 
	427, 427, 427, 427, 427, 427, 427, 427, 
	427, 427, 427, 427, 427, 431, 427, 430, 
	50, 50, 50, 430, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 430, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 426, 50, 432, 430, 
	430, 56, 56, 56, 430, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 430, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 57, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 58, 56, 433, 434, 
	434, 434, 433, 434, 434, 434, 434, 434, 
	434, 434, 434, 434, 434, 434, 434, 434, 
	434, 434, 434, 434, 434, 434, 434, 434, 
	433, 434, 434, 434, 434, 434, 434, 434, 
	434, 434, 434, 434, 434, 434, 434, 434, 
	434, 434, 434, 434, 434, 434, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	434, 434, 434, 434, 434, 434, 434, 435, 
	435, 435, 435, 435, 435, 434, 434, 434, 
	434, 434, 434, 434, 434, 434, 434, 434, 
	434, 434, 434, 434, 434, 434, 434, 434, 
	434, 434, 434, 434, 434, 434, 434, 435, 
	435, 435, 435, 435, 435, 434, 434, 434, 
	434, 434, 434, 434, 434, 434, 434, 434, 
	434, 434, 434, 434, 434, 434, 434, 434, 
	434, 436, 434, 433, 437, 437, 437, 433, 
	437, 437, 437, 437, 437, 437, 437, 437, 
	437, 437, 437, 437, 437, 437, 437, 437, 
	437, 437, 437, 437, 437, 433, 437, 433, 
	438, 438, 438, 433, 438, 438, 438, 438, 
	438, 438, 438, 438, 438, 438, 438, 438, 
	438, 438, 438, 438, 438, 438, 438, 438, 
	438, 433, 438, 433, 439, 439, 439, 433, 
	439, 439, 439, 439, 439, 439, 439, 439, 
	439, 439, 439, 439, 439, 439, 439, 439, 
	439, 439, 439, 439, 439, 433, 439, 433, 
	433, 437, 437, 437, 433, 437, 437, 437, 
	437, 437, 437, 437, 437, 437, 437, 437, 
	437, 437, 437, 437, 437, 437, 437, 437, 
	437, 437, 433, 437, 437, 437, 437, 437, 
	437, 437, 437, 437, 437, 437, 437, 437, 
	437, 437, 437, 437, 437, 437, 437, 437, 
	440, 440, 440, 440, 440, 440, 440, 440, 
	440, 440, 437, 437, 437, 437, 437, 437, 
	437, 440, 440, 440, 440, 440, 440, 437, 
	437, 437, 437, 437, 437, 437, 437, 437, 
	437, 437, 437, 437, 437, 437, 437, 437, 
	437, 437, 437, 437, 437, 437, 437, 437, 
	437, 440, 440, 440, 440, 440, 440, 437, 
	433, 438, 438, 438, 433, 438, 438, 438, 
	438, 438, 438, 438, 438, 438, 438, 438, 
	438, 438, 438, 438, 438, 438, 438, 438, 
	438, 438, 433, 438, 438, 438, 438, 438, 
	438, 438, 438, 438, 438, 438, 438, 438, 
	438, 438, 438, 438, 438, 438, 438, 438, 
	441, 441, 441, 441, 441, 441, 441, 441, 
	441, 441, 438, 438, 438, 438, 438, 438, 
	438, 441, 441, 441, 441, 441, 441, 438, 
	438, 438, 438, 438, 438, 438, 438, 438, 
	438, 438, 438, 438, 438, 438, 438, 438, 
	438, 438, 438, 438, 438, 438, 438, 438, 
	438, 441, 441, 441, 441, 441, 441, 438, 
	433, 439, 439, 439, 433, 439, 439, 439, 
	439, 439, 439, 439, 439, 439, 439, 439, 
	439, 439, 439, 439, 439, 439, 439, 439, 
	439, 439, 433, 439, 439, 439, 439, 439, 
	439, 439, 439, 439, 439, 439, 439, 439, 
	439, 439, 439, 439, 439, 439, 439, 439, 
	442, 442, 442, 442, 442, 442, 442, 442, 
	442, 442, 439, 439, 439, 439, 439, 439, 
	439, 442, 442, 442, 442, 442, 442, 439, 
	439, 439, 439, 439, 439, 439, 439, 439, 
	439, 439, 439, 439, 439, 439, 439, 439, 
	439, 439, 439, 439, 439, 439, 439, 439, 
	439, 442, 442, 442, 442, 442, 442, 439, 
	443, 446, 445, 445, 445, 446, 445, 445, 
	445, 445, 445, 445, 445, 445, 445, 445, 
	445, 445, 445, 445, 445, 445, 445, 445, 
	445, 445, 445, 446, 445, 445, 445, 445, 
	445, 445, 445, 445, 445, 445, 445, 445, 
	445, 445, 445, 445, 445, 445, 445, 445, 
	445, 447, 447, 447, 447, 447, 447, 447, 
	447, 447, 447, 445, 445, 445, 445, 445, 
	445, 445, 447, 447, 447, 447, 447, 447, 
	445, 445, 445, 445, 445, 445, 445, 445, 
	445, 445, 445, 445, 445, 445, 445, 445, 
	445, 445, 445, 445, 445, 445, 445, 445, 
	445, 445, 447, 447, 447, 447, 447, 447, 
	445, 445, 445, 445, 445, 445, 445, 445, 
	445, 445, 445, 445, 445, 445, 445, 445, 
	445, 445, 445, 445, 445, 445, 437, 445, 
	446, 448, 448, 448, 446, 448, 448, 448, 
	448, 448, 448, 448, 448, 448, 448, 448, 
	448, 448, 448, 448, 448, 448, 448, 448, 
	448, 448, 446, 448, 448, 448, 448, 448, 
	448, 448, 448, 448, 448, 448, 448, 448, 
	448, 448, 448, 448, 448, 448, 448, 448, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 448, 448, 448, 448, 448, 448, 
	448, 449, 449, 449, 449, 449, 449, 448, 
	448, 448, 448, 448, 448, 448, 448, 448, 
	448, 448, 448, 448, 448, 448, 448, 448, 
	448, 448, 448, 448, 448, 448, 448, 448, 
	448, 449, 449, 449, 449, 449, 449, 448, 
	448, 448, 448, 448, 448, 448, 448, 448, 
	448, 448, 448, 448, 448, 448, 448, 448, 
	448, 448, 448, 448, 448, 450, 448, 446, 
	451, 451, 451, 446, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 446, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 451, 451, 451, 451, 451, 451, 451, 
	452, 452, 452, 452, 452, 452, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	452, 452, 452, 452, 452, 452, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 453, 451, 446, 454, 
	454, 454, 446, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	446, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	454, 454, 454, 454, 454, 454, 454, 455, 
	455, 455, 455, 455, 455, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 455, 
	455, 455, 455, 455, 455, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 446, 454, 446, 454, 454, 
	454, 446, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 446, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 454, 
	454, 454, 454, 454, 454, 454, 455, 455, 
	455, 455, 455, 455, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 455, 455, 
	455, 455, 455, 455, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 446, 454, 456, 446, 455, 455, 
	455, 446, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 446, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 456, 455, 446, 455, 455, 455, 
	446, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 446, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 444, 455, 444, 446, 452, 452, 452, 
	446, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 446, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 439, 452, 444, 439, 439, 439, 444, 
	439, 439, 439, 439, 439, 439, 439, 439, 
	439, 439, 439, 439, 439, 439, 439, 439, 
	439, 439, 439, 439, 439, 444, 439, 446, 
	448, 448, 448, 446, 448, 448, 448, 448, 
	457, 448, 448, 448, 448, 448, 448, 448, 
	448, 448, 448, 448, 448, 448, 448, 448, 
	448, 446, 448, 448, 448, 448, 448, 457, 
	448, 448, 448, 448, 448, 448, 448, 448, 
	448, 448, 448, 448, 448, 448, 448, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 448, 448, 448, 448, 448, 448, 448, 
	458, 458, 458, 458, 458, 458, 448, 448, 
	448, 448, 448, 448, 448, 448, 448, 448, 
	448, 448, 448, 448, 448, 448, 448, 448, 
	448, 448, 448, 448, 448, 448, 448, 448, 
	458, 458, 458, 458, 458, 458, 448, 448, 
	448, 448, 448, 448, 448, 448, 448, 448, 
	448, 448, 448, 448, 448, 448, 448, 448, 
	448, 448, 448, 448, 459, 448, 446, 454, 
	454, 454, 446, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	446, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	454, 454, 454, 454, 454, 454, 454, 460, 
	460, 460, 460, 460, 460, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 460, 
	460, 460, 460, 460, 460, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 446, 454, 446, 454, 454, 
	454, 446, 454, 454, 454, 454, 457, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 446, 
	454, 454, 454, 454, 454, 457, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 461, 461, 461, 
	461, 461, 461, 461, 461, 461, 461, 454, 
	454, 454, 454, 454, 454, 454, 461, 461, 
	461, 461, 461, 461, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 461, 461, 
	461, 461, 461, 461, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 459, 454, 446, 454, 454, 454, 
	446, 454, 454, 454, 454, 457, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 446, 454, 
	454, 454, 454, 454, 457, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 462, 462, 462, 462, 
	462, 462, 462, 462, 462, 462, 454, 454, 
	454, 454, 454, 454, 454, 462, 462, 462, 
	462, 462, 462, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 462, 462, 462, 
	462, 462, 462, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 459, 454, 446, 454, 454, 454, 446, 
	454, 454, 454, 454, 457, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 446, 454, 454, 
	454, 454, 454, 457, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 463, 463, 463, 463, 463, 
	463, 463, 463, 463, 463, 454, 454, 454, 
	454, 454, 454, 454, 463, 463, 463, 463, 
	463, 463, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 463, 463, 463, 463, 
	463, 463, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	459, 454, 446, 454, 454, 454, 446, 454, 
	454, 454, 454, 457, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 446, 454, 454, 454, 
	454, 454, 457, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 464, 464, 464, 464, 464, 464, 
	464, 464, 464, 464, 454, 454, 454, 454, 
	454, 454, 454, 464, 464, 464, 464, 464, 
	464, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 464, 464, 464, 464, 464, 
	464, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 459, 
	454, 446, 454, 454, 454, 446, 454, 454, 
	454, 454, 457, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 446, 454, 454, 454, 454, 
	454, 457, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 465, 465, 465, 465, 465, 465, 465, 
	465, 465, 465, 454, 454, 454, 454, 454, 
	454, 454, 465, 465, 465, 465, 465, 465, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 465, 465, 465, 465, 465, 465, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 459, 454, 
	446, 454, 454, 454, 446, 454, 454, 454, 
	454, 457, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 446, 454, 454, 454, 454, 454, 
	457, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	466, 466, 466, 466, 466, 466, 466, 466, 
	466, 466, 454, 454, 454, 454, 454, 454, 
	454, 466, 466, 466, 466, 466, 466, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 466, 466, 466, 466, 466, 466, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 459, 454, 446, 
	454, 454, 454, 446, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 446, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 466, 
	466, 466, 466, 466, 466, 466, 466, 466, 
	466, 454, 454, 454, 454, 454, 454, 454, 
	466, 466, 466, 466, 466, 466, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	466, 466, 466, 466, 466, 466, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 456, 454, 467, 446, 
	451, 451, 451, 446, 451, 451, 451, 451, 
	457, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 446, 451, 451, 451, 451, 451, 457, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 462, 
	462, 462, 462, 462, 462, 462, 462, 462, 
	462, 451, 451, 451, 451, 451, 451, 451, 
	462, 462, 462, 462, 462, 462, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	462, 462, 462, 462, 462, 462, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 459, 451, 468, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 469, 469, 469, 469, 469, 469, 469, 
	470, 470, 470, 470, 470, 470, 469, 469, 
	469, 469, 469, 469, 469, 469, 469, 469, 
	469, 469, 469, 469, 469, 469, 469, 469, 
	469, 469, 469, 469, 469, 469, 469, 469, 
	470, 470, 470, 470, 470, 470, 469, 469, 
	472, 471, 471, 471, 472, 471, 471, 471, 
	471, 473, 474, 473, 473, 473, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 472, 471, 471, 471, 471, 471, 
	473, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 475, 471, 473, 476, 
	473, 473, 473, 476, 476, 476, 476, 476, 
	476, 476, 476, 476, 476, 476, 476, 476, 
	476, 476, 476, 476, 476, 473, 476, 477, 
	478, 478, 478, 477, 478, 478, 478, 478, 
	478, 478, 478, 478, 478, 478, 478, 478, 
	478, 478, 478, 478, 478, 478, 478, 478, 
	478, 477, 478, 480, 479, 479, 479, 480, 
	479, 479, 479, 479, 479, 481, 479, 479, 
	479, 479, 479, 479, 479, 479, 479, 479, 
	479, 479, 479, 479, 479, 480, 479, 479, 
	479, 479, 479, 479, 479, 479, 479, 479, 
	479, 479, 479, 479, 479, 479, 479, 479, 
	479, 479, 479, 479, 479, 479, 479, 479, 
	479, 479, 479, 479, 479, 479, 479, 479, 
	479, 479, 479, 479, 479, 479, 479, 479, 
	479, 479, 479, 479, 479, 479, 479, 479, 
	479, 479, 479, 479, 479, 479, 479, 479, 
	479, 479, 479, 479, 479, 479, 479, 482, 
	479, 483, 484, 484, 484, 483, 484, 484, 
	484, 484, 484, 485, 484, 484, 484, 484, 
	484, 484, 484, 484, 484, 484, 484, 484, 
	484, 484, 484, 483, 484, 487, 486, 486, 
	486, 487, 486, 486, 486, 486, 486, 488, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 486, 486, 487, 
	486, 486, 486, 486, 486, 486, 486, 486, 
	489, 486, 491, 490, 490, 490, 490, 490, 
	490, 490, 490, 490, 490, 490, 490, 490, 
	490, 490, 490, 490, 490, 490, 490, 490, 
	490, 490, 490, 490, 490, 490, 492, 490, 
	490, 490, 490, 490, 490, 490, 490, 490, 
	490, 490, 490, 490, 490, 490, 490, 490, 
	490, 490, 490, 490, 490, 490, 490, 490, 
	490, 490, 490, 490, 490, 490, 490, 490, 
	490, 490, 490, 490, 490, 490, 490, 490, 
	490, 490, 490, 490, 490, 490, 490, 490, 
	490, 490, 490, 490, 490, 490, 490, 490, 
	490, 493, 490, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 494, 494, 494, 
	494, 494, 494, 494, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 494, 494, 
	494, 494, 75, 494, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 494, 494, 
	494, 494, 494, 75, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 494, 496, 
	495, 495, 495, 496, 495, 495, 495, 495, 
	495, 497, 495, 495, 495, 495, 495, 495, 
	495, 495, 495, 495, 495, 495, 495, 495, 
	495, 496, 495, 499, 499, 499, 499, 499, 
	499, 499, 499, 499, 499, 499, 499, 499, 
	499, 499, 499, 499, 499, 499, 499, 499, 
	499, 499, 499, 499, 499, 498, 498, 498, 
	498, 498, 498, 499, 499, 499, 499, 499, 
	499, 499, 499, 499, 499, 499, 499, 499, 
	499, 499, 499, 499, 499, 499, 499, 499, 
	499, 499, 499, 499, 499, 498, 499, 499, 
	499, 499, 499, 499, 499, 499, 499, 499, 
	499, 499, 499, 499, 499, 499, 499, 499, 
	499, 499, 499, 499, 499, 499, 499, 499, 
	500, 500, 500, 500, 500, 500, 499, 499, 
	499, 499, 499, 499, 499, 499, 499, 499, 
	499, 499, 499, 499, 499, 499, 499, 499, 
	499, 499, 499, 499, 499, 499, 499, 499, 
	500, 501, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 502, 82, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 503, 503, 503, 503, 503, 503, 503, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 503, 503, 503, 503, 80, 503, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 503, 503, 503, 503, 503, 80, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 503, 504, 504, 504, 504, 504, 
	504, 504, 504, 504, 504, 504, 504, 504, 
	504, 504, 504, 504, 504, 504, 504, 504, 
	504, 504, 504, 504, 504, 504, 504, 504, 
	504, 504, 504, 504, 504, 504, 504, 504, 
	504, 504, 504, 504, 504, 504, 504, 504, 
	504, 504, 504, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 504, 504, 504, 
	504, 504, 504, 504, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 504, 504, 
	504, 504, 85, 504, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 504, 504, 
	504, 504, 504, 85, 505, 505, 505, 505, 
	505, 505, 505, 505, 505, 505, 505, 505, 
	505, 505, 505, 505, 505, 505, 505, 505, 
	505, 505, 505, 505, 505, 505, 505, 505, 
	505, 505, 505, 505, 505, 505, 505, 505, 
	505, 505, 505, 505, 505, 505, 505, 505, 
	505, 505, 505, 505, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 505, 505, 
	505, 505, 505, 505, 505, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 505, 
	505, 505, 505, 87, 505, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 505, 
	505, 505, 505, 505, 87, 507, 508, 508, 
	508, 507, 508, 508, 508, 508, 509, 510, 
	509, 509, 509, 508, 508, 508, 508, 508, 
	508, 508, 508, 508, 508, 508, 508, 507, 
	508, 508, 508, 508, 508, 509, 511, 508, 
	512, 513, 514, 515, 508, 508, 508, 516, 
	517, 508, 517, 508, 514, 508, 508, 508, 
	508, 508, 508, 508, 508, 508, 508, 518, 
	508, 519, 520, 521, 508, 508, 522, 523, 
	522, 522, 524, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	525, 526, 508, 514, 527, 514, 528, 529, 
	530, 531, 532, 533, 506, 506, 534, 506, 
	506, 506, 535, 536, 537, 506, 506, 538, 
	539, 540, 541, 506, 542, 506, 543, 506, 
	508, 544, 508, 517, 508, 506, 545, 545, 
	545, 545, 545, 545, 545, 545, 545, 545, 
	545, 545, 545, 545, 545, 545, 545, 545, 
	545, 545, 545, 545, 545, 545, 545, 545, 
	545, 545, 545, 545, 545, 545, 545, 546, 
	545, 545, 545, 545, 545, 545, 545, 545, 
	545, 545, 545, 545, 545, 545, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	545, 545, 545, 546, 545, 546, 545, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 545, 545, 545, 545, 506, 545, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 545, 545, 545, 545, 545, 506, 509, 
	547, 509, 509, 509, 547, 547, 547, 547, 
	547, 547, 547, 547, 547, 547, 547, 547, 
	547, 547, 547, 547, 547, 547, 509, 547, 
	548, 514, 549, 549, 514, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 549, 549, 
	549, 549, 549, 549, 549, 549, 549, 549, 
	549, 549, 514, 549, 550, 551, 552, 553, 
	554, 554, 554, 554, 554, 554, 554, 554, 
	554, 554, 554, 554, 554, 554, 554, 554, 
	554, 554, 554, 554, 554, 554, 554, 554, 
	554, 554, 554, 554, 554, 554, 554, 554, 
	554, 89, 89, 554, 89, 554, 89, 89, 
	554, 554, 89, 89, 89, 556, 89, 89, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 89, 89, 89, 89, 89, 89, 
	89, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 554, 89, 554, 554, 555, 
	89, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 554, 554, 554, 89, 554, 
	555, 558, 558, 558, 558, 558, 558, 558, 
	558, 558, 558, 558, 558, 558, 558, 558, 
	558, 558, 558, 558, 558, 558, 558, 558, 
	558, 558, 558, 558, 558, 558, 558, 558, 
	558, 558, 558, 558, 558, 558, 558, 558, 
	558, 558, 558, 558, 558, 558, 558, 558, 
	558, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 558, 558, 558, 558, 558, 
	558, 558, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 558, 558, 558, 558, 
	555, 558, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 558, 558, 558, 558, 
	558, 555, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 558, 514, 549, 514, 
	549, 514, 549, 560, 559, 514, 561, 549, 
	514, 549, 562, 514, 554, 554, 554, 554, 
	554, 554, 554, 554, 554, 554, 554, 554, 
	554, 554, 554, 554, 554, 554, 554, 554, 
	554, 554, 554, 554, 554, 554, 554, 554, 
	554, 554, 554, 554, 554, 554, 554, 554, 
	554, 554, 554, 554, 554, 554, 554, 554, 
	554, 554, 554, 554, 554, 554, 554, 554, 
	554, 554, 554, 554, 554, 554, 554, 554, 
	554, 554, 554, 514, 554, 514, 549, 514, 
	514, 549, 545, 545, 545, 545, 545, 545, 
	545, 545, 545, 545, 545, 545, 545, 545, 
	545, 545, 545, 545, 545, 545, 545, 545, 
	545, 545, 545, 545, 545, 545, 545, 545, 
	545, 545, 545, 546, 545, 545, 545, 545, 
	545, 545, 545, 545, 545, 545, 545, 545, 
	545, 545, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 545, 545, 545, 546, 
	545, 546, 545, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 545, 545, 545, 
	545, 522, 545, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 545, 545, 545, 
	545, 545, 522, 563, 563, 563, 563, 563, 
	563, 563, 563, 563, 563, 563, 563, 563, 
	563, 563, 563, 563, 563, 563, 563, 563, 
	563, 563, 563, 563, 563, 563, 563, 563, 
	563, 563, 563, 563, 546, 563, 563, 563, 
	563, 563, 563, 563, 563, 563, 563, 563, 
	563, 563, 563, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 563, 563, 563, 
	546, 563, 546, 563, 522, 522, 522, 522, 
	564, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 563, 563, 
	563, 563, 522, 563, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 563, 563, 
	563, 563, 563, 522, 563, 563, 563, 563, 
	563, 563, 563, 563, 563, 563, 563, 563, 
	563, 563, 563, 563, 563, 563, 563, 563, 
	563, 563, 563, 563, 563, 563, 563, 563, 
	563, 563, 563, 563, 563, 546, 563, 563, 
	563, 563, 563, 563, 563, 563, 563, 563, 
	563, 563, 563, 563, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 563, 563, 
	563, 546, 563, 546, 563, 522, 522, 522, 
	522, 522, 522, 565, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 563, 
	563, 563, 563, 522, 563, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 563, 
	563, 563, 563, 563, 522, 563, 563, 563, 
	563, 563, 563, 563, 563, 563, 563, 563, 
	563, 563, 563, 563, 563, 563, 563, 563, 
	563, 563, 563, 563, 563, 563, 563, 563, 
	563, 563, 563, 563, 563, 563, 546, 563, 
	563, 563, 563, 563, 563, 563, 563, 563, 
	563, 563, 563, 563, 563, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 563, 
	563, 563, 546, 563, 546, 563, 522, 522, 
	522, 522, 522, 522, 522, 522, 566, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	563, 563, 563, 563, 522, 563, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	563, 563, 563, 563, 563, 522, 563, 563, 
	563, 563, 563, 563, 563, 563, 563, 563, 
	563, 563, 563, 563, 563, 563, 563, 563, 
	563, 563, 563, 563, 563, 563, 563, 563, 
	563, 563, 563, 563, 563, 563, 563, 546, 
	563, 563, 563, 563, 563, 563, 563, 563, 
	563, 563, 563, 563, 563, 563, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	563, 563, 563, 546, 563, 546, 563, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 567, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 563, 563, 563, 563, 522, 563, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 563, 563, 563, 563, 563, 522, 563, 
	563, 563, 563, 563, 563, 563, 563, 563, 
	563, 563, 563, 563, 563, 563, 563, 563, 
	563, 563, 563, 563, 563, 563, 563, 563, 
	563, 563, 563, 563, 563, 563, 563, 563, 
	546, 563, 563, 563, 563, 563, 563, 563, 
	563, 563, 563, 563, 563, 563, 563, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 563, 563, 563, 546, 563, 546, 563, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 568, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 563, 563, 563, 563, 522, 563, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 563, 563, 563, 563, 563, 522, 
	563, 563, 563, 563, 563, 563, 563, 563, 
	563, 563, 563, 563, 563, 563, 563, 563, 
	563, 563, 563, 563, 563, 563, 563, 563, 
	563, 563, 563, 563, 563, 563, 563, 563, 
	563, 546, 563, 563, 563, 563, 563, 563, 
	563, 563, 563, 563, 563, 563, 563, 563, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 563, 563, 563, 546, 563, 546, 
	563, 522, 522, 522, 567, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 563, 563, 563, 563, 522, 
	563, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 522, 522, 522, 522, 522, 
	522, 522, 522, 563, 563, 563, 563, 563, 
	522, 562, 554, 510, 554, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 546, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 569, 
	569, 569, 546, 569, 546, 569, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	569, 569, 569, 569, 570, 569, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	569, 569, 569, 569, 569, 506, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 546, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	569, 569, 569, 546, 569, 546, 569, 506, 
	506, 506, 506, 571, 572, 506, 506, 506, 
	506, 506, 573, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 569, 569, 569, 569, 506, 569, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 569, 569, 569, 569, 569, 506, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	546, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 569, 569, 569, 546, 569, 546, 569, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 574, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 569, 569, 569, 569, 506, 569, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 569, 569, 569, 569, 569, 506, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 546, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 569, 569, 569, 546, 569, 546, 
	569, 506, 506, 575, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 569, 569, 569, 569, 506, 
	569, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 569, 569, 569, 569, 569, 
	506, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 546, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 569, 569, 569, 546, 569, 
	546, 569, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	576, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 569, 569, 569, 569, 
	506, 569, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 569, 569, 569, 569, 
	569, 506, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 546, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 569, 569, 569, 546, 
	569, 546, 569, 506, 506, 506, 577, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 569, 569, 569, 
	569, 506, 569, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 569, 569, 569, 
	569, 569, 506, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 546, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 569, 569, 569, 
	546, 569, 546, 569, 506, 506, 506, 506, 
	506, 506, 506, 506, 578, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 569, 569, 
	569, 569, 506, 569, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 569, 569, 
	569, 569, 569, 506, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 546, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 569, 569, 
	569, 546, 569, 546, 569, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 579, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 569, 
	569, 569, 569, 506, 569, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 569, 
	569, 569, 569, 569, 506, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 546, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 569, 
	569, 569, 546, 569, 546, 569, 506, 506, 
	506, 506, 506, 506, 580, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	569, 569, 569, 569, 506, 569, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	569, 569, 569, 569, 569, 506, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 546, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	569, 569, 569, 546, 569, 546, 569, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 569, 569, 569, 569, 581, 569, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 569, 569, 569, 569, 569, 506, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	546, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 569, 569, 569, 546, 569, 546, 569, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 569, 569, 569, 569, 582, 569, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 569, 569, 569, 569, 569, 506, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 546, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 569, 569, 569, 546, 569, 546, 
	569, 506, 506, 506, 506, 506, 506, 506, 
	506, 583, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 569, 569, 569, 569, 506, 
	569, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 569, 569, 569, 569, 569, 
	506, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 546, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 569, 569, 569, 546, 569, 
	546, 569, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 584, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 569, 569, 569, 569, 
	506, 569, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 569, 569, 569, 569, 
	569, 506, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 546, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 569, 569, 569, 546, 
	569, 546, 569, 506, 506, 506, 506, 580, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 569, 569, 569, 
	569, 506, 569, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 569, 569, 569, 
	569, 569, 506, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 546, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 569, 569, 569, 
	546, 569, 546, 569, 506, 506, 506, 506, 
	506, 506, 506, 506, 585, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 569, 569, 
	569, 569, 506, 569, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 569, 569, 
	569, 569, 569, 506, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 546, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 569, 569, 
	569, 546, 569, 546, 569, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 584, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 569, 
	569, 569, 569, 506, 569, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 569, 
	569, 569, 569, 569, 506, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 546, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 569, 
	569, 569, 546, 569, 546, 569, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	569, 569, 569, 569, 506, 569, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 586, 506, 587, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	569, 569, 569, 569, 569, 506, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 546, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	569, 569, 569, 546, 569, 546, 569, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 569, 569, 569, 569, 506, 569, 506, 
	506, 506, 506, 506, 506, 506, 506, 588, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 569, 569, 569, 569, 569, 506, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	546, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 569, 569, 569, 546, 569, 546, 569, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 569, 569, 569, 569, 506, 569, 
	589, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 569, 569, 569, 569, 569, 506, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 546, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 569, 569, 569, 546, 569, 546, 
	569, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 569, 569, 569, 569, 506, 
	569, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 582, 506, 506, 506, 506, 
	506, 506, 506, 569, 569, 569, 569, 569, 
	506, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 546, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 569, 569, 569, 546, 569, 
	546, 569, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 569, 569, 569, 569, 
	506, 569, 506, 506, 506, 582, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 569, 569, 569, 569, 
	569, 506, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 546, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 569, 569, 569, 546, 
	569, 546, 569, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 569, 569, 569, 
	569, 506, 569, 506, 506, 506, 506, 590, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 591, 506, 506, 506, 
	506, 506, 506, 506, 506, 569, 569, 569, 
	569, 569, 506, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 546, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 569, 569, 569, 
	546, 569, 546, 569, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 569, 569, 
	569, 569, 506, 569, 506, 506, 506, 506, 
	506, 506, 592, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 569, 569, 
	569, 569, 569, 506, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 546, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 569, 569, 
	569, 546, 569, 546, 569, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 569, 
	569, 569, 569, 506, 569, 506, 506, 506, 
	506, 506, 506, 506, 506, 593, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 569, 
	569, 569, 569, 569, 506, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 546, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 569, 
	569, 569, 546, 569, 546, 569, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	569, 569, 569, 569, 506, 569, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 582, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	569, 569, 569, 569, 569, 506, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 546, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	569, 569, 569, 546, 569, 546, 569, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 569, 569, 569, 569, 506, 569, 506, 
	506, 506, 506, 594, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 569, 569, 569, 569, 569, 506, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	546, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 569, 569, 569, 546, 569, 546, 569, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 569, 569, 569, 569, 506, 569, 
	595, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 569, 569, 569, 569, 569, 506, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 546, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 569, 569, 569, 546, 569, 546, 
	569, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 569, 569, 569, 569, 506, 
	569, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 582, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 569, 569, 569, 569, 569, 
	506, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 546, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 569, 569, 569, 546, 569, 
	546, 569, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 569, 569, 569, 569, 
	506, 569, 596, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 597, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 569, 569, 569, 569, 
	569, 506, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 546, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 569, 569, 569, 546, 
	569, 546, 569, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 569, 569, 569, 
	569, 506, 569, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 598, 506, 506, 
	506, 506, 506, 506, 506, 569, 569, 569, 
	569, 569, 506, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 546, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 569, 569, 569, 
	546, 569, 546, 569, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 569, 569, 
	569, 569, 506, 569, 506, 506, 506, 506, 
	582, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 569, 569, 
	569, 569, 569, 506, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 546, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 569, 569, 
	569, 546, 569, 546, 569, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 569, 
	569, 569, 569, 506, 569, 599, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 569, 
	569, 569, 569, 569, 506, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 546, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 569, 
	569, 569, 546, 569, 546, 569, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	569, 569, 569, 569, 506, 569, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	589, 506, 506, 506, 506, 506, 506, 506, 
	569, 569, 569, 569, 569, 506, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 546, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	569, 569, 569, 546, 569, 546, 569, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 569, 569, 569, 569, 506, 569, 506, 
	506, 506, 506, 600, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 582, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 569, 569, 569, 569, 569, 506, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	546, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 569, 569, 569, 546, 569, 546, 569, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 569, 569, 569, 569, 506, 569, 
	506, 506, 506, 506, 506, 601, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 569, 569, 569, 569, 569, 506, 
	602, 602, 602, 602, 602, 602, 602, 602, 
	602, 602, 602, 602, 602, 602, 602, 602, 
	602, 602, 602, 602, 602, 602, 602, 602, 
	602, 602, 602, 602, 602, 602, 602, 602, 
	602, 546, 602, 602, 602, 602, 602, 602, 
	602, 602, 602, 602, 602, 602, 602, 602, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 602, 602, 602, 546, 602, 546, 
	602, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 602, 602, 602, 602, 506, 
	602, 506, 506, 506, 506, 506, 506, 506, 
	506, 603, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 602, 602, 602, 602, 602, 
	506, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 546, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 569, 569, 569, 546, 569, 
	546, 569, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 569, 569, 569, 569, 
	506, 569, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 604, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 569, 569, 569, 569, 
	569, 506, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 546, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 569, 569, 569, 546, 
	569, 546, 569, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 569, 569, 569, 
	569, 506, 569, 506, 506, 506, 506, 605, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 569, 569, 569, 
	569, 569, 506, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 546, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 569, 569, 569, 
	546, 569, 546, 569, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 569, 569, 
	569, 569, 506, 569, 506, 506, 506, 606, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 569, 569, 
	569, 569, 569, 506, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 546, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 569, 569, 
	569, 546, 569, 607, 569, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 569, 
	569, 569, 569, 506, 569, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 569, 
	569, 569, 569, 569, 506, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 546, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 569, 
	569, 569, 546, 569, 546, 569, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	569, 569, 569, 569, 506, 569, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 608, 506, 609, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	569, 569, 569, 569, 569, 506, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 546, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	569, 569, 569, 546, 569, 546, 569, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 569, 569, 569, 569, 506, 569, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 610, 506, 506, 506, 506, 506, 506, 
	506, 569, 569, 569, 569, 569, 506, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	546, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 569, 569, 569, 546, 569, 546, 569, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 569, 569, 569, 569, 506, 569, 
	506, 506, 506, 506, 582, 506, 506, 506, 
	611, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 569, 569, 569, 569, 569, 506, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 546, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 569, 569, 569, 546, 569, 546, 
	569, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 569, 569, 569, 569, 506, 
	569, 506, 506, 506, 506, 506, 582, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 569, 569, 569, 569, 569, 
	506, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 546, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 569, 569, 569, 546, 569, 
	546, 569, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 569, 569, 569, 569, 
	506, 569, 506, 506, 506, 582, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 612, 506, 506, 506, 
	506, 506, 506, 506, 569, 569, 569, 569, 
	569, 506, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 546, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 569, 569, 569, 546, 
	569, 546, 569, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 569, 569, 569, 
	569, 506, 569, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 613, 
	506, 506, 506, 506, 506, 569, 569, 569, 
	569, 569, 506, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 546, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 569, 569, 569, 
	546, 569, 546, 569, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 569, 569, 
	569, 569, 506, 569, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 598, 506, 506, 
	506, 506, 506, 506, 506, 506, 569, 569, 
	569, 569, 569, 506, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 546, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 569, 569, 
	569, 546, 569, 546, 569, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 569, 
	569, 569, 569, 506, 569, 614, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 537, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 569, 
	569, 569, 569, 569, 506, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 546, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 569, 
	569, 569, 546, 569, 546, 569, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	569, 569, 569, 569, 506, 569, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 596, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	569, 569, 569, 569, 569, 506, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 546, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	569, 569, 569, 546, 569, 546, 569, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 569, 569, 569, 569, 506, 569, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	582, 506, 506, 506, 506, 506, 506, 506, 
	506, 569, 569, 569, 569, 569, 506, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	546, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 569, 569, 569, 546, 569, 546, 569, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 569, 569, 569, 569, 506, 569, 
	506, 506, 506, 506, 506, 582, 506, 506, 
	506, 506, 506, 506, 506, 582, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 569, 569, 569, 569, 569, 506, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 546, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 569, 569, 569, 546, 569, 546, 
	569, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 569, 569, 569, 569, 506, 
	569, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 615, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 569, 569, 569, 569, 569, 
	506, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 546, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 569, 569, 569, 546, 569, 
	546, 569, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 569, 569, 569, 569, 
	506, 569, 506, 506, 506, 616, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 569, 569, 569, 569, 
	569, 506, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 546, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 569, 569, 569, 546, 
	569, 546, 569, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 569, 569, 569, 
	569, 506, 569, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 617, 
	506, 506, 506, 506, 506, 569, 569, 569, 
	569, 569, 506, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 546, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 569, 569, 569, 
	546, 569, 546, 569, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 569, 569, 
	569, 569, 506, 569, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 598, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 569, 569, 
	569, 569, 569, 506, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 546, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 569, 569, 
	569, 546, 569, 546, 569, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 569, 
	569, 569, 569, 506, 569, 506, 506, 506, 
	506, 618, 506, 506, 506, 619, 506, 506, 
	506, 506, 506, 620, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 569, 
	569, 569, 569, 569, 506, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 546, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 569, 
	569, 569, 546, 569, 546, 569, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	569, 569, 569, 569, 506, 569, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 620, 506, 506, 
	569, 569, 569, 569, 569, 506, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 546, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	569, 569, 569, 546, 569, 546, 569, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 569, 569, 569, 569, 506, 569, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 582, 506, 506, 506, 506, 506, 
	506, 569, 569, 569, 569, 569, 506, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	546, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 569, 569, 569, 546, 569, 546, 569, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 569, 569, 569, 569, 506, 569, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 582, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 569, 569, 569, 569, 569, 506, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 546, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 569, 569, 569, 546, 569, 546, 
	569, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 569, 569, 569, 569, 506, 
	569, 506, 506, 506, 506, 621, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 569, 569, 569, 569, 569, 
	506, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 546, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 569, 569, 569, 546, 569, 
	546, 569, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 569, 569, 569, 569, 
	506, 569, 506, 506, 506, 622, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 623, 624, 506, 506, 
	506, 506, 506, 506, 569, 569, 569, 569, 
	569, 506, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 546, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 569, 569, 569, 546, 
	569, 546, 569, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 569, 569, 569, 
	569, 506, 569, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 582, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 569, 569, 569, 
	569, 569, 506, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 546, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 569, 569, 569, 
	546, 569, 546, 569, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 569, 569, 
	569, 569, 506, 569, 506, 506, 625, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 569, 569, 
	569, 569, 569, 506, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 546, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 569, 569, 
	569, 546, 569, 546, 569, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 569, 
	569, 569, 569, 506, 569, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 598, 506, 506, 506, 506, 506, 569, 
	569, 569, 569, 569, 506, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 546, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 569, 
	569, 569, 546, 569, 546, 569, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	569, 569, 569, 569, 506, 569, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 626, 
	506, 506, 627, 506, 506, 506, 506, 506, 
	569, 569, 569, 569, 569, 506, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 546, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	569, 569, 569, 546, 569, 546, 569, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 569, 569, 569, 569, 506, 569, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 582, 
	506, 569, 569, 569, 569, 569, 506, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	546, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 569, 569, 569, 546, 569, 546, 569, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 569, 569, 569, 569, 506, 569, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 593, 506, 506, 506, 506, 506, 506, 
	506, 506, 569, 569, 569, 569, 569, 506, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 546, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 569, 569, 569, 546, 569, 546, 
	569, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 569, 569, 569, 569, 506, 
	569, 506, 506, 506, 506, 628, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 629, 506, 506, 
	506, 506, 506, 569, 569, 569, 569, 569, 
	506, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 546, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 569, 569, 569, 546, 569, 
	546, 569, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 569, 569, 569, 569, 
	506, 569, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 611, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 569, 569, 569, 569, 
	569, 506, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 546, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 569, 569, 569, 546, 
	569, 546, 569, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 569, 569, 569, 
	569, 506, 569, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 630, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 569, 569, 569, 
	569, 569, 506, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 546, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 569, 569, 569, 
	546, 569, 546, 569, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 569, 569, 
	569, 569, 506, 569, 506, 506, 506, 506, 
	537, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 569, 569, 
	569, 569, 569, 506, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 546, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 569, 569, 
	569, 546, 569, 546, 569, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 569, 
	569, 569, 569, 506, 569, 506, 506, 506, 
	506, 506, 506, 506, 631, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 625, 506, 
	506, 506, 506, 506, 506, 506, 506, 569, 
	569, 569, 569, 569, 506, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 546, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 569, 
	569, 569, 546, 569, 546, 569, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	569, 569, 569, 569, 506, 569, 506, 506, 
	506, 506, 593, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	569, 569, 569, 569, 569, 506, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 546, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	569, 569, 569, 546, 569, 546, 569, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 569, 569, 569, 569, 506, 569, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 632, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 569, 569, 569, 569, 569, 506, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	546, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 569, 569, 569, 546, 569, 546, 569, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 569, 569, 569, 569, 506, 569, 
	506, 506, 506, 633, 506, 506, 506, 506, 
	506, 506, 506, 634, 506, 506, 506, 506, 
	506, 506, 506, 635, 506, 506, 506, 506, 
	506, 506, 569, 569, 569, 569, 569, 506, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 546, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 569, 569, 569, 546, 569, 546, 
	569, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 569, 569, 569, 569, 506, 
	569, 506, 506, 506, 506, 611, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 569, 569, 569, 569, 569, 
	506, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 546, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 569, 569, 569, 546, 569, 
	546, 569, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 569, 569, 569, 569, 
	506, 569, 506, 506, 506, 506, 599, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 569, 569, 569, 569, 
	569, 506, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 546, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 569, 569, 569, 546, 
	569, 546, 569, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 569, 569, 569, 
	569, 506, 569, 506, 506, 506, 506, 506, 
	506, 506, 506, 619, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 569, 569, 569, 
	569, 569, 506, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 546, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 569, 569, 569, 
	546, 569, 546, 569, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 569, 569, 
	569, 569, 506, 569, 506, 506, 506, 506, 
	506, 506, 506, 636, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 569, 569, 
	569, 569, 569, 506, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 546, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 569, 569, 
	569, 546, 569, 546, 569, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 569, 
	569, 569, 569, 506, 569, 506, 506, 506, 
	506, 593, 506, 506, 506, 617, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 569, 
	569, 569, 569, 569, 506, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 546, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 569, 
	569, 569, 546, 569, 546, 569, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	569, 569, 569, 569, 506, 569, 506, 506, 
	506, 506, 506, 506, 506, 506, 637, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	569, 569, 569, 569, 569, 506, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 546, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	569, 569, 569, 546, 569, 546, 569, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 569, 569, 569, 569, 506, 569, 506, 
	506, 506, 506, 638, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 569, 569, 569, 569, 569, 506, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	546, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 569, 569, 569, 546, 569, 546, 569, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 569, 569, 569, 569, 506, 569, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 587, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 569, 569, 569, 569, 569, 506, 
	514, 549, 640, 641, 641, 641, 640, 641, 
	641, 641, 641, 642, 641, 642, 642, 642, 
	641, 641, 641, 641, 641, 641, 641, 641, 
	641, 641, 641, 641, 640, 641, 641, 641, 
	641, 641, 642, 641, 641, 643, 641, 641, 
	641, 641, 641, 641, 641, 641, 641, 641, 
	641, 641, 641, 641, 641, 641, 641, 641, 
	641, 641, 641, 641, 641, 641, 641, 641, 
	641, 641, 641, 639, 639, 639, 639, 639, 
	639, 639, 639, 639, 639, 639, 639, 639, 
	639, 639, 639, 639, 639, 639, 639, 639, 
	639, 639, 639, 639, 639, 641, 644, 641, 
	641, 639, 641, 639, 639, 639, 639, 639, 
	639, 639, 639, 639, 639, 639, 639, 639, 
	639, 639, 639, 639, 639, 639, 639, 639, 
	639, 639, 639, 639, 639, 641, 641, 641, 
	641, 641, 639, 645, 645, 645, 645, 645, 
	645, 645, 645, 645, 645, 645, 645, 645, 
	645, 645, 645, 645, 645, 645, 645, 645, 
	645, 645, 645, 645, 645, 645, 645, 645, 
	645, 645, 645, 645, 92, 645, 645, 645, 
	645, 645, 645, 645, 645, 645, 645, 645, 
	645, 645, 645, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 93, 645, 645, 
	645, 645, 92, 645, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 645, 645, 
	645, 645, 91, 645, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 645, 645, 
	645, 645, 645, 91, 642, 646, 642, 642, 
	642, 646, 646, 646, 646, 646, 646, 646, 
	646, 646, 646, 646, 646, 646, 646, 646, 
	646, 646, 646, 642, 646, 647, 648, 649, 
	650, 651, 645, 652, 654, 655, 655, 655, 
	654, 655, 655, 655, 655, 656, 657, 656, 
	656, 656, 655, 655, 655, 655, 655, 655, 
	655, 655, 655, 655, 655, 655, 654, 655, 
	655, 655, 655, 655, 656, 658, 655, 659, 
	655, 660, 661, 655, 655, 655, 662, 663, 
	655, 663, 655, 660, 655, 655, 655, 655, 
	655, 655, 655, 655, 655, 655, 655, 655, 
	664, 665, 666, 655, 655, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 668, 
	669, 655, 660, 653, 660, 653, 653, 653, 
	653, 653, 653, 653, 653, 653, 653, 653, 
	653, 653, 653, 653, 653, 653, 653, 653, 
	653, 653, 653, 653, 653, 653, 653, 655, 
	670, 655, 663, 655, 653, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 671, 672, 671, 
	671, 671, 671, 671, 671, 671, 671, 671, 
	671, 671, 671, 671, 671, 653, 653, 653, 
	653, 653, 653, 653, 653, 653, 653, 671, 
	671, 671, 671, 671, 672, 671, 653, 653, 
	653, 653, 653, 653, 653, 653, 653, 653, 
	653, 653, 653, 653, 653, 653, 653, 653, 
	653, 653, 653, 653, 653, 653, 653, 653, 
	671, 671, 671, 671, 653, 671, 653, 653, 
	653, 653, 653, 653, 653, 653, 653, 653, 
	653, 653, 653, 653, 653, 653, 653, 653, 
	653, 653, 653, 653, 653, 653, 653, 653, 
	671, 671, 671, 671, 671, 653, 674, 673, 
	675, 656, 676, 656, 656, 656, 676, 676, 
	676, 676, 676, 676, 676, 676, 676, 676, 
	676, 676, 676, 676, 676, 676, 676, 676, 
	656, 676, 677, 660, 678, 678, 660, 678, 
	678, 678, 678, 678, 678, 678, 678, 678, 
	678, 678, 678, 678, 678, 678, 678, 678, 
	678, 678, 678, 678, 678, 678, 678, 678, 
	678, 678, 678, 678, 678, 678, 678, 678, 
	678, 678, 678, 678, 678, 678, 678, 678, 
	678, 678, 678, 678, 678, 678, 678, 678, 
	678, 678, 678, 678, 678, 678, 678, 678, 
	678, 678, 678, 678, 660, 678, 679, 680, 
	681, 682, 660, 678, 660, 678, 660, 678, 
	660, 683, 678, 660, 678, 685, 660, 684, 
	684, 684, 684, 684, 684, 684, 684, 684, 
	684, 684, 684, 684, 684, 684, 684, 684, 
	684, 684, 684, 684, 684, 684, 684, 684, 
	684, 684, 684, 684, 684, 684, 684, 684, 
	684, 684, 684, 684, 684, 684, 684, 684, 
	684, 684, 684, 684, 684, 684, 684, 684, 
	684, 684, 684, 684, 684, 684, 684, 684, 
	684, 684, 684, 684, 684, 684, 660, 684, 
	660, 678, 660, 660, 678, 686, 686, 686, 
	686, 686, 686, 686, 686, 686, 686, 686, 
	686, 686, 686, 686, 686, 686, 686, 686, 
	686, 686, 686, 686, 686, 686, 686, 686, 
	686, 686, 686, 686, 686, 686, 672, 686, 
	686, 686, 686, 686, 686, 686, 686, 686, 
	686, 686, 686, 686, 686, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 686, 
	686, 686, 686, 686, 672, 686, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	686, 686, 686, 686, 667, 686, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	686, 686, 686, 686, 686, 667, 685, 684, 
	657, 684, 660, 678, 688, 687, 687, 687, 
	688, 687, 687, 687, 687, 689, 690, 689, 
	689, 689, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 688, 687, 
	687, 687, 687, 687, 689, 687, 687, 691, 
	687, 100, 692, 687, 693, 687, 694, 100, 
	131, 695, 133, 100, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 696, 687, 
	697, 131, 698, 699, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 131, 
	700, 131, 100, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 701, 687, 687, 
	687, 687, 687, 687, 687, 687, 702, 687, 
	687, 703, 687, 704, 687, 687, 687, 144, 
	145, 687, 100, 687, 705, 705, 705, 705, 
	705, 705, 705, 705, 705, 689, 705, 689, 
	689, 689, 705, 705, 705, 705, 705, 705, 
	705, 705, 705, 705, 705, 705, 705, 705, 
	705, 705, 705, 705, 689, 705, 705, 705, 
	705, 126, 127, 705, 128, 705, 129, 130, 
	131, 132, 133, 126, 705, 705, 705, 705, 
	705, 705, 705, 705, 705, 705, 134, 705, 
	135, 131, 136, 137, 705, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 138, 
	139, 131, 100, 95, 705, 95, 95, 95, 
	95, 95, 95, 95, 95, 140, 95, 95, 
	95, 95, 95, 95, 95, 95, 141, 95, 
	95, 142, 95, 143, 95, 95, 95, 144, 
	145, 705, 100, 705, 95, 706, 707, 707, 
	707, 706, 707, 707, 707, 707, 131, 708, 
	131, 131, 131, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 706, 
	707, 707, 707, 707, 707, 131, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 131, 707, 131, 708, 131, 131, 
	131, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 131, 94, 94, 94, 94, 
	94, 100, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	131, 94, 131, 708, 131, 131, 131, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 131, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 131, 94, 
	709, 131, 708, 131, 131, 131, 710, 710, 
	710, 710, 710, 710, 710, 710, 710, 710, 
	710, 710, 710, 710, 710, 710, 710, 710, 
	131, 710, 710, 710, 710, 710, 710, 710, 
	710, 710, 711, 710, 710, 710, 710, 710, 
	710, 710, 710, 710, 710, 710, 710, 710, 
	710, 710, 710, 710, 710, 131, 710, 131, 
	708, 131, 131, 131, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 131, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 131, 131, 94, 712, 706, 
	131, 706, 714, 713, 716, 717, 716, 716, 
	716, 715, 715, 715, 715, 715, 715, 715, 
	715, 715, 715, 715, 715, 715, 715, 715, 
	715, 715, 715, 716, 715, 718, 706, 706, 
	706, 706, 706, 706, 706, 706, 706, 706, 
	706, 706, 706, 706, 706, 706, 706, 706, 
	706, 706, 706, 706, 706, 706, 706, 706, 
	706, 706, 706, 706, 706, 706, 706, 96, 
	706, 706, 706, 706, 706, 706, 706, 706, 
	706, 706, 706, 706, 706, 706, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	97, 706, 706, 706, 706, 96, 706, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 706, 706, 706, 706, 95, 706, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 706, 706, 706, 706, 706, 95, 719, 
	131, 708, 131, 131, 131, 706, 706, 706, 
	706, 706, 706, 706, 706, 706, 706, 706, 
	706, 706, 706, 706, 706, 706, 706, 131, 
	706, 706, 706, 706, 706, 706, 706, 706, 
	706, 706, 706, 706, 706, 706, 706, 706, 
	706, 706, 706, 706, 706, 706, 706, 706, 
	706, 706, 706, 706, 131, 706, 706, 706, 
	706, 706, 706, 706, 706, 706, 706, 706, 
	706, 706, 706, 706, 706, 706, 706, 706, 
	706, 706, 706, 706, 706, 706, 706, 706, 
	706, 706, 706, 706, 706, 706, 706, 706, 
	706, 706, 706, 706, 706, 706, 706, 706, 
	706, 706, 706, 706, 706, 706, 706, 706, 
	706, 706, 706, 706, 706, 706, 706, 706, 
	706, 706, 706, 100, 706, 720, 721, 722, 
	723, 724, 725, 131, 708, 131, 131, 131, 
	706, 706, 706, 706, 706, 706, 706, 706, 
	706, 706, 706, 706, 706, 706, 706, 706, 
	706, 706, 131, 706, 706, 706, 706, 706, 
	706, 706, 706, 706, 100, 706, 706, 706, 
	706, 706, 706, 706, 706, 706, 706, 706, 
	706, 706, 706, 706, 706, 706, 706, 131, 
	706, 131, 713, 100, 726, 100, 726, 727, 
	728, 727, 727, 727, 715, 715, 715, 715, 
	715, 715, 715, 715, 715, 715, 715, 715, 
	715, 715, 715, 715, 715, 715, 727, 715, 
	729, 726, 730, 730, 730, 730, 730, 730, 
	730, 730, 730, 103, 730, 103, 103, 103, 
	730, 730, 730, 730, 730, 730, 730, 730, 
	730, 730, 730, 730, 730, 730, 730, 730, 
	730, 730, 103, 730, 730, 730, 730, 104, 
	105, 730, 106, 730, 107, 108, 109, 110, 
	111, 104, 730, 730, 730, 730, 730, 730, 
	730, 730, 730, 730, 112, 730, 113, 109, 
	114, 115, 730, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 116, 117, 109, 
	118, 102, 730, 102, 102, 102, 102, 102, 
	102, 102, 102, 119, 102, 102, 102, 102, 
	102, 102, 102, 102, 120, 102, 102, 121, 
	102, 122, 102, 102, 102, 123, 124, 730, 
	118, 730, 102, 131, 726, 731, 726, 732, 
	726, 733, 726, 734, 170, 170, 170, 734, 
	170, 170, 170, 170, 735, 170, 735, 735, 
	735, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 734, 170, 170, 
	170, 170, 170, 735, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 170, 736, 
	170, 170, 172, 170, 172, 172, 172, 176, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 170, 170, 
	170, 170, 170, 172, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 737, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 170, 169, 
	169, 169, 169, 737, 169, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 169, 
	169, 169, 169, 172, 169, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 169, 
	169, 169, 169, 169, 172, 738, 738, 738, 
	738, 738, 738, 738, 738, 738, 173, 738, 
	173, 173, 173, 738, 738, 738, 738, 738, 
	738, 738, 738, 738, 738, 738, 738, 738, 
	738, 738, 738, 738, 738, 173, 738, 738, 
	738, 738, 738, 738, 738, 174, 738, 738, 
	738, 738, 738, 738, 738, 738, 738, 738, 
	738, 738, 738, 738, 738, 738, 738, 738, 
	738, 738, 738, 738, 738, 738, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	738, 175, 738, 738, 172, 738, 172, 172, 
	172, 176, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	738, 738, 738, 738, 738, 172, 739, 738, 
	738, 738, 738, 738, 738, 738, 738, 738, 
	738, 738, 738, 738, 738, 738, 738, 738, 
	738, 738, 738, 738, 738, 738, 738, 738, 
	738, 738, 738, 738, 738, 738, 738, 738, 
	737, 738, 738, 738, 738, 738, 738, 738, 
	738, 738, 738, 738, 738, 738, 738, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 170, 738, 738, 738, 738, 737, 738, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 738, 738, 738, 738, 172, 738, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 740, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 738, 738, 738, 738, 738, 172, 
	177, 738, 742, 741, 741, 741, 742, 741, 
	741, 741, 741, 743, 741, 743, 743, 743, 
	741, 741, 741, 741, 741, 741, 741, 741, 
	741, 741, 741, 741, 742, 741, 741, 741, 
	741, 741, 743, 741, 741, 744, 741, 741, 
	741, 741, 741, 741, 741, 741, 741, 741, 
	741, 741, 741, 741, 741, 741, 741, 741, 
	741, 741, 741, 741, 741, 741, 741, 741, 
	741, 741, 741, 741, 741, 741, 741, 741, 
	741, 741, 741, 741, 741, 741, 741, 741, 
	741, 741, 741, 741, 741, 741, 741, 741, 
	741, 741, 741, 741, 741, 741, 745, 741, 
	741, 741, 741, 741, 741, 741, 746, 741, 
	741, 741, 741, 741, 741, 741, 741, 741, 
	741, 741, 741, 741, 741, 741, 741, 741, 
	741, 741, 741, 741, 741, 747, 741, 743, 
	748, 743, 743, 743, 748, 748, 748, 748, 
	748, 748, 748, 748, 748, 748, 748, 748, 
	748, 748, 748, 748, 748, 748, 743, 748, 
	749, 750, 751, 752, 754, 753, 755, 756, 
	753, 757, 759, 760, 760, 760, 759, 760, 
	760, 760, 760, 761, 762, 761, 761, 761, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 759, 760, 760, 760, 
	760, 760, 761, 760, 760, 763, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 760, 764, 760, 
	760, 758, 760, 758, 758, 758, 758, 758, 
	758, 758, 758, 765, 758, 758, 758, 758, 
	758, 758, 758, 758, 766, 758, 758, 767, 
	758, 768, 758, 758, 758, 760, 760, 760, 
	760, 760, 758, 769, 769, 769, 769, 769, 
	769, 769, 769, 769, 769, 769, 769, 769, 
	769, 769, 769, 769, 769, 769, 769, 769, 
	769, 769, 769, 769, 769, 769, 769, 769, 
	769, 769, 769, 769, 769, 769, 769, 769, 
	769, 769, 769, 769, 769, 769, 769, 769, 
	769, 769, 769, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 769, 769, 769, 
	769, 769, 769, 769, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 769, 769, 
	769, 769, 758, 769, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 769, 769, 
	769, 769, 769, 758, 761, 770, 761, 761, 
	761, 770, 770, 770, 770, 770, 770, 770, 
	770, 770, 770, 770, 770, 770, 770, 770, 
	770, 770, 770, 761, 770, 771, 772, 773, 
	774, 775, 777, 776, 778, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 779, 
	779, 779, 779, 779, 779, 779, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	779, 779, 779, 779, 758, 779, 758, 758, 
	758, 758, 758, 780, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	779, 779, 779, 779, 779, 758, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	779, 779, 779, 779, 779, 779, 779, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 779, 779, 779, 779, 758, 779, 758, 
	758, 758, 758, 781, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 779, 779, 779, 779, 779, 758, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 779, 779, 779, 779, 779, 779, 779, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 779, 779, 779, 779, 758, 779, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 782, 758, 758, 758, 758, 758, 
	758, 758, 779, 779, 779, 779, 779, 758, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 779, 779, 779, 779, 779, 779, 
	779, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 779, 779, 779, 779, 758, 
	779, 758, 758, 783, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 779, 779, 779, 779, 779, 
	758, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 779, 779, 779, 779, 779, 
	779, 779, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 779, 779, 779, 779, 
	758, 779, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 784, 758, 
	758, 758, 758, 758, 779, 779, 779, 779, 
	779, 758, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 779, 779, 779, 779, 
	779, 779, 779, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 779, 779, 779, 
	779, 758, 779, 758, 758, 758, 758, 780, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 779, 779, 779, 
	779, 779, 758, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 779, 779, 779, 
	779, 779, 779, 779, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 779, 779, 
	779, 779, 758, 779, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 785, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 779, 779, 
	779, 779, 779, 758, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 779, 779, 
	779, 779, 779, 779, 779, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 779, 
	779, 779, 779, 758, 779, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	786, 758, 758, 758, 758, 758, 758, 758, 
	787, 758, 758, 758, 758, 758, 758, 779, 
	779, 779, 779, 779, 758, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 779, 
	779, 779, 779, 779, 779, 779, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	779, 779, 779, 779, 758, 779, 758, 758, 
	758, 758, 788, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	779, 779, 779, 779, 779, 758, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	779, 779, 779, 779, 779, 779, 779, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 779, 779, 779, 779, 758, 779, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 789, 758, 758, 758, 758, 758, 758, 
	758, 779, 779, 779, 779, 779, 758, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 779, 779, 779, 779, 779, 779, 779, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 779, 779, 779, 779, 758, 779, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 780, 758, 758, 758, 758, 758, 
	758, 758, 779, 779, 779, 779, 779, 758, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 779, 779, 779, 779, 779, 779, 
	779, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 779, 779, 779, 779, 758, 
	779, 758, 758, 758, 758, 758, 758, 758, 
	758, 790, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 779, 779, 779, 779, 779, 
	758, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 779, 779, 779, 779, 779, 
	779, 779, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 779, 779, 779, 779, 
	758, 779, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 780, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 779, 779, 779, 779, 
	779, 758, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 779, 779, 779, 779, 
	779, 779, 779, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 779, 779, 779, 
	779, 758, 779, 758, 758, 758, 758, 758, 
	758, 758, 791, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 779, 779, 779, 
	779, 779, 758, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 779, 779, 779, 
	779, 779, 779, 779, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 779, 779, 
	779, 779, 758, 779, 758, 758, 758, 758, 
	758, 758, 758, 758, 792, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 779, 779, 
	779, 779, 779, 758, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 779, 779, 779, 
	779, 779, 779, 779, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 779, 779, 
	779, 779, 779, 779, 779, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 779, 
	779, 779, 779, 758, 779, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	784, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 779, 
	779, 779, 779, 779, 758, 794, 194, 194, 
	194, 794, 194, 194, 194, 194, 795, 796, 
	795, 795, 795, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 794, 
	194, 194, 194, 194, 194, 795, 797, 194, 
	798, 194, 799, 800, 194, 801, 194, 802, 
	803, 194, 804, 805, 806, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 807, 
	194, 808, 809, 810, 811, 194, 812, 813, 
	812, 812, 814, 812, 812, 812, 812, 812, 
	812, 812, 812, 812, 812, 812, 812, 812, 
	812, 812, 812, 812, 812, 812, 812, 812, 
	815, 816, 194, 817, 818, 194, 819, 820, 
	821, 822, 823, 824, 793, 793, 825, 793, 
	793, 793, 826, 827, 828, 793, 793, 829, 
	830, 831, 832, 793, 833, 793, 834, 793, 
	835, 836, 194, 817, 194, 793, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 239, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	240, 183, 183, 241, 183, 239, 183, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 183, 183, 183, 183, 793, 183, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 183, 183, 183, 183, 183, 793, 838, 
	837, 837, 839, 837, 840, 842, 843, 841, 
	841, 841, 841, 841, 841, 841, 841, 841, 
	841, 841, 841, 841, 841, 841, 841, 841, 
	841, 841, 841, 841, 841, 841, 841, 841, 
	841, 841, 841, 841, 841, 841, 841, 841, 
	841, 841, 841, 841, 841, 841, 841, 841, 
	841, 841, 841, 841, 841, 841, 841, 841, 
	841, 841, 841, 841, 841, 841, 841, 841, 
	841, 841, 841, 841, 841, 841, 844, 841, 
	846, 845, 847, 848, 849, 795, 850, 795, 
	795, 795, 850, 850, 850, 850, 850, 850, 
	850, 850, 850, 850, 850, 850, 850, 850, 
	850, 850, 850, 850, 795, 850, 852, 851, 
	854, 855, 854, 854, 854, 853, 853, 853, 
	853, 853, 853, 853, 853, 853, 853, 853, 
	853, 853, 853, 853, 853, 853, 853, 854, 
	853, 194, 856, 856, 856, 856, 856, 856, 
	856, 856, 856, 856, 856, 856, 856, 856, 
	856, 856, 856, 856, 856, 856, 856, 856, 
	856, 856, 856, 856, 856, 856, 856, 856, 
	856, 856, 856, 856, 856, 856, 856, 856, 
	856, 856, 856, 856, 856, 856, 856, 856, 
	856, 856, 856, 856, 856, 856, 856, 856, 
	856, 856, 856, 856, 856, 856, 856, 856, 
	856, 856, 194, 856, 857, 858, 859, 860, 
	863, 863, 863, 863, 863, 863, 863, 863, 
	863, 863, 863, 863, 863, 863, 863, 863, 
	863, 863, 863, 863, 863, 863, 863, 863, 
	863, 863, 862, 862, 862, 862, 862, 862, 
	863, 863, 863, 863, 863, 863, 863, 863, 
	863, 863, 863, 863, 863, 863, 863, 863, 
	863, 863, 863, 863, 863, 863, 863, 863, 
	863, 863, 862, 864, 192, 192, 192, 864, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 864, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 192, 192, 
	192, 192, 192, 192, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 192, 866, 
	865, 865, 865, 865, 865, 865, 865, 865, 
	865, 865, 865, 865, 865, 865, 865, 865, 
	865, 865, 865, 865, 865, 865, 194, 865, 
	867, 869, 868, 868, 868, 868, 868, 868, 
	868, 868, 868, 868, 868, 868, 868, 868, 
	868, 868, 868, 868, 194, 868, 194, 183, 
	870, 870, 870, 870, 870, 870, 870, 870, 
	870, 870, 865, 865, 865, 194, 865, 870, 
	870, 870, 870, 870, 870, 870, 870, 870, 
	870, 865, 865, 865, 194, 194, 865, 871, 
	856, 194, 856, 856, 872, 872, 872, 856, 
	872, 872, 872, 872, 872, 872, 872, 872, 
	872, 872, 872, 872, 872, 872, 872, 872, 
	872, 872, 872, 872, 872, 856, 872, 856, 
	856, 856, 856, 856, 856, 856, 856, 856, 
	856, 856, 856, 856, 856, 856, 856, 856, 
	856, 856, 856, 856, 856, 856, 856, 856, 
	856, 856, 856, 856, 856, 856, 856, 856, 
	874, 875, 856, 876, 197, 877, 875, 856, 
	856, 878, 879, 856, 879, 856, 197, 856, 
	856, 856, 856, 856, 856, 856, 856, 856, 
	856, 880, 856, 881, 882, 883, 856, 884, 
	873, 873, 873, 873, 873, 873, 873, 873, 
	873, 873, 873, 873, 873, 873, 873, 873, 
	873, 873, 873, 873, 873, 873, 873, 873, 
	873, 873, 885, 856, 856, 197, 873, 197, 
	873, 873, 873, 873, 873, 873, 873, 873, 
	873, 873, 873, 873, 873, 873, 873, 873, 
	873, 873, 873, 873, 873, 873, 873, 873, 
	873, 873, 856, 886, 856, 879, 856, 873, 
	887, 887, 887, 887, 887, 887, 887, 887, 
	887, 887, 887, 887, 887, 887, 887, 887, 
	887, 887, 887, 887, 887, 887, 887, 887, 
	887, 887, 887, 887, 887, 887, 887, 887, 
	887, 888, 887, 887, 887, 887, 887, 887, 
	887, 887, 887, 887, 887, 887, 887, 887, 
	873, 873, 873, 873, 873, 873, 873, 873, 
	873, 873, 887, 887, 887, 889, 887, 888, 
	887, 873, 873, 873, 873, 873, 873, 873, 
	873, 873, 873, 873, 873, 873, 873, 873, 
	873, 873, 873, 873, 873, 873, 873, 873, 
	873, 873, 873, 887, 887, 887, 887, 873, 
	887, 873, 873, 873, 873, 873, 873, 873, 
	873, 873, 873, 873, 873, 873, 873, 873, 
	873, 873, 873, 873, 873, 873, 873, 873, 
	873, 873, 873, 887, 887, 887, 887, 887, 
	873, 891, 890, 892, 894, 895, 893, 893, 
	893, 893, 893, 893, 893, 893, 893, 893, 
	893, 893, 893, 893, 893, 893, 893, 893, 
	893, 893, 893, 893, 893, 893, 893, 893, 
	893, 893, 893, 893, 893, 893, 893, 893, 
	893, 893, 893, 893, 893, 893, 893, 893, 
	893, 893, 893, 893, 893, 893, 893, 893, 
	893, 893, 893, 893, 893, 893, 893, 893, 
	893, 893, 893, 893, 893, 896, 893, 898, 
	899, 897, 900, 901, 902, 903, 197, 887, 
	887, 197, 887, 887, 887, 887, 887, 887, 
	887, 887, 887, 887, 887, 887, 887, 887, 
	887, 887, 887, 887, 887, 887, 887, 887, 
	887, 887, 887, 887, 887, 887, 887, 887, 
	887, 887, 887, 887, 887, 887, 887, 887, 
	887, 887, 887, 887, 887, 887, 887, 887, 
	887, 887, 887, 887, 887, 887, 887, 887, 
	887, 887, 887, 887, 887, 887, 887, 197, 
	887, 887, 887, 887, 887, 887, 887, 887, 
	887, 887, 887, 887, 887, 887, 887, 887, 
	887, 887, 887, 887, 887, 887, 887, 887, 
	887, 887, 887, 887, 887, 887, 887, 887, 
	887, 887, 887, 887, 887, 887, 887, 887, 
	887, 887, 887, 887, 887, 887, 887, 887, 
	887, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 887, 887, 887, 887, 887, 
	887, 887, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 887, 887, 887, 887, 
	196, 887, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 887, 887, 887, 887, 
	887, 196, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 887, 197, 887, 197, 
	887, 197, 887, 197, 904, 887, 197, 887, 
	197, 887, 197, 197, 887, 197, 887, 905, 
	906, 856, 907, 194, 856, 817, 194, 856, 
	856, 856, 856, 856, 856, 856, 856, 856, 
	856, 856, 856, 856, 856, 856, 856, 856, 
	856, 856, 856, 856, 856, 856, 856, 856, 
	856, 856, 856, 856, 856, 856, 856, 856, 
	856, 856, 856, 856, 856, 856, 856, 856, 
	856, 856, 856, 856, 856, 856, 856, 856, 
	856, 856, 856, 856, 856, 856, 856, 856, 
	856, 856, 856, 856, 856, 856, 194, 856, 
	194, 866, 856, 910, 909, 909, 909, 910, 
	909, 909, 909, 909, 911, 912, 911, 911, 
	911, 909, 909, 909, 909, 909, 909, 909, 
	909, 909, 909, 909, 909, 910, 909, 909, 
	909, 909, 909, 911, 909, 909, 909, 909, 
	909, 909, 909, 909, 909, 909, 909, 909, 
	909, 909, 909, 909, 909, 909, 909, 909, 
	909, 909, 909, 909, 909, 909, 909, 909, 
	909, 909, 909, 909, 913, 913, 913, 913, 
	913, 913, 913, 913, 913, 913, 913, 913, 
	913, 913, 913, 913, 913, 913, 913, 913, 
	913, 913, 913, 913, 913, 913, 909, 914, 
	909, 909, 913, 909, 913, 913, 913, 913, 
	913, 913, 913, 913, 913, 913, 913, 913, 
	913, 913, 913, 913, 913, 913, 913, 913, 
	913, 913, 913, 913, 913, 913, 909, 915, 
	915, 915, 915, 915, 915, 915, 915, 915, 
	915, 915, 915, 915, 915, 915, 915, 915, 
	915, 915, 915, 915, 915, 915, 915, 915, 
	915, 915, 915, 915, 915, 915, 915, 915, 
	915, 915, 915, 915, 915, 915, 915, 915, 
	915, 915, 915, 915, 915, 915, 915, 915, 
	915, 915, 915, 915, 915, 915, 915, 915, 
	915, 915, 915, 915, 915, 915, 915, 915, 
	915, 916, 916, 916, 916, 916, 916, 916, 
	916, 916, 916, 916, 916, 916, 916, 916, 
	916, 916, 916, 916, 916, 916, 916, 916, 
	916, 916, 916, 915, 915, 915, 915, 916, 
	915, 916, 916, 916, 916, 916, 916, 916, 
	916, 916, 916, 916, 916, 916, 916, 916, 
	916, 916, 916, 916, 916, 916, 916, 916, 
	916, 916, 916, 915, 915, 915, 915, 915, 
	916, 917, 917, 917, 917, 917, 917, 917, 
	917, 917, 917, 917, 917, 917, 917, 917, 
	917, 917, 917, 917, 917, 917, 917, 917, 
	917, 917, 917, 917, 917, 917, 917, 917, 
	917, 917, 917, 917, 917, 917, 917, 917, 
	917, 917, 917, 917, 917, 917, 917, 917, 
	917, 918, 918, 918, 918, 918, 918, 918, 
	918, 918, 918, 917, 917, 917, 917, 917, 
	917, 917, 918, 918, 918, 918, 918, 918, 
	918, 918, 918, 918, 918, 918, 918, 918, 
	918, 918, 918, 918, 918, 918, 918, 918, 
	918, 918, 918, 918, 917, 917, 917, 917, 
	918, 917, 918, 918, 918, 918, 918, 918, 
	918, 918, 918, 918, 918, 918, 918, 918, 
	918, 918, 918, 918, 918, 918, 918, 918, 
	918, 918, 918, 918, 917, 917, 917, 917, 
	917, 918, 921, 920, 920, 920, 921, 920, 
	920, 920, 920, 920, 920, 920, 920, 920, 
	920, 920, 920, 920, 920, 920, 920, 920, 
	920, 920, 920, 920, 921, 920, 920, 920, 
	920, 920, 920, 920, 920, 920, 920, 920, 
	920, 920, 920, 920, 920, 920, 920, 920, 
	920, 920, 922, 922, 922, 922, 922, 922, 
	922, 922, 920, 920, 920, 920, 920, 920, 
	920, 920, 920, 920, 920, 923, 920, 920, 
	920, 920, 920, 920, 920, 920, 920, 924, 
	920, 920, 920, 920, 920, 920, 920, 920, 
	920, 920, 920, 920, 920, 920, 920, 920, 
	920, 920, 920, 920, 920, 925, 920, 920, 
	920, 920, 920, 920, 920, 920, 920, 920, 
	920, 920, 920, 920, 920, 920, 920, 926, 
	920, 920, 927, 920, 928, 929, 931, 931, 
	931, 931, 931, 931, 931, 931, 930, 932, 
	932, 932, 932, 932, 932, 932, 932, 930, 
	930, 933, 933, 233, 233, 233, 933, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 933, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 234, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 934, 233, 
	935, 936, 937, 937, 233, 233, 233, 937, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 937, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 234, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 938, 
	233, 232, 937, 939, 940, 941, 941, 220, 
	220, 220, 941, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	941, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 221, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 942, 220, 937, 214, 214, 214, 
	937, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 937, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 943, 214, 933, 220, 220, 220, 933, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 933, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 221, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 222, 
	220, 933, 944, 944, 944, 933, 944, 944, 
	944, 944, 944, 944, 944, 944, 944, 944, 
	944, 944, 944, 944, 944, 944, 944, 944, 
	944, 944, 944, 933, 944, 944, 944, 944, 
	944, 944, 944, 944, 944, 944, 944, 944, 
	944, 944, 944, 944, 944, 944, 944, 944, 
	944, 944, 944, 944, 944, 944, 944, 944, 
	944, 944, 944, 944, 944, 944, 944, 944, 
	944, 944, 944, 944, 944, 944, 944, 944, 
	944, 944, 944, 944, 944, 944, 944, 944, 
	944, 944, 944, 944, 944, 944, 944, 944, 
	944, 944, 944, 944, 944, 945, 944, 946, 
	947, 947, 944, 944, 944, 947, 944, 944, 
	944, 944, 944, 944, 944, 944, 944, 944, 
	944, 944, 944, 944, 944, 944, 944, 944, 
	944, 944, 944, 947, 944, 944, 944, 944, 
	944, 944, 944, 944, 944, 944, 944, 944, 
	944, 944, 944, 944, 944, 944, 944, 944, 
	944, 944, 944, 944, 944, 944, 944, 944, 
	944, 944, 944, 944, 944, 944, 944, 944, 
	944, 944, 944, 944, 944, 944, 944, 944, 
	944, 944, 944, 944, 944, 944, 944, 944, 
	944, 944, 944, 944, 944, 944, 944, 944, 
	944, 944, 944, 944, 944, 948, 944, 947, 
	214, 214, 214, 947, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 947, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 943, 214, 949, 947, 
	947, 220, 220, 220, 947, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 947, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 221, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 222, 220, 950, 951, 
	951, 951, 950, 951, 951, 951, 951, 951, 
	951, 951, 951, 951, 951, 951, 951, 951, 
	951, 951, 951, 951, 951, 951, 951, 951, 
	950, 951, 951, 951, 951, 951, 951, 951, 
	951, 951, 951, 951, 951, 951, 951, 951, 
	951, 951, 951, 951, 951, 951, 952, 952, 
	952, 952, 952, 952, 952, 952, 952, 952, 
	951, 951, 951, 951, 951, 951, 951, 952, 
	952, 952, 952, 952, 952, 951, 951, 951, 
	951, 951, 951, 951, 951, 951, 951, 951, 
	951, 951, 951, 951, 951, 951, 951, 951, 
	951, 951, 951, 951, 951, 951, 951, 952, 
	952, 952, 952, 952, 952, 951, 951, 951, 
	951, 951, 951, 951, 951, 951, 951, 951, 
	951, 951, 951, 951, 951, 951, 951, 951, 
	951, 953, 951, 950, 954, 954, 954, 950, 
	954, 954, 954, 954, 954, 954, 954, 954, 
	954, 954, 954, 954, 954, 954, 954, 954, 
	954, 954, 954, 954, 954, 950, 954, 950, 
	955, 955, 955, 950, 955, 955, 955, 955, 
	955, 955, 955, 955, 955, 955, 955, 955, 
	955, 955, 955, 955, 955, 955, 955, 955, 
	955, 950, 955, 950, 956, 956, 956, 950, 
	956, 956, 956, 956, 956, 956, 956, 956, 
	956, 956, 956, 956, 956, 956, 956, 956, 
	956, 956, 956, 956, 956, 950, 956, 950, 
	950, 954, 954, 954, 950, 954, 954, 954, 
	954, 954, 954, 954, 954, 954, 954, 954, 
	954, 954, 954, 954, 954, 954, 954, 954, 
	954, 954, 950, 954, 954, 954, 954, 954, 
	954, 954, 954, 954, 954, 954, 954, 954, 
	954, 954, 954, 954, 954, 954, 954, 954, 
	957, 957, 957, 957, 957, 957, 957, 957, 
	957, 957, 954, 954, 954, 954, 954, 954, 
	954, 957, 957, 957, 957, 957, 957, 954, 
	954, 954, 954, 954, 954, 954, 954, 954, 
	954, 954, 954, 954, 954, 954, 954, 954, 
	954, 954, 954, 954, 954, 954, 954, 954, 
	954, 957, 957, 957, 957, 957, 957, 954, 
	950, 955, 955, 955, 950, 955, 955, 955, 
	955, 955, 955, 955, 955, 955, 955, 955, 
	955, 955, 955, 955, 955, 955, 955, 955, 
	955, 955, 950, 955, 955, 955, 955, 955, 
	955, 955, 955, 955, 955, 955, 955, 955, 
	955, 955, 955, 955, 955, 955, 955, 955, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 955, 955, 955, 955, 955, 955, 
	955, 958, 958, 958, 958, 958, 958, 955, 
	955, 955, 955, 955, 955, 955, 955, 955, 
	955, 955, 955, 955, 955, 955, 955, 955, 
	955, 955, 955, 955, 955, 955, 955, 955, 
	955, 958, 958, 958, 958, 958, 958, 955, 
	950, 956, 956, 956, 950, 956, 956, 956, 
	956, 956, 956, 956, 956, 956, 956, 956, 
	956, 956, 956, 956, 956, 956, 956, 956, 
	956, 956, 950, 956, 956, 956, 956, 956, 
	956, 956, 956, 956, 956, 956, 956, 956, 
	956, 956, 956, 956, 956, 956, 956, 956, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 956, 956, 956, 956, 956, 956, 
	956, 959, 959, 959, 959, 959, 959, 956, 
	956, 956, 956, 956, 956, 956, 956, 956, 
	956, 956, 956, 956, 956, 956, 956, 956, 
	956, 956, 956, 956, 956, 956, 956, 956, 
	956, 959, 959, 959, 959, 959, 959, 956, 
	960, 963, 962, 962, 962, 963, 962, 962, 
	962, 962, 962, 962, 962, 962, 962, 962, 
	962, 962, 962, 962, 962, 962, 962, 962, 
	962, 962, 962, 963, 962, 962, 962, 962, 
	962, 962, 962, 962, 962, 962, 962, 962, 
	962, 962, 962, 962, 962, 962, 962, 962, 
	962, 964, 964, 964, 964, 964, 964, 964, 
	964, 964, 964, 962, 962, 962, 962, 962, 
	962, 962, 964, 964, 964, 964, 964, 964, 
	962, 962, 962, 962, 962, 962, 962, 962, 
	962, 962, 962, 962, 962, 962, 962, 962, 
	962, 962, 962, 962, 962, 962, 962, 962, 
	962, 962, 964, 964, 964, 964, 964, 964, 
	962, 962, 962, 962, 962, 962, 962, 962, 
	962, 962, 962, 962, 962, 962, 962, 962, 
	962, 962, 962, 962, 962, 962, 954, 962, 
	963, 965, 965, 965, 963, 965, 965, 965, 
	965, 965, 965, 965, 965, 965, 965, 965, 
	965, 965, 965, 965, 965, 965, 965, 965, 
	965, 965, 963, 965, 965, 965, 965, 965, 
	965, 965, 965, 965, 965, 965, 965, 965, 
	965, 965, 965, 965, 965, 965, 965, 965, 
	966, 966, 966, 966, 966, 966, 966, 966, 
	966, 966, 965, 965, 965, 965, 965, 965, 
	965, 966, 966, 966, 966, 966, 966, 965, 
	965, 965, 965, 965, 965, 965, 965, 965, 
	965, 965, 965, 965, 965, 965, 965, 965, 
	965, 965, 965, 965, 965, 965, 965, 965, 
	965, 966, 966, 966, 966, 966, 966, 965, 
	965, 965, 965, 965, 965, 965, 965, 965, 
	965, 965, 965, 965, 965, 965, 965, 965, 
	965, 965, 965, 965, 965, 967, 965, 963, 
	968, 968, 968, 963, 968, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 968, 968, 
	968, 963, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 968, 969, 
	969, 969, 969, 969, 969, 969, 969, 969, 
	969, 968, 968, 968, 968, 968, 968, 968, 
	969, 969, 969, 969, 969, 969, 968, 968, 
	968, 968, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 968, 968, 
	969, 969, 969, 969, 969, 969, 968, 968, 
	968, 968, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 968, 970, 968, 963, 971, 
	971, 971, 963, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	963, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	971, 971, 971, 971, 971, 971, 971, 972, 
	972, 972, 972, 972, 972, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 972, 
	972, 972, 972, 972, 972, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 963, 971, 963, 971, 971, 
	971, 963, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 963, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 971, 
	971, 971, 971, 971, 971, 971, 972, 972, 
	972, 972, 972, 972, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 972, 972, 
	972, 972, 972, 972, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 963, 971, 973, 963, 972, 972, 
	972, 963, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 963, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 973, 972, 963, 972, 972, 972, 
	963, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 963, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 961, 972, 961, 963, 969, 969, 969, 
	963, 969, 969, 969, 969, 969, 969, 969, 
	969, 969, 969, 969, 969, 969, 969, 969, 
	969, 969, 969, 969, 969, 969, 963, 969, 
	969, 969, 969, 969, 969, 969, 969, 969, 
	969, 969, 969, 969, 969, 969, 969, 969, 
	969, 969, 969, 969, 969, 969, 969, 969, 
	969, 969, 969, 969, 969, 969, 969, 969, 
	969, 969, 969, 969, 969, 969, 969, 969, 
	969, 969, 969, 969, 969, 969, 969, 969, 
	969, 969, 969, 969, 969, 969, 969, 969, 
	969, 969, 969, 969, 969, 969, 969, 969, 
	969, 969, 969, 969, 969, 969, 969, 969, 
	969, 969, 969, 969, 969, 969, 969, 969, 
	969, 969, 969, 969, 969, 969, 969, 969, 
	969, 969, 969, 969, 969, 969, 969, 969, 
	969, 956, 969, 961, 956, 956, 956, 961, 
	956, 956, 956, 956, 956, 956, 956, 956, 
	956, 956, 956, 956, 956, 956, 956, 956, 
	956, 956, 956, 956, 956, 961, 956, 963, 
	965, 965, 965, 963, 965, 965, 965, 965, 
	974, 965, 965, 965, 965, 965, 965, 965, 
	965, 965, 965, 965, 965, 965, 965, 965, 
	965, 963, 965, 965, 965, 965, 965, 974, 
	965, 965, 965, 965, 965, 965, 965, 965, 
	965, 965, 965, 965, 965, 965, 965, 975, 
	975, 975, 975, 975, 975, 975, 975, 975, 
	975, 965, 965, 965, 965, 965, 965, 965, 
	975, 975, 975, 975, 975, 975, 965, 965, 
	965, 965, 965, 965, 965, 965, 965, 965, 
	965, 965, 965, 965, 965, 965, 965, 965, 
	965, 965, 965, 965, 965, 965, 965, 965, 
	975, 975, 975, 975, 975, 975, 965, 965, 
	965, 965, 965, 965, 965, 965, 965, 965, 
	965, 965, 965, 965, 965, 965, 965, 965, 
	965, 965, 965, 965, 976, 965, 963, 971, 
	971, 971, 963, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	963, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 977, 977, 
	977, 977, 977, 977, 977, 977, 977, 977, 
	971, 971, 971, 971, 971, 971, 971, 977, 
	977, 977, 977, 977, 977, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 977, 
	977, 977, 977, 977, 977, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 963, 971, 963, 971, 971, 
	971, 963, 971, 971, 971, 971, 974, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 963, 
	971, 971, 971, 971, 971, 974, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 978, 978, 978, 
	978, 978, 978, 978, 978, 978, 978, 971, 
	971, 971, 971, 971, 971, 971, 978, 978, 
	978, 978, 978, 978, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 978, 978, 
	978, 978, 978, 978, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 973, 971, 963, 971, 971, 971, 
	963, 971, 971, 971, 971, 974, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 963, 971, 
	971, 971, 971, 971, 974, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 979, 979, 979, 979, 
	979, 979, 979, 979, 979, 979, 971, 971, 
	971, 971, 971, 971, 971, 979, 979, 979, 
	979, 979, 979, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 979, 979, 979, 
	979, 979, 979, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 973, 971, 963, 971, 971, 971, 963, 
	971, 971, 971, 971, 974, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 963, 971, 971, 
	971, 971, 971, 974, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 980, 980, 980, 980, 980, 
	980, 980, 980, 980, 980, 971, 971, 971, 
	971, 971, 971, 971, 980, 980, 980, 980, 
	980, 980, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 980, 980, 980, 980, 
	980, 980, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	973, 971, 963, 971, 971, 971, 963, 971, 
	971, 971, 971, 974, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 963, 971, 971, 971, 
	971, 971, 974, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 981, 981, 981, 981, 981, 981, 
	981, 981, 981, 981, 971, 971, 971, 971, 
	971, 971, 971, 981, 981, 981, 981, 981, 
	981, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 981, 981, 981, 981, 981, 
	981, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 973, 
	971, 963, 971, 971, 971, 963, 971, 971, 
	971, 971, 974, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 963, 971, 971, 971, 971, 
	971, 974, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 971, 971, 971, 971, 971, 
	971, 971, 982, 982, 982, 982, 982, 982, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 982, 982, 982, 982, 982, 982, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 973, 971, 
	963, 971, 971, 971, 963, 971, 971, 971, 
	971, 974, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 963, 971, 971, 971, 971, 971, 
	974, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	983, 983, 983, 983, 983, 983, 983, 983, 
	983, 983, 971, 971, 971, 971, 971, 971, 
	971, 983, 983, 983, 983, 983, 983, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 983, 983, 983, 983, 983, 983, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 973, 971, 963, 
	971, 971, 971, 963, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 963, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 983, 
	983, 983, 983, 983, 983, 983, 983, 983, 
	983, 971, 971, 971, 971, 971, 971, 971, 
	983, 983, 983, 983, 983, 983, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	983, 983, 983, 983, 983, 983, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 973, 971, 963, 968, 
	968, 968, 963, 968, 968, 968, 968, 974, 
	968, 968, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 968, 968, 
	963, 968, 968, 968, 968, 968, 974, 968, 
	968, 968, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 984, 984, 
	984, 984, 984, 984, 984, 984, 984, 984, 
	968, 968, 968, 968, 968, 968, 968, 984, 
	984, 984, 984, 984, 984, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 968, 984, 
	984, 984, 984, 984, 984, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 976, 968, 963, 971, 971, 
	971, 963, 971, 971, 971, 971, 974, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 963, 
	971, 971, 971, 971, 971, 974, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 971, 
	971, 971, 971, 971, 971, 971, 985, 985, 
	985, 985, 985, 985, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 985, 985, 
	985, 985, 985, 985, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 976, 971, 963, 971, 971, 971, 
	963, 971, 971, 971, 971, 974, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 963, 971, 
	971, 971, 971, 971, 974, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 986, 986, 986, 986, 
	986, 986, 986, 986, 986, 986, 971, 971, 
	971, 971, 971, 971, 971, 986, 986, 986, 
	986, 986, 986, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 986, 986, 986, 
	986, 986, 986, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 976, 971, 963, 971, 971, 971, 963, 
	971, 971, 971, 971, 974, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 963, 971, 971, 
	971, 971, 971, 974, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 987, 987, 987, 987, 987, 
	987, 987, 987, 987, 987, 971, 971, 971, 
	971, 971, 971, 971, 987, 987, 987, 987, 
	987, 987, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 987, 987, 987, 987, 
	987, 987, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	976, 971, 963, 971, 971, 971, 963, 971, 
	971, 971, 971, 974, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 963, 971, 971, 971, 
	971, 971, 974, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 983, 983, 983, 983, 983, 983, 
	983, 983, 983, 983, 971, 971, 971, 971, 
	971, 971, 971, 983, 983, 983, 983, 983, 
	983, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 983, 983, 983, 983, 983, 
	983, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 976, 
	971, 988, 989, 991, 991, 991, 991, 991, 
	991, 991, 991, 991, 991, 990, 990, 990, 
	990, 990, 990, 990, 991, 991, 991, 991, 
	991, 991, 990, 990, 990, 990, 990, 990, 
	990, 990, 990, 990, 990, 990, 990, 990, 
	990, 990, 990, 990, 990, 990, 990, 990, 
	990, 990, 990, 990, 991, 991, 991, 991, 
	991, 991, 990, 990, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 239, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 240, 183, 
	183, 241, 183, 239, 183, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 183, 
	183, 183, 183, 238, 183, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 183, 
	183, 183, 183, 183, 238, 856, 856, 856, 
	856, 856, 856, 856, 856, 856, 856, 856, 
	856, 856, 856, 856, 856, 856, 856, 856, 
	856, 856, 856, 856, 856, 856, 856, 856, 
	856, 856, 856, 856, 856, 856, 239, 856, 
	856, 856, 856, 856, 856, 856, 856, 856, 
	856, 856, 856, 856, 856, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 240, 
	856, 856, 241, 856, 239, 856, 238, 238, 
	238, 238, 992, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	856, 856, 856, 856, 238, 856, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	856, 856, 856, 856, 856, 238, 856, 856, 
	856, 856, 856, 856, 856, 856, 856, 856, 
	856, 856, 856, 856, 856, 856, 856, 856, 
	856, 856, 856, 856, 856, 856, 856, 856, 
	856, 856, 856, 856, 856, 856, 856, 239, 
	856, 856, 856, 856, 856, 856, 856, 856, 
	856, 856, 856, 856, 856, 856, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	240, 856, 856, 241, 856, 239, 856, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 993, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 856, 856, 856, 856, 238, 856, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 856, 856, 856, 856, 856, 238, 994, 
	995, 856, 851, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 239, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 240, 996, 996, 
	241, 996, 239, 996, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 996, 996, 
	996, 996, 997, 996, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 996, 996, 
	996, 996, 996, 793, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 239, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 240, 996, 
	996, 241, 996, 239, 996, 793, 793, 793, 
	793, 998, 999, 793, 793, 793, 793, 793, 
	1000, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 996, 
	996, 996, 996, 793, 996, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 996, 
	996, 996, 996, 996, 793, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 239, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 240, 
	996, 996, 241, 996, 239, 996, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 1001, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	996, 996, 996, 996, 793, 996, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	996, 996, 996, 996, 996, 793, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 239, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	240, 996, 996, 241, 996, 239, 996, 793, 
	793, 1002, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 996, 996, 996, 996, 793, 996, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 996, 996, 996, 996, 996, 793, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	239, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 240, 996, 996, 241, 996, 239, 996, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 1003, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 996, 996, 996, 996, 793, 996, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 996, 996, 996, 996, 996, 793, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 239, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 240, 996, 996, 241, 996, 239, 
	996, 793, 793, 793, 1004, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 996, 996, 996, 996, 793, 
	996, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 996, 996, 996, 996, 996, 
	793, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 239, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 240, 996, 996, 241, 996, 
	239, 996, 793, 793, 793, 793, 793, 793, 
	793, 793, 1005, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 996, 996, 996, 996, 
	793, 996, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 996, 996, 996, 996, 
	996, 793, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 239, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 240, 996, 996, 241, 
	996, 239, 996, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	1006, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 996, 996, 996, 
	996, 793, 996, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 996, 996, 996, 
	996, 996, 793, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 239, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 240, 996, 996, 
	241, 996, 239, 996, 793, 793, 793, 793, 
	793, 793, 1007, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 996, 996, 
	996, 996, 793, 996, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 996, 996, 
	996, 996, 996, 793, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 239, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 240, 996, 
	996, 241, 996, 239, 996, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 996, 
	996, 996, 996, 1008, 996, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 996, 
	996, 996, 996, 996, 793, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 239, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 240, 
	996, 996, 241, 996, 239, 996, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	996, 996, 996, 996, 1009, 996, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	996, 996, 996, 996, 996, 793, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 239, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	240, 996, 996, 241, 996, 239, 996, 793, 
	793, 793, 793, 793, 793, 793, 793, 1010, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 996, 996, 996, 996, 793, 996, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 996, 996, 996, 996, 996, 793, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	239, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 240, 996, 996, 241, 996, 239, 996, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 1011, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 996, 996, 996, 996, 793, 996, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 996, 996, 996, 996, 996, 793, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 239, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 240, 996, 996, 241, 996, 239, 
	996, 793, 793, 793, 793, 1007, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 996, 996, 996, 996, 793, 
	996, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 996, 996, 996, 996, 996, 
	793, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 239, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 240, 996, 996, 241, 996, 
	239, 996, 793, 793, 793, 793, 793, 793, 
	793, 793, 1012, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 996, 996, 996, 996, 
	793, 996, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 996, 996, 996, 996, 
	996, 793, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 239, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 240, 996, 996, 241, 
	996, 239, 996, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	1011, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 996, 996, 996, 
	996, 793, 996, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 996, 996, 996, 
	996, 996, 793, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 239, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 240, 996, 996, 
	241, 996, 239, 996, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 996, 996, 
	996, 996, 793, 996, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 1013, 
	793, 1014, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 996, 996, 
	996, 996, 996, 793, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 239, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 240, 996, 
	996, 241, 996, 239, 996, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 996, 
	996, 996, 996, 793, 996, 793, 793, 793, 
	793, 793, 793, 793, 793, 1015, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 996, 
	996, 996, 996, 996, 793, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 239, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 240, 
	996, 996, 241, 996, 239, 996, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	996, 996, 996, 996, 793, 996, 1016, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	996, 996, 996, 996, 996, 793, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 239, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	240, 996, 996, 241, 996, 239, 996, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 996, 996, 996, 996, 793, 996, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 1009, 793, 793, 793, 793, 793, 793, 
	793, 996, 996, 996, 996, 996, 793, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	239, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 240, 996, 996, 241, 996, 239, 996, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 996, 996, 996, 996, 793, 996, 
	793, 793, 793, 1009, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 996, 996, 996, 996, 996, 793, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 239, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 240, 996, 996, 241, 996, 239, 
	996, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 996, 996, 996, 996, 793, 
	996, 793, 793, 793, 793, 1017, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 1018, 793, 793, 793, 793, 793, 
	793, 793, 793, 996, 996, 996, 996, 996, 
	793, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 239, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 240, 996, 996, 241, 996, 
	239, 996, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 996, 996, 996, 996, 
	793, 996, 793, 793, 793, 793, 793, 793, 
	1019, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 996, 996, 996, 996, 
	996, 793, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 239, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 240, 996, 996, 241, 
	996, 239, 996, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 996, 996, 996, 
	996, 793, 996, 793, 793, 793, 793, 793, 
	793, 793, 793, 1020, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 996, 996, 996, 
	996, 996, 793, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 239, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 240, 996, 996, 
	241, 996, 239, 996, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 996, 996, 
	996, 996, 793, 996, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 1009, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 996, 996, 
	996, 996, 996, 793, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 239, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 240, 996, 
	996, 241, 996, 239, 996, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 996, 
	996, 996, 996, 793, 996, 793, 793, 793, 
	793, 1021, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 996, 
	996, 996, 996, 996, 793, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 239, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 240, 
	996, 996, 241, 996, 239, 996, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	996, 996, 996, 996, 793, 996, 1022, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	996, 996, 996, 996, 996, 793, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 239, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	240, 996, 996, 241, 996, 239, 996, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 996, 996, 996, 996, 793, 996, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 1009, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 996, 996, 996, 996, 996, 793, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	239, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 240, 996, 996, 241, 996, 239, 996, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 996, 996, 996, 996, 793, 996, 
	1023, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 1024, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 996, 996, 996, 996, 996, 793, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 239, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 240, 996, 996, 241, 996, 239, 
	996, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 996, 996, 996, 996, 793, 
	996, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 1025, 793, 793, 793, 793, 
	793, 793, 793, 996, 996, 996, 996, 996, 
	793, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 239, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 240, 996, 996, 241, 996, 
	239, 996, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 996, 996, 996, 996, 
	793, 996, 793, 793, 793, 793, 1009, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 996, 996, 996, 996, 
	996, 793, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 239, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 240, 996, 996, 241, 
	996, 239, 996, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 996, 996, 996, 
	996, 793, 996, 1026, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 996, 996, 996, 
	996, 996, 793, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 239, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 240, 996, 996, 
	241, 996, 239, 996, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 996, 996, 
	996, 996, 793, 996, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 1016, 793, 
	793, 793, 793, 793, 793, 793, 996, 996, 
	996, 996, 996, 793, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 239, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 240, 996, 
	996, 241, 996, 239, 996, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 996, 
	996, 996, 996, 793, 996, 793, 793, 793, 
	793, 1027, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 1009, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 996, 
	996, 996, 996, 996, 793, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 239, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 240, 
	996, 996, 241, 996, 239, 996, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	996, 996, 996, 996, 793, 996, 793, 793, 
	793, 793, 793, 1009, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	996, 996, 996, 996, 996, 793, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 239, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	240, 996, 996, 241, 996, 239, 996, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 996, 996, 996, 996, 793, 996, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 1028, 793, 1029, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 996, 996, 996, 996, 996, 793, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	239, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 240, 996, 996, 241, 996, 239, 996, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 996, 996, 996, 996, 793, 996, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 1030, 793, 793, 793, 793, 793, 
	793, 793, 996, 996, 996, 996, 996, 793, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 239, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 240, 996, 996, 241, 996, 239, 
	996, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 996, 996, 996, 996, 793, 
	996, 793, 793, 793, 793, 1009, 793, 793, 
	793, 1027, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 996, 996, 996, 996, 996, 
	793, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 239, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 240, 996, 996, 241, 996, 
	239, 996, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 996, 996, 996, 996, 
	793, 996, 793, 793, 793, 1009, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 1031, 793, 793, 793, 
	793, 793, 793, 793, 996, 996, 996, 996, 
	996, 793, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 239, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 240, 996, 996, 241, 
	996, 239, 996, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 996, 996, 996, 
	996, 793, 996, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 1032, 
	793, 793, 793, 793, 793, 996, 996, 996, 
	996, 996, 793, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 239, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 240, 996, 996, 
	241, 996, 239, 996, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 996, 996, 
	996, 996, 793, 996, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 1025, 793, 793, 
	793, 793, 793, 793, 793, 793, 996, 996, 
	996, 996, 996, 793, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 239, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 240, 996, 
	996, 241, 996, 239, 996, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 996, 
	996, 996, 996, 793, 996, 1033, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 828, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 996, 
	996, 996, 996, 996, 793, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 239, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 240, 
	996, 996, 241, 996, 239, 996, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	996, 996, 996, 996, 793, 996, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 1023, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	996, 996, 996, 996, 996, 793, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 239, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	240, 996, 996, 241, 996, 239, 996, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 996, 996, 996, 996, 793, 996, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	1009, 793, 793, 793, 793, 793, 793, 793, 
	793, 996, 996, 996, 996, 996, 793, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	239, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 240, 996, 996, 241, 996, 239, 996, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 996, 996, 996, 996, 793, 996, 
	793, 793, 793, 793, 793, 1034, 793, 793, 
	793, 793, 793, 793, 793, 1009, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 996, 996, 996, 996, 996, 793, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 239, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 240, 996, 996, 241, 996, 239, 
	996, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 996, 996, 996, 996, 793, 
	996, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 1035, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 996, 996, 996, 996, 996, 
	793, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 239, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 240, 996, 996, 241, 996, 
	239, 996, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 996, 996, 996, 996, 
	793, 996, 793, 793, 793, 1036, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 996, 996, 996, 996, 
	996, 793, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 239, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 240, 996, 996, 241, 
	996, 239, 996, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 996, 996, 996, 
	996, 793, 996, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 1037, 
	793, 793, 793, 793, 793, 996, 996, 996, 
	996, 996, 793, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 239, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 240, 996, 996, 
	241, 996, 239, 996, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 996, 996, 
	996, 996, 793, 996, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 1025, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 996, 996, 
	996, 996, 996, 793, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 239, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 240, 996, 
	996, 241, 996, 239, 996, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 996, 
	996, 996, 996, 793, 996, 793, 793, 793, 
	793, 1038, 793, 793, 793, 1039, 793, 793, 
	793, 793, 793, 1040, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 996, 
	996, 996, 996, 996, 793, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 239, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 240, 
	996, 996, 241, 996, 239, 996, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	996, 996, 996, 996, 793, 996, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 1040, 793, 793, 
	996, 996, 996, 996, 996, 793, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 239, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	240, 996, 996, 241, 996, 239, 996, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 996, 996, 996, 996, 793, 996, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 1009, 793, 793, 793, 793, 793, 
	793, 996, 996, 996, 996, 996, 793, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	239, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 240, 996, 996, 241, 996, 239, 996, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 996, 996, 996, 996, 793, 996, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 1009, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 996, 996, 996, 996, 996, 793, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 239, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 240, 996, 996, 241, 996, 239, 
	996, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 996, 996, 996, 996, 793, 
	996, 793, 793, 793, 793, 1041, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 996, 996, 996, 996, 996, 
	793, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 239, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 240, 996, 996, 241, 996, 
	239, 996, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 996, 996, 996, 996, 
	793, 996, 793, 793, 793, 1042, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 1043, 1044, 793, 793, 
	793, 793, 793, 793, 996, 996, 996, 996, 
	996, 793, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 239, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 240, 996, 996, 241, 
	996, 239, 996, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 996, 996, 996, 
	996, 793, 996, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 1009, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 996, 996, 996, 
	996, 996, 793, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 239, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 240, 996, 996, 
	241, 996, 239, 996, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 996, 996, 
	996, 996, 793, 996, 793, 793, 1045, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 996, 996, 
	996, 996, 996, 793, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 239, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 240, 996, 
	996, 241, 996, 239, 996, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 996, 
	996, 996, 996, 793, 996, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 1046, 793, 793, 793, 793, 793, 996, 
	996, 996, 996, 996, 793, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 239, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 240, 
	996, 996, 241, 996, 239, 996, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	996, 996, 996, 996, 793, 996, 793, 793, 
	793, 793, 1047, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	996, 996, 996, 996, 996, 793, 1048, 1048, 
	1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 
	1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 
	1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 
	1048, 1048, 1048, 1048, 1048, 1048, 1048, 1050, 
	1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 
	1048, 1048, 1048, 1048, 1048, 1048, 1049, 1049, 
	1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 
	1051, 1048, 1048, 1052, 1048, 1050, 1048, 1049, 
	1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 
	1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 
	1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 
	1049, 1048, 1048, 1048, 1048, 1049, 1048, 1049, 
	1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 
	1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 
	1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 
	1049, 1048, 1048, 1048, 1048, 1048, 1049, 842, 
	1053, 841, 841, 841, 841, 841, 841, 841, 
	841, 841, 841, 841, 841, 841, 841, 841, 
	841, 841, 841, 841, 841, 841, 841, 841, 
	841, 841, 841, 841, 841, 841, 841, 841, 
	841, 841, 841, 841, 841, 841, 841, 841, 
	841, 841, 841, 841, 841, 841, 841, 841, 
	841, 841, 841, 841, 841, 841, 841, 841, 
	841, 841, 841, 841, 841, 841, 841, 841, 
	844, 841, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 239, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 240, 996, 996, 241, 
	996, 239, 996, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 996, 996, 996, 
	996, 793, 996, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 1054, 793, 793, 1055, 
	793, 793, 793, 793, 793, 996, 996, 996, 
	996, 996, 793, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 239, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 240, 996, 996, 
	241, 996, 239, 996, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 996, 996, 
	996, 996, 793, 996, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 1009, 793, 996, 996, 
	996, 996, 996, 793, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 239, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 240, 996, 
	996, 241, 996, 239, 996, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 996, 
	996, 996, 996, 793, 996, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 1020, 793, 
	793, 793, 793, 793, 793, 793, 793, 996, 
	996, 996, 996, 996, 793, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 239, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 240, 
	996, 996, 241, 996, 239, 996, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	996, 996, 996, 996, 793, 996, 793, 793, 
	793, 793, 1056, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 1057, 793, 793, 793, 793, 793, 
	996, 996, 996, 996, 996, 793, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 239, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	240, 996, 996, 241, 996, 239, 996, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 996, 996, 996, 996, 793, 996, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 1027, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 996, 996, 996, 996, 996, 793, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	239, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 240, 996, 996, 241, 996, 239, 996, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 996, 996, 996, 996, 793, 996, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 1058, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 996, 996, 996, 996, 996, 793, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 239, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 240, 996, 996, 241, 996, 239, 
	996, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 996, 996, 996, 996, 793, 
	996, 793, 793, 793, 793, 828, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 996, 996, 996, 996, 996, 
	793, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 239, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 240, 996, 996, 241, 996, 
	239, 996, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 996, 996, 996, 996, 
	793, 996, 793, 793, 793, 793, 793, 793, 
	793, 1059, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 1060, 793, 793, 793, 793, 
	793, 793, 793, 793, 996, 996, 996, 996, 
	996, 793, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 239, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 240, 996, 996, 241, 
	996, 239, 996, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 996, 996, 996, 
	996, 793, 996, 793, 793, 793, 793, 1020, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 996, 996, 996, 
	996, 996, 793, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 239, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 240, 996, 996, 
	241, 996, 239, 996, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 996, 996, 
	996, 996, 793, 996, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	1025, 793, 793, 793, 793, 793, 996, 996, 
	996, 996, 996, 793, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 239, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 240, 996, 
	996, 241, 996, 239, 996, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 996, 
	996, 996, 996, 793, 996, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 1061, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 996, 
	996, 996, 996, 996, 793, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 239, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 240, 
	996, 996, 241, 996, 239, 996, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	996, 996, 996, 996, 793, 996, 793, 793, 
	793, 1062, 793, 793, 793, 793, 793, 793, 
	793, 1063, 793, 793, 793, 793, 793, 793, 
	793, 1064, 793, 793, 793, 793, 793, 793, 
	996, 996, 996, 996, 996, 793, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 239, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	240, 996, 996, 241, 996, 239, 996, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 996, 996, 996, 996, 793, 996, 793, 
	793, 793, 793, 1027, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 996, 996, 996, 996, 996, 793, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	239, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 240, 996, 996, 241, 996, 239, 996, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 996, 996, 996, 996, 793, 996, 
	793, 793, 793, 793, 1065, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 996, 996, 996, 996, 996, 793, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 239, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 240, 996, 996, 241, 996, 239, 
	996, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 996, 996, 996, 996, 793, 
	996, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 1066, 793, 793, 793, 793, 
	793, 793, 793, 996, 996, 996, 996, 996, 
	793, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 239, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 240, 996, 996, 241, 996, 
	239, 996, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 996, 996, 996, 996, 
	793, 996, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 1034, 793, 793, 793, 
	793, 793, 793, 793, 996, 996, 996, 996, 
	996, 793, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 239, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 240, 996, 996, 241, 
	996, 239, 996, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 996, 996, 996, 
	996, 793, 996, 793, 793, 793, 793, 793, 
	793, 793, 793, 1067, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 996, 996, 996, 
	996, 996, 793, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 239, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 240, 996, 996, 
	241, 996, 239, 996, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 996, 996, 
	996, 996, 793, 996, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 1034, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 996, 996, 
	996, 996, 996, 793, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 239, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 240, 996, 
	996, 241, 996, 239, 996, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 996, 
	996, 996, 996, 793, 996, 793, 793, 793, 
	793, 793, 793, 793, 1068, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 996, 
	996, 996, 996, 996, 793, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 239, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 240, 
	996, 996, 241, 996, 239, 996, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	996, 996, 996, 996, 793, 996, 793, 793, 
	793, 793, 1020, 793, 793, 793, 1069, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	996, 996, 996, 996, 996, 793, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 239, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	240, 996, 996, 241, 996, 239, 996, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 996, 996, 996, 996, 793, 996, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 1070, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 996, 996, 996, 996, 996, 793, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	239, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 240, 996, 996, 241, 996, 239, 996, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 996, 996, 996, 996, 793, 996, 
	793, 793, 793, 793, 1034, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 996, 996, 996, 996, 996, 793, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 239, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 240, 996, 996, 241, 996, 239, 
	996, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 996, 996, 996, 996, 793, 
	996, 793, 793, 793, 793, 793, 793, 793, 
	793, 1071, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 996, 996, 996, 996, 996, 
	793, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 239, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 240, 996, 996, 241, 996, 
	239, 996, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 996, 996, 996, 996, 
	793, 996, 793, 793, 793, 793, 1072, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 996, 996, 996, 996, 
	996, 793, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 996, 239, 996, 996, 996, 996, 
	996, 996, 996, 996, 996, 996, 996, 996, 
	996, 996, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 240, 996, 996, 241, 
	996, 239, 996, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 996, 996, 996, 
	996, 793, 996, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 793, 1014, 793, 
	793, 793, 793, 793, 793, 793, 793, 793, 
	793, 793, 793, 793, 793, 996, 996, 996, 
	996, 996, 793, 1073, 194, 856, 856, 856, 
	856, 856, 856, 856, 856, 856, 856, 856, 
	856, 856, 856, 856, 856, 856, 856, 856, 
	856, 856, 856, 856, 856, 856, 856, 856, 
	856, 856, 856, 856, 856, 856, 856, 856, 
	856, 856, 856, 856, 856, 856, 856, 856, 
	856, 856, 856, 856, 856, 856, 856, 856, 
	856, 856, 856, 856, 856, 856, 856, 856, 
	856, 856, 856, 866, 856, 1075, 1074, 1074, 
	1074, 1075, 1074, 1074, 1074, 1074, 1076, 1077, 
	1076, 1076, 1076, 1074, 1074, 1074, 1074, 1074, 
	1074, 1074, 1074, 1074, 1074, 1074, 1074, 1075, 
	1074, 1074, 1074, 1074, 1074, 1076, 1074, 1074, 
	1078, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 
	1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 
	1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 
	1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 
	1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 
	1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 
	1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 
	1074, 1079, 1074, 1076, 1080, 1076, 1076, 1076, 
	1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 
	1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 
	1080, 1080, 1076, 1080, 1081, 1082, 1083, 1084, 
	1085, 1087, 1086, 1088, 1090, 1091, 1091, 1091, 
	1090, 1091, 1091, 1091, 1091, 1092, 1093, 1092, 
	1092, 1092, 1091, 1091, 1091, 1091, 1091, 1091, 
	1091, 1091, 1091, 1091, 1091, 1091, 1090, 1091, 
	1091, 1091, 1091, 1091, 1092, 1091, 1094, 1095, 
	1091, 1091, 1091, 1094, 1091, 1091, 1091, 1091, 
	1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 
	1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 
	1091, 1091, 1091, 1091, 1091, 1089, 1089, 1089, 
	1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 
	1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 
	1089, 1089, 1089, 1089, 1089, 1089, 1089, 1091, 
	1096, 1091, 1091, 1089, 1091, 1089, 1089, 1089, 
	1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 
	1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 
	1089, 1089, 1089, 1089, 1089, 1089, 1089, 1091, 
	1091, 1091, 1091, 1091, 1089, 1097, 1097, 1097, 
	1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 
	1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 
	1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 
	1097, 1097, 1097, 1097, 1097, 1097, 247, 1097, 
	1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 
	1097, 1097, 1097, 1097, 1097, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 248, 
	1097, 1097, 1097, 1097, 247, 1097, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	1097, 1097, 1097, 1097, 246, 1097, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	1097, 1097, 1097, 1097, 1097, 246, 1092, 1098, 
	1092, 1092, 1092, 1098, 1098, 1098, 1098, 1098, 
	1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 
	1098, 1098, 1098, 1098, 1098, 1092, 1098, 1099, 
	1100, 1101, 1102, 1103, 1104, 1097, 1105, 1107, 
	1108, 1108, 1108, 1107, 1108, 1108, 1108, 1108, 
	1109, 1110, 1109, 1109, 1109, 1108, 1108, 1108, 
	1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 
	1108, 1107, 1108, 1108, 1108, 1108, 1108, 1109, 
	1111, 1112, 1113, 1114, 1115, 1116, 1112, 1117, 
	1118, 1119, 1115, 1120, 1121, 1122, 1115, 1123, 
	1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 
	1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 
	1132, 1133, 1132, 1132, 1134, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1132, 1132, 1135, 1136, 1137, 1115, 1138, 1112, 
	1139, 1140, 1141, 1142, 1143, 1144, 1106, 1106, 
	1145, 1106, 1106, 1106, 1146, 1147, 1148, 1106, 
	1106, 1149, 1150, 1151, 1152, 1106, 1153, 1106, 
	1154, 1106, 1155, 1156, 1157, 1115, 1108, 1106, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 1158, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 256, 256, 256, 256, 256, 1158, 
	256, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 256, 256, 256, 256, 1106, 
	256, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 256, 256, 256, 256, 256, 
	1106, 1160, 1159, 1161, 1109, 1162, 1109, 1109, 
	1109, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 
	1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 
	1162, 1162, 1162, 1109, 1162, 1163, 1165, 1164, 
	1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 
	1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 
	1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 
	1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 
	1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 
	1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 
	1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 
	1164, 1164, 1164, 1164, 1164, 1164, 1164, 1165, 
	1164, 1166, 1167, 1168, 1169, 1170, 1170, 1170, 
	1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 
	1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 
	1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 
	1170, 1170, 1170, 1170, 1170, 1170, 251, 251, 
	1170, 251, 1170, 251, 251, 1170, 1170, 251, 
	251, 251, 1171, 251, 251, 1172, 1172, 1172, 
	1172, 1172, 1172, 1172, 1172, 1172, 1172, 251, 
	251, 251, 251, 251, 251, 251, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	1170, 251, 1170, 1170, 259, 251, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	1170, 1170, 1170, 251, 1170, 259, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 1173, 1173, 1173, 1173, 259, 1173, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 1173, 1173, 1173, 1173, 1173, 259, 1172, 
	1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 
	1172, 1173, 1174, 1164, 1115, 1164, 1164, 1164, 
	1164, 1164, 1164, 1164, 1175, 1164, 1164, 1164, 
	1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 
	1164, 1164, 1164, 1174, 1164, 1176, 1177, 1115, 
	1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 
	1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 
	1164, 1164, 1174, 1164, 1174, 1178, 1164, 1180, 
	1179, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 1179, 1120, 1181, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1183, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1184, 1182, 1182, 
	1182, 1182, 1182, 1183, 1182, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 
	1182, 1182, 1182, 1182, 253, 1182, 1186, 1185, 
	1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 
	1187, 1187, 1185, 1185, 1185, 1185, 1185, 1185, 
	1185, 1185, 1188, 1185, 1189, 1190, 1185, 1185, 
	1185, 1185, 1185, 1185, 1185, 1185, 1185, 1191, 
	1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 
	1192, 1185, 1185, 1185, 1185, 1185, 1185, 1193, 
	1185, 1185, 1188, 1185, 1189, 1190, 1185, 1185, 
	1185, 1194, 1185, 1185, 1185, 1185, 1185, 1191, 
	1185, 1185, 1195, 1185, 1185, 1185, 1185, 1185, 
	1192, 1185, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 1196, 1196, 1196, 1196, 
	1196, 1196, 1196, 1196, 1196, 1196, 1196, 1197, 
	1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 
	1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 
	1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 
	1196, 1198, 1196, 1196, 1196, 1196, 1196, 1197, 
	1196, 1196, 1196, 1199, 1196, 1196, 1196, 1196, 
	1196, 1196, 1196, 1196, 1200, 1196, 1201, 256, 
	1201, 256, 256, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 256, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 
	1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 
	1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 
	1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 
	1202, 1202, 1202, 1202, 1202, 1201, 1202, 1202, 
	1202, 1202, 1202, 1202, 1202, 1202, 1202, 1203, 
	1202, 1204, 1206, 1205, 1207, 1187, 1187, 1187, 
	1187, 1187, 1187, 1187, 1187, 1187, 1187, 1185, 
	1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 
	1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 
	1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 
	1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 
	1185, 1185, 1185, 1185, 1193, 1185, 1185, 1185, 
	1185, 1185, 1185, 1185, 1185, 1185, 1194, 1185, 
	1185, 1185, 1185, 1185, 1185, 1185, 1185, 1195, 
	1185, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1185, 1185, 1185, 1185, 1185, 
	1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 
	1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 
	1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 
	1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 
	1209, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 
	1185, 1185, 1194, 1185, 1185, 1185, 1185, 1185, 
	1185, 1185, 1185, 1195, 1185, 1211, 1211, 1211, 
	1211, 1211, 1211, 1211, 1211, 1211, 1211, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1210, 1212, 1210, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1213, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1214, 
	1210, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 
	1211, 1211, 1211, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 
	1215, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1213, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1214, 1210, 1213, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1214, 1210, 
	1216, 1218, 1217, 1219, 1221, 1221, 1220, 1220, 
	1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 
	1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 
	1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 
	1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 
	1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 
	1220, 1220, 1220, 1222, 1220, 1220, 1220, 1220, 
	1220, 1220, 1220, 1220, 1220, 1223, 1220, 1220, 
	1220, 1220, 1220, 1220, 1220, 1220, 1224, 1220, 
	1225, 1225, 1210, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1226, 
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 
	1210, 1213, 1210, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1214, 1210, 1225, 1225, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1215, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1213, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1214, 1210, 
	1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 
	1228, 1228, 1227, 1227, 1227, 1227, 1227, 1227, 
	1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 
	1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 
	1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 
	1227, 1227, 1227, 1227, 1227, 1227, 1227, 1229, 
	1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 
	1227, 1230, 1227, 1227, 1227, 1227, 1227, 1227, 
	1227, 1227, 1231, 1227, 1233, 1233, 1233, 1233, 
	1233, 1233, 1233, 1233, 1233, 1233, 1232, 1232, 
	1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 
	1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 
	1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 
	1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 
	1232, 1232, 1232, 1234, 1232, 1232, 1232, 1232, 
	1232, 1232, 1232, 1232, 1232, 1235, 1232, 1232, 
	1232, 1232, 1232, 1232, 1232, 1232, 1236, 1232, 
	1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 
	1238, 1238, 1237, 1237, 1237, 1237, 1237, 1237, 
	1237, 1238, 1238, 1238, 1238, 1238, 1238, 1237, 
	1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 
	1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 
	1237, 1237, 1237, 1237, 1237, 1237, 1237, 1239, 
	1237, 1238, 1238, 1238, 1238, 1238, 1238, 1237, 
	1237, 1240, 1237, 1237, 1237, 1237, 1237, 1237, 
	1237, 1237, 1241, 1237, 1242, 1242, 1242, 1242, 
	1242, 1242, 1242, 1242, 1242, 1242, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1242, 1242, 1242, 
	1242, 1242, 1242, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1243, 1210, 1242, 1242, 1242, 
	1242, 1242, 1242, 1210, 1210, 1213, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1214, 1210, 
	1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 
	1242, 1242, 1210, 1210, 1210, 1210, 1210, 1210, 
	1210, 1242, 1242, 1242, 1242, 1242, 1242, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1215, 
	1210, 1242, 1242, 1242, 1242, 1242, 1242, 1210, 
	1210, 1213, 1210, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1214, 1210, 1245, 1244, 1246, 1246, 
	1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 
	1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 
	1244, 1244, 1244, 1247, 1244, 1244, 1244, 1244, 
	1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 
	1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 
	1244, 1244, 1244, 1244, 1244, 1248, 1244, 1244, 
	1244, 1244, 1244, 1247, 1244, 1244, 1244, 1249, 
	1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 
	1250, 1244, 1251, 1251, 1251, 1251, 1251, 1251, 
	1251, 1251, 1251, 1251, 1244, 1244, 1244, 1244, 
	1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 
	1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 
	1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 
	1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 
	1244, 1252, 1244, 1244, 1244, 1244, 1244, 1244, 
	1244, 1244, 1244, 1249, 1244, 1244, 1244, 1244, 
	1244, 1244, 1244, 1244, 1250, 1244, 1253, 1210, 
	1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 
	1254, 1254, 1210, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1255, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1256, 
	1210, 1210, 1210, 1210, 1210, 1255, 1210, 1210, 
	1210, 1213, 1210, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1214, 1210, 1254, 1254, 1254, 1254, 
	1254, 1254, 1254, 1254, 1254, 1254, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1215, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1213, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1214, 1210, 
	1175, 1181, 1115, 1257, 1164, 1165, 1164, 1258, 
	1165, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 
	1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 
	1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 
	1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 
	1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 
	1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 
	1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 
	1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 
	1165, 1181, 1165, 1164, 1165, 1115, 1164, 1170, 
	1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 
	1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 
	1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 
	1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 
	1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 
	1170, 1170, 1170, 1170, 1170, 1170, 1170, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 1170, 1170, 1170, 1170, 1170, 1170, 1259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 1170, 1170, 1170, 1170, 259, 1170, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 1170, 1170, 1170, 1170, 1170, 259, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 1158, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1132, 1132, 1260, 256, 256, 256, 256, 1158, 
	256, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1132, 1132, 1132, 256, 256, 256, 256, 1132, 
	256, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1132, 1132, 1132, 256, 256, 256, 256, 256, 
	1132, 1261, 1262, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 1158, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1132, 1132, 1132, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1260, 1262, 1262, 1262, 
	1262, 1158, 1262, 1132, 1132, 1132, 1132, 1263, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1262, 1262, 1262, 
	1262, 1132, 1262, 1132, 1132, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1262, 1262, 1262, 
	1262, 1262, 1132, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 1262, 1158, 1262, 1262, 1262, 
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 1132, 1132, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1260, 1262, 1262, 
	1262, 1262, 1158, 1262, 1132, 1132, 1132, 1132, 
	1132, 1132, 1264, 1132, 1132, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1262, 1262, 
	1262, 1262, 1132, 1262, 1132, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1262, 1262, 
	1262, 1262, 1262, 1132, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 1262, 1262, 1158, 1262, 1262, 
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 1262, 1132, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1260, 1262, 
	1262, 1262, 1262, 1158, 1262, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1265, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1262, 
	1262, 1262, 1262, 1132, 1262, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1262, 
	1262, 1262, 1262, 1262, 1132, 1262, 1262, 1262, 
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 1262, 1262, 1262, 1158, 1262, 
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 1262, 1262, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1260, 
	1262, 1262, 1262, 1262, 1158, 1262, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1132, 1132, 1132, 1266, 1132, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1262, 1262, 1262, 1262, 1132, 1262, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1262, 1262, 1262, 1262, 1262, 1132, 1262, 1262, 
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1158, 
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 1262, 1262, 1262, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1260, 1262, 1262, 1262, 1262, 1158, 1262, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1267, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1132, 1262, 1262, 1262, 1262, 1132, 1262, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1132, 1262, 1262, 1262, 1262, 1262, 1132, 1262, 
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 
	1158, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1132, 1260, 1262, 1262, 1262, 1262, 1158, 1262, 
	1132, 1132, 1132, 1266, 1132, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1132, 1132, 1262, 1262, 1262, 1262, 1132, 1262, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1132, 1132, 1262, 1262, 1262, 1262, 1262, 1132, 
	1268, 1270, 1269, 1271, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1158, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1272, 1272, 
	1272, 1272, 1272, 1158, 1272, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1272, 
	1272, 1272, 1272, 1273, 1272, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1272, 
	1272, 1272, 1272, 1272, 1106, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1158, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1272, 
	1272, 1272, 1272, 1272, 1158, 1272, 1106, 1106, 
	1106, 1106, 1274, 1275, 1106, 1106, 1106, 1106, 
	1106, 1276, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1106, 1272, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1272, 1106, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1158, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1272, 1158, 1272, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1277, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1106, 1272, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1272, 1106, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1158, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1272, 1158, 1272, 
	1106, 1106, 1278, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1272, 1272, 1272, 1272, 1106, 1272, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1272, 1272, 1272, 1272, 1272, 1106, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1158, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1272, 1272, 1272, 1272, 1272, 1158, 
	1272, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1279, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1272, 1272, 1272, 1272, 1106, 
	1272, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1272, 1272, 1272, 1272, 1272, 
	1106, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1158, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1272, 1272, 1272, 1272, 1272, 
	1158, 1272, 1106, 1106, 1106, 1280, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1272, 1272, 1272, 1272, 
	1106, 1272, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1272, 1272, 1272, 1272, 
	1272, 1106, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1158, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1272, 1272, 1272, 1272, 
	1272, 1158, 1272, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1281, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1272, 1272, 1272, 
	1272, 1106, 1272, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1272, 1272, 1272, 
	1272, 1272, 1106, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1158, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1272, 1272, 1272, 
	1272, 1272, 1158, 1272, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1282, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1272, 1272, 
	1272, 1272, 1106, 1272, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1272, 1272, 
	1272, 1272, 1272, 1106, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1158, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1272, 1272, 
	1272, 1272, 1272, 1158, 1272, 1106, 1106, 1106, 
	1106, 1106, 1106, 1283, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1272, 
	1272, 1272, 1272, 1106, 1272, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1272, 
	1272, 1272, 1272, 1272, 1106, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1158, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1272, 
	1272, 1272, 1272, 1272, 1158, 1272, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1284, 1272, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1272, 1106, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1158, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1272, 1158, 1272, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1285, 1272, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1272, 1106, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1158, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1272, 1158, 1272, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1286, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1272, 1272, 1272, 1272, 1106, 1272, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1272, 1272, 1272, 1272, 1272, 1106, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1158, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1272, 1272, 1272, 1272, 1272, 1158, 
	1272, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1287, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1272, 1272, 1272, 1272, 1106, 
	1272, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1272, 1272, 1272, 1272, 1272, 
	1106, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1158, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1272, 1272, 1272, 1272, 1272, 
	1158, 1272, 1106, 1106, 1106, 1106, 1288, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1272, 1272, 1272, 1272, 
	1106, 1272, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1272, 1272, 1272, 1272, 
	1272, 1106, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1158, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1272, 1272, 1272, 1272, 
	1272, 1158, 1272, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1272, 1272, 1272, 
	1272, 1289, 1272, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1272, 1272, 1272, 
	1272, 1272, 1106, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1158, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1272, 1272, 1272, 
	1272, 1272, 1158, 1272, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1272, 1272, 
	1272, 1272, 1290, 1272, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1272, 1272, 
	1272, 1272, 1272, 1106, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1158, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1272, 1272, 
	1272, 1272, 1272, 1158, 1272, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1291, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1272, 
	1272, 1272, 1272, 1106, 1272, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1272, 
	1272, 1272, 1272, 1272, 1106, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1158, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1272, 
	1272, 1272, 1272, 1272, 1158, 1272, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1287, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1106, 1272, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1272, 1106, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1158, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1272, 1158, 1272, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1106, 1272, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1292, 1106, 1293, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1272, 1106, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1158, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1272, 1158, 1272, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1272, 1272, 1272, 1272, 1106, 1272, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1294, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1272, 1272, 1272, 1272, 1272, 1106, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1158, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1272, 1272, 1272, 1272, 1272, 1158, 
	1272, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1272, 1272, 1272, 1272, 1106, 
	1272, 1295, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1272, 1272, 1272, 1272, 1272, 
	1106, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1158, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1272, 1272, 1272, 1272, 1272, 
	1158, 1272, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1272, 1272, 1272, 1272, 
	1106, 1272, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1296, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1272, 1272, 1272, 1272, 
	1272, 1106, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1158, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1272, 1272, 1272, 1272, 
	1272, 1158, 1272, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1272, 1272, 1272, 
	1272, 1106, 1272, 1106, 1106, 1106, 1297, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1272, 1272, 1272, 
	1272, 1272, 1106, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1158, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1272, 1272, 1272, 
	1272, 1272, 1158, 1272, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1272, 1272, 
	1272, 1272, 1106, 1272, 1106, 1106, 1106, 1106, 
	1298, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1299, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1272, 1272, 
	1272, 1272, 1272, 1106, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1158, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1272, 1272, 
	1272, 1272, 1272, 1158, 1272, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1272, 
	1272, 1272, 1272, 1106, 1272, 1106, 1106, 1106, 
	1106, 1106, 1106, 1300, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1272, 
	1272, 1272, 1272, 1272, 1106, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1158, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1272, 
	1272, 1272, 1272, 1272, 1158, 1272, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1106, 1272, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1301, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1272, 1106, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1158, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1272, 1158, 1272, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1106, 1272, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1297, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1272, 1106, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1158, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1272, 1158, 1272, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1272, 1272, 1272, 1272, 1106, 1272, 
	1106, 1106, 1106, 1106, 1302, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1272, 1272, 1272, 1272, 1272, 1106, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1158, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1272, 1272, 1272, 1272, 1272, 1158, 
	1272, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1272, 1272, 1272, 1272, 1106, 
	1272, 1303, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1272, 1272, 1272, 1272, 1272, 
	1106, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1158, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1272, 1272, 1272, 1272, 1272, 
	1158, 1272, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1272, 1272, 1272, 1272, 
	1106, 1272, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1304, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1272, 1272, 1272, 1272, 
	1272, 1106, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1158, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1272, 1272, 1272, 1272, 
	1272, 1158, 1272, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1272, 1272, 1272, 
	1272, 1106, 1272, 1305, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1306, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1272, 1272, 1272, 
	1272, 1272, 1106, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1158, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1272, 1272, 1272, 
	1272, 1272, 1158, 1272, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1272, 1272, 
	1272, 1272, 1106, 1272, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1307, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1272, 1272, 
	1272, 1272, 1272, 1106, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1158, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1272, 1272, 
	1272, 1272, 1272, 1158, 1272, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1272, 
	1272, 1272, 1272, 1106, 1272, 1106, 1106, 1106, 
	1106, 1297, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1272, 
	1272, 1272, 1272, 1272, 1106, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1158, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1272, 
	1272, 1272, 1272, 1272, 1158, 1272, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1106, 1272, 1308, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1272, 1106, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1158, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1272, 1158, 1272, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1106, 1272, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1309, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1272, 1106, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1158, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1272, 1158, 1272, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1272, 1272, 1272, 1272, 1106, 1272, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1310, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1272, 1272, 1272, 1272, 1272, 1106, 
	1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 
	1311, 261, 262, 261, 261, 261, 1311, 1311, 
	1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 
	1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 
	261, 1158, 1311, 263, 1311, 1311, 1311, 1311, 
	1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1311, 1311, 264, 1311, 1311, 1158, 
	1311, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1311, 265, 1311, 1311, 1106, 
	1311, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1311, 1311, 1311, 1311, 1311, 
	1106, 278, 279, 278, 278, 278, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	278, 277, 277, 280, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 283, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 282, 277, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1158, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1272, 1158, 1272, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1106, 1272, 1106, 
	1106, 1106, 1106, 1313, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1314, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1272, 1106, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1158, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1272, 1158, 1272, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1272, 1272, 1272, 1272, 1106, 1272, 
	1106, 1106, 1106, 1106, 1106, 1315, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1272, 1272, 1272, 1272, 1272, 1106, 
	1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 
	1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 
	1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 
	1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 
	1316, 1158, 1316, 1316, 1316, 1316, 1316, 1316, 
	1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1316, 1316, 1316, 1316, 1316, 1158, 
	1316, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1316, 1316, 1316, 1316, 1106, 
	1316, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1317, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1316, 1316, 1316, 1316, 1316, 
	1106, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1158, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1272, 1272, 1272, 1272, 1272, 
	1158, 1272, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1272, 1272, 1272, 1272, 
	1106, 1272, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1318, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1272, 1272, 1272, 1272, 
	1272, 1106, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1158, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1272, 1272, 1272, 1272, 
	1272, 1158, 1272, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1272, 1272, 1272, 
	1272, 1106, 1272, 1106, 1106, 1106, 1106, 1319, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1272, 1272, 1272, 
	1272, 1272, 1106, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1158, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1272, 1272, 1272, 
	1272, 1272, 1158, 1272, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1272, 1272, 
	1272, 1272, 1106, 1272, 1106, 1106, 1106, 1320, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1272, 1272, 
	1272, 1272, 1272, 1106, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1158, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1272, 1272, 
	1272, 1272, 1272, 1321, 1272, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1272, 
	1272, 1272, 1272, 1106, 1272, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1272, 
	1272, 1272, 1272, 1272, 1106, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1158, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1272, 
	1272, 1272, 1272, 1272, 1158, 1272, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1106, 1272, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1322, 1106, 1323, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1272, 1106, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1158, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1272, 1158, 1272, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1106, 1272, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1324, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1272, 1106, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1158, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1272, 1158, 1272, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1272, 1272, 1272, 1272, 1106, 1272, 
	1106, 1106, 1106, 1106, 1297, 1106, 1106, 1106, 
	1325, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1272, 1272, 1272, 1272, 1272, 1106, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1158, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1272, 1272, 1272, 1272, 1272, 1158, 
	1272, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1272, 1272, 1272, 1272, 1106, 
	1272, 1106, 1106, 1106, 1106, 1106, 1297, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1272, 1272, 1272, 1272, 1272, 
	1106, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1158, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1272, 1272, 1272, 1272, 1272, 
	1158, 1272, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1272, 1272, 1272, 1272, 
	1106, 1272, 1106, 1106, 1106, 1290, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1326, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1272, 1272, 1272, 1272, 
	1272, 1106, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1158, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1272, 1272, 1272, 1272, 
	1272, 1158, 1272, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1272, 1272, 1272, 
	1272, 1106, 1272, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1327, 
	1106, 1106, 1106, 1106, 1106, 1272, 1272, 1272, 
	1272, 1272, 1106, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1158, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1272, 1272, 1272, 
	1272, 1272, 1158, 1272, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1272, 1272, 
	1272, 1272, 1106, 1272, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1307, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1272, 1272, 
	1272, 1272, 1272, 1106, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1158, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1272, 1272, 
	1272, 1272, 1272, 1158, 1272, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1272, 
	1272, 1272, 1272, 1106, 1272, 1328, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1148, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1272, 
	1272, 1272, 1272, 1272, 1106, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1158, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1272, 
	1272, 1272, 1272, 1272, 1158, 1272, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1106, 1272, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1329, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1272, 1106, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1158, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1272, 1158, 1272, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1106, 1272, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1330, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1272, 1106, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1158, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1272, 1158, 1272, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1272, 1272, 1272, 1272, 1106, 1272, 
	1106, 1106, 1106, 1106, 1290, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1272, 1272, 1272, 1272, 1272, 1106, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1158, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1272, 1272, 1272, 1272, 1272, 1158, 
	1272, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1272, 1272, 1272, 1272, 1106, 
	1272, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1297, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1272, 1272, 1272, 1272, 1272, 
	1106, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1158, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1272, 1272, 1272, 1272, 1272, 
	1158, 1272, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1272, 1272, 1272, 1272, 
	1106, 1272, 1106, 1106, 1106, 1106, 1106, 1331, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1297, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1272, 1272, 1272, 1272, 
	1272, 1106, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1158, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1272, 1272, 1272, 1272, 
	1272, 1158, 1272, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1272, 1272, 1272, 
	1272, 1106, 1272, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1332, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1272, 1272, 1272, 
	1272, 1272, 1106, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1158, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1272, 1272, 1272, 
	1272, 1272, 1158, 1272, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1272, 1272, 
	1272, 1272, 1106, 1272, 1106, 1106, 1106, 1333, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1272, 1272, 
	1272, 1272, 1272, 1106, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1158, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1272, 1272, 
	1272, 1272, 1272, 1158, 1272, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1272, 
	1272, 1272, 1272, 1106, 1272, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1334, 1106, 1106, 1106, 1106, 1106, 1272, 
	1272, 1272, 1272, 1272, 1106, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1158, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1272, 
	1272, 1272, 1272, 1272, 1158, 1272, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1106, 1272, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1307, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1272, 1106, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1158, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1272, 1158, 1272, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1106, 1272, 1106, 
	1106, 1106, 1106, 1335, 1106, 1106, 1106, 1336, 
	1106, 1106, 1106, 1106, 1106, 1337, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1272, 1106, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1158, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1272, 1158, 1272, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1272, 1272, 1272, 1272, 1106, 1272, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1338, 
	1106, 1106, 1272, 1272, 1272, 1272, 1272, 1106, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1158, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1272, 1272, 1272, 1272, 1272, 1158, 
	1272, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1272, 1272, 1272, 1272, 1106, 
	1272, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1304, 1106, 1106, 1106, 
	1106, 1106, 1106, 1272, 1272, 1272, 1272, 1272, 
	1106, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1158, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1272, 1272, 1272, 1272, 1272, 
	1158, 1272, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1272, 1272, 1272, 1272, 
	1106, 1272, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1290, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1272, 1272, 1272, 1272, 
	1272, 1106, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1158, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1272, 1272, 1272, 1272, 
	1272, 1158, 1272, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1272, 1272, 1272, 
	1272, 1106, 1272, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1339, 1106, 
	1106, 1106, 1106, 1106, 1106, 1272, 1272, 1272, 
	1272, 1272, 1106, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1158, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1272, 1272, 1272, 
	1272, 1272, 1158, 1272, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1272, 1272, 
	1272, 1272, 1106, 1272, 1106, 1106, 1106, 1106, 
	1340, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1272, 1272, 
	1272, 1272, 1272, 1106, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1158, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1272, 1272, 
	1272, 1272, 1272, 1158, 1272, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1272, 
	1272, 1272, 1272, 1106, 1272, 1106, 1106, 1106, 
	1341, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1342, 
	1343, 1106, 1106, 1106, 1106, 1106, 1106, 1272, 
	1272, 1272, 1272, 1272, 1106, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1158, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1272, 
	1272, 1272, 1272, 1272, 1158, 1272, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1106, 1272, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1290, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1272, 1106, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1158, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1272, 1158, 1272, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1106, 1272, 1106, 
	1106, 1344, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1272, 1106, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1158, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1272, 1158, 1272, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1272, 1272, 1272, 1272, 1106, 1272, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1345, 1106, 1106, 1106, 
	1106, 1106, 1272, 1272, 1272, 1272, 1272, 1106, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1158, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1272, 1272, 1272, 1272, 1272, 1158, 
	1272, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1272, 1272, 1272, 1272, 1106, 
	1272, 1106, 1106, 1106, 1106, 1331, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1272, 1272, 1272, 1272, 1272, 
	1106, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1158, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1272, 1272, 1272, 1272, 1272, 
	1158, 1272, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1272, 1272, 1272, 1272, 
	1106, 1272, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1346, 1106, 1106, 1347, 1106, 
	1106, 1106, 1106, 1106, 1272, 1272, 1272, 1272, 
	1272, 1106, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1158, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1272, 1272, 1272, 1272, 
	1272, 1158, 1272, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1272, 1272, 1272, 
	1272, 1106, 1272, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1290, 1106, 1272, 1272, 1272, 
	1272, 1272, 1106, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1158, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1272, 1272, 1272, 
	1272, 1272, 1158, 1272, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1272, 1272, 
	1272, 1272, 1106, 1272, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1348, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1272, 1272, 
	1272, 1272, 1272, 1106, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1158, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1272, 1272, 
	1272, 1272, 1272, 1158, 1272, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1272, 
	1272, 1272, 1272, 1106, 1272, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1304, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1272, 
	1272, 1272, 1272, 1272, 1106, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1158, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1272, 
	1272, 1272, 1272, 1272, 1158, 1272, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1106, 1272, 1106, 1106, 
	1106, 1106, 1349, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1350, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1272, 1106, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1158, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1272, 1158, 1272, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1106, 1272, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1351, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1272, 1106, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1158, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1272, 1158, 1272, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1272, 1272, 1272, 1272, 1106, 1272, 
	1106, 1106, 1106, 1106, 1106, 1290, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1272, 1272, 1272, 1272, 1272, 1106, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1158, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1272, 1272, 1272, 1272, 1272, 1158, 
	1272, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1272, 1272, 1272, 1272, 1106, 
	1272, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1352, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1272, 1272, 1272, 1272, 1272, 
	1106, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1158, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1272, 1272, 1272, 1272, 1272, 
	1158, 1272, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1272, 1272, 1272, 1272, 
	1106, 1272, 1106, 1106, 1106, 1106, 1353, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1272, 1272, 1272, 1272, 
	1272, 1106, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1158, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1272, 1272, 1272, 1272, 
	1272, 1158, 1272, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1272, 1272, 1272, 
	1272, 1106, 1272, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1339, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1272, 1272, 1272, 
	1272, 1272, 1106, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1158, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1272, 1272, 1272, 
	1272, 1272, 1158, 1272, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1272, 1272, 
	1272, 1272, 1106, 1272, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1354, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1355, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1272, 1272, 
	1272, 1272, 1272, 1106, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1158, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1272, 1272, 
	1272, 1272, 1272, 1158, 1272, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1272, 
	1272, 1272, 1272, 1106, 1272, 1106, 1106, 1106, 
	1106, 1301, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1272, 
	1272, 1272, 1272, 1272, 1106, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1158, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1272, 
	1272, 1272, 1272, 1272, 1158, 1272, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1106, 1272, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1330, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1272, 1106, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1158, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1272, 1158, 1272, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1106, 1272, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1356, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1272, 1106, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1158, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1272, 1158, 1272, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1272, 1272, 1272, 1272, 1106, 1272, 
	1106, 1106, 1106, 1357, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1358, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1359, 1106, 1106, 1106, 1106, 
	1106, 1106, 1272, 1272, 1272, 1272, 1272, 1106, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1158, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1272, 1272, 1272, 1272, 1272, 1158, 
	1272, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1272, 1272, 1272, 1272, 1106, 
	1272, 1106, 1106, 1106, 1106, 1360, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1272, 1272, 1272, 1272, 1272, 
	1106, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1158, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1272, 1272, 1272, 1272, 1272, 
	1158, 1272, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1272, 1272, 1272, 1272, 
	1106, 1272, 1106, 1106, 1106, 1106, 1106, 1296, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1272, 1272, 1272, 1272, 
	1272, 1106, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1158, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1272, 1272, 1272, 1272, 
	1272, 1158, 1272, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1272, 1272, 1272, 
	1272, 1106, 1272, 1106, 1106, 1106, 1106, 1361, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1272, 1272, 1272, 
	1272, 1272, 1106, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1158, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1272, 1272, 1272, 
	1272, 1272, 1158, 1272, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1272, 1272, 
	1272, 1272, 1106, 1272, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1362, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1272, 1272, 
	1272, 1272, 1272, 1106, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1158, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1272, 1272, 
	1272, 1272, 1272, 1158, 1272, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1272, 
	1272, 1272, 1272, 1106, 1272, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1331, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1272, 
	1272, 1272, 1272, 1272, 1106, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1158, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1272, 
	1272, 1272, 1272, 1272, 1158, 1272, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1106, 1272, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1363, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1272, 1106, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1158, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1272, 1158, 1272, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1106, 1272, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1331, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1272, 1106, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1158, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1272, 1158, 1272, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1272, 1272, 1272, 1272, 1106, 1272, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1364, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1272, 1272, 1272, 1272, 1272, 1106, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1158, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1272, 1272, 1272, 1272, 1272, 1158, 
	1272, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1272, 1272, 1272, 1272, 1106, 
	1272, 1106, 1106, 1106, 1106, 1301, 1106, 1106, 
	1106, 1365, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1272, 1272, 1272, 1272, 1272, 
	1106, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1158, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1272, 1272, 1272, 1272, 1272, 
	1158, 1272, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1272, 1272, 1272, 1272, 
	1106, 1272, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1366, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1272, 1272, 1272, 1272, 
	1272, 1106, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1158, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1272, 1272, 1272, 1272, 
	1272, 1158, 1272, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1272, 1272, 1272, 
	1272, 1106, 1272, 1106, 1106, 1106, 1106, 1331, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1272, 1272, 1272, 
	1272, 1272, 1106, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1158, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1272, 1272, 1272, 
	1272, 1272, 1158, 1272, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1272, 1272, 
	1272, 1272, 1106, 1272, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1367, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1272, 1272, 
	1272, 1272, 1272, 1106, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1158, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1272, 1272, 
	1272, 1272, 1272, 1158, 1272, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1272, 
	1272, 1272, 1272, 1106, 1272, 1106, 1106, 1106, 
	1106, 1368, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1272, 
	1272, 1272, 1272, 1272, 1106, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1158, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1272, 
	1272, 1272, 1272, 1272, 1158, 1272, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1106, 1272, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1369, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1272, 1106, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1158, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1272, 1272, 1272, 1272, 1272, 1158, 1272, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1106, 1272, 1106, 
	1106, 1106, 1339, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 
	1106, 1272, 1272, 1272, 1272, 1272, 1106, 1370, 
	1174, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 
	1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 
	1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 
	1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 
	1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 
	1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 
	1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 
	1164, 1164, 1164, 1164, 1164, 1164, 1164, 1115, 
	1164, 1371, 1373, 1372, 1373, 1373, 1373, 1372, 
	1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 
	1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 
	1372, 1373, 1372, 1372, 1372, 1372, 1372, 1374, 
	1372, 1372, 1372, 1372, 1372, 1372, 1372, 289, 
	1372, 287, 1375, 287, 287, 287, 1375, 1375, 
	1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 
	1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 
	287, 1375, 1375, 1375, 1375, 1375, 288, 1375, 
	1375, 1375, 1375, 1375, 1375, 1375, 289, 1375, 
	290, 1375, 1377, 1376, 1376, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1376, 1378, 1376, 1377, 
	1376, 1377, 1376, 1376, 1376, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1380, 1376, 1377, 1376, 
	1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 
	1376, 1376, 1381, 1376, 1377, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 
	1376, 1376, 1376, 1376, 1376, 1376, 1382, 1376, 
	1384, 1382, 0
]

class << self
	attr_accessor :_lex_trans_targs
	private :_lex_trans_targs, :_lex_trans_targs=
end
self._lex_trans_targs = [
	159, 2, 3, 4, 165, 6, 7, 8, 
	9, 10, 159, 159, 168, 171, 168, 12, 
	172, 14, 168, 179, 180, 183, 184, 190, 
	185, 186, 187, 19, 188, 189, 192, 194, 
	195, 196, 197, 198, 25, 18, 181, 182, 
	27, 230, 231, 233, 235, 233, 30, 236, 
	32, 233, 243, 244, 247, 248, 254, 249, 
	250, 251, 37, 252, 253, 256, 258, 259, 
	260, 261, 262, 43, 36, 245, 246, 45, 
	294, 295, 302, 304, 302, 48, 305, 50, 
	310, 309, 0, 52, 311, 312, 54, 313, 
	314, 314, 426, 56, 57, 426, 454, 58, 
	59, 454, 454, 458, 458, 63, 58, 64, 
	456, 457, 459, 460, 458, 454, 461, 462, 
	464, 60, 61, 465, 466, 62, 458, 65, 
	66, 71, 78, 468, 469, 64, 456, 457, 
	459, 460, 458, 454, 461, 462, 464, 60, 
	61, 465, 466, 62, 65, 66, 71, 78, 
	468, 469, 467, 67, 68, 69, 70, 72, 
	73, 76, 74, 75, 77, 79, 80, 454, 
	82, 83, 84, 86, 89, 87, 88, 90, 
	92, 485, 485, 485, 486, 94, 488, 95, 
	489, 96, 486, 94, 488, 95, 489, 523, 
	523, 523, 99, 100, 101, 102, 534, 523, 
	523, 539, 523, 523, 560, 523, 106, 561, 
	567, 109, 112, 114, 116, 117, 118, 112, 
	113, 571, 113, 571, 115, 523, 585, 586, 
	589, 590, 596, 591, 592, 593, 123, 594, 
	595, 598, 600, 601, 602, 603, 604, 129, 
	122, 587, 588, 131, 640, 641, 133, 525, 
	97, 527, 135, 136, 643, 744, 138, 139, 
	140, 744, 752, 752, 752, 143, 773, 772, 
	752, 775, 777, 762, 809, 149, 150, 151, 
	155, 156, 149, 150, 151, 155, 156, 152, 
	152, 150, 151, 153, 154, 152, 152, 150, 
	151, 153, 154, 856, 150, 752, 925, 157, 
	158, 925, 925, 159, 159, 160, 161, 162, 
	164, 166, 167, 159, 159, 159, 163, 159, 
	163, 159, 1, 159, 159, 159, 5, 168, 
	168, 169, 168, 170, 173, 168, 168, 11, 
	13, 168, 168, 168, 174, 175, 176, 15, 
	21, 26, 199, 28, 168, 168, 168, 177, 
	178, 168, 16, 168, 168, 168, 17, 168, 
	168, 168, 20, 191, 193, 22, 168, 168, 
	23, 24, 168, 200, 204, 208, 201, 202, 
	203, 205, 206, 207, 168, 168, 209, 213, 
	219, 210, 217, 218, 211, 215, 216, 212, 
	214, 168, 220, 229, 228, 221, 222, 223, 
	224, 225, 226, 227, 168, 168, 168, 232, 
	233, 233, 233, 234, 237, 233, 29, 31, 
	233, 233, 233, 238, 239, 240, 33, 39, 
	44, 263, 46, 233, 233, 233, 241, 242, 
	233, 34, 233, 233, 233, 35, 233, 233, 
	233, 38, 255, 257, 40, 233, 233, 41, 
	42, 233, 264, 268, 272, 265, 266, 267, 
	269, 270, 271, 233, 233, 273, 277, 283, 
	274, 281, 282, 275, 279, 280, 276, 278, 
	233, 284, 293, 292, 285, 286, 287, 288, 
	289, 290, 291, 233, 233, 233, 296, 297, 
	297, 298, 297, 299, 297, 297, 297, 300, 
	300, 300, 301, 300, 300, 300, 302, 302, 
	302, 303, 302, 47, 49, 302, 302, 306, 
	306, 306, 307, 308, 307, 51, 53, 309, 
	309, 309, 315, 314, 314, 316, 317, 318, 
	319, 321, 314, 324, 325, 326, 327, 328, 
	330, 332, 333, 334, 338, 340, 341, 342, 
	358, 363, 370, 375, 382, 389, 392, 393, 
	397, 391, 401, 409, 413, 415, 420, 422, 
	425, 314, 314, 314, 314, 314, 314, 320, 
	314, 320, 314, 322, 55, 323, 314, 314, 
	314, 329, 331, 314, 335, 336, 337, 333, 
	339, 314, 343, 344, 353, 356, 345, 346, 
	347, 348, 349, 350, 351, 352, 315, 354, 
	355, 357, 359, 362, 360, 361, 364, 367, 
	365, 366, 368, 369, 371, 373, 372, 374, 
	376, 377, 314, 378, 379, 380, 381, 314, 
	383, 386, 384, 385, 387, 388, 390, 394, 
	395, 396, 398, 400, 399, 402, 403, 404, 
	406, 405, 407, 408, 410, 411, 412, 414, 
	416, 417, 418, 419, 421, 423, 424, 427, 
	426, 426, 428, 429, 431, 426, 426, 426, 
	430, 426, 430, 432, 426, 434, 433, 433, 
	437, 438, 439, 440, 433, 442, 443, 444, 
	445, 447, 449, 450, 451, 452, 453, 433, 
	435, 433, 436, 433, 433, 433, 433, 433, 
	441, 433, 441, 446, 433, 448, 433, 454, 
	454, 455, 470, 471, 457, 473, 474, 461, 
	475, 476, 477, 478, 479, 481, 482, 483, 
	484, 454, 454, 454, 454, 454, 454, 458, 
	463, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 472, 454, 472, 454, 454, 454, 
	454, 480, 454, 81, 85, 91, 485, 487, 
	490, 93, 485, 485, 486, 491, 491, 492, 
	493, 495, 497, 498, 491, 491, 494, 491, 
	494, 491, 496, 491, 491, 491, 500, 499, 
	499, 501, 502, 503, 505, 507, 508, 513, 
	520, 499, 499, 499, 499, 504, 499, 504, 
	499, 506, 499, 499, 500, 509, 510, 511, 
	512, 514, 515, 518, 516, 517, 519, 521, 
	522, 524, 523, 532, 533, 535, 536, 538, 
	540, 541, 542, 544, 545, 546, 548, 549, 
	570, 573, 574, 575, 643, 644, 645, 646, 
	647, 543, 649, 665, 670, 677, 682, 684, 
	690, 693, 694, 698, 692, 702, 713, 717, 
	720, 728, 732, 735, 736, 523, 97, 526, 
	523, 523, 528, 530, 531, 523, 529, 523, 
	523, 523, 523, 523, 98, 523, 523, 523, 
	523, 523, 537, 523, 537, 523, 523, 103, 
	523, 523, 104, 523, 523, 543, 523, 547, 
	523, 550, 559, 523, 105, 562, 563, 564, 
	523, 565, 107, 568, 108, 110, 569, 523, 
	551, 553, 523, 552, 523, 523, 554, 557, 
	558, 523, 555, 556, 523, 523, 523, 523, 
	566, 111, 572, 523, 523, 576, 523, 523, 
	523, 577, 579, 523, 578, 523, 578, 523, 
	580, 581, 582, 119, 125, 130, 605, 132, 
	523, 523, 523, 583, 584, 523, 120, 523, 
	523, 523, 121, 523, 523, 523, 124, 597, 
	599, 126, 523, 523, 127, 128, 523, 606, 
	610, 614, 607, 608, 609, 611, 612, 613, 
	523, 523, 615, 619, 625, 616, 623, 624, 
	617, 621, 622, 618, 620, 523, 626, 634, 
	639, 627, 628, 629, 630, 631, 632, 633, 
	635, 636, 637, 638, 523, 523, 523, 642, 
	134, 137, 523, 648, 523, 650, 651, 660, 
	663, 652, 653, 654, 655, 656, 657, 658, 
	659, 524, 661, 662, 664, 666, 669, 667, 
	668, 671, 674, 672, 673, 675, 676, 678, 
	680, 679, 681, 683, 685, 687, 686, 688, 
	689, 691, 524, 695, 696, 697, 699, 701, 
	700, 703, 704, 705, 710, 706, 707, 708, 
	523, 524, 525, 97, 709, 530, 711, 712, 
	714, 715, 716, 718, 719, 721, 722, 723, 
	726, 724, 725, 727, 729, 730, 731, 733, 
	734, 523, 737, 737, 738, 739, 740, 742, 
	737, 737, 737, 741, 737, 741, 737, 743, 
	737, 745, 744, 744, 746, 747, 744, 748, 
	750, 744, 744, 744, 744, 749, 744, 749, 
	751, 744, 753, 752, 752, 756, 757, 758, 
	752, 759, 761, 764, 765, 766, 767, 768, 
	752, 769, 770, 774, 797, 801, 752, 802, 
	804, 806, 752, 807, 808, 810, 814, 816, 
	817, 752, 819, 837, 842, 849, 857, 864, 
	871, 876, 877, 881, 875, 886, 896, 902, 
	905, 914, 918, 922, 923, 924, 754, 752, 
	755, 752, 752, 752, 752, 752, 752, 760, 
	752, 760, 752, 141, 763, 752, 752, 752, 
	752, 752, 752, 752, 771, 752, 752, 142, 
	144, 752, 145, 781, 789, 792, 776, 793, 
	794, 782, 786, 787, 752, 776, 145, 778, 
	779, 146, 752, 778, 752, 752, 780, 752, 
	783, 785, 752, 783, 784, 786, 787, 785, 
	752, 752, 788, 752, 752, 790, 785, 786, 
	787, 790, 791, 752, 783, 785, 786, 787, 
	752, 783, 785, 786, 787, 752, 795, 785, 
	786, 787, 795, 796, 752, 145, 797, 776, 
	798, 786, 787, 799, 785, 145, 799, 776, 
	800, 803, 805, 147, 148, 752, 752, 811, 
	812, 813, 808, 815, 752, 752, 818, 752, 
	752, 820, 821, 830, 835, 822, 823, 824, 
	825, 826, 827, 828, 829, 753, 831, 832, 
	833, 834, 753, 836, 838, 841, 839, 840, 
	753, 753, 843, 846, 844, 845, 847, 848, 
	753, 850, 852, 851, 853, 854, 855, 752, 
	752, 858, 753, 859, 752, 860, 861, 862, 
	863, 754, 865, 868, 866, 867, 869, 870, 
	872, 873, 874, 753, 878, 879, 880, 882, 
	884, 885, 883, 753, 887, 888, 889, 892, 
	890, 891, 893, 894, 895, 897, 899, 898, 
	900, 901, 903, 904, 906, 907, 909, 912, 
	908, 910, 911, 913, 915, 916, 917, 919, 
	920, 921, 752, 752, 925, 926, 927, 925, 
	929, 928, 930, 928, 931, 932, 933, 928, 
	928
]

class << self
	attr_accessor :_lex_trans_actions
	private :_lex_trans_actions, :_lex_trans_actions=
end
self._lex_trans_actions = [
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 2, 3, 4, 0, 5, 0, 
	0, 0, 6, 0, 7, 0, 8, 0, 
	7, 0, 0, 0, 0, 8, 7, 0, 
	8, 0, 7, 7, 0, 0, 0, 0, 
	0, 0, 0, 9, 0, 10, 0, 0, 
	0, 11, 0, 7, 0, 8, 0, 7, 
	0, 0, 0, 0, 8, 7, 0, 8, 
	0, 7, 7, 0, 0, 0, 0, 0, 
	0, 0, 12, 0, 13, 0, 0, 0, 
	0, 14, 0, 0, 0, 0, 0, 0, 
	15, 16, 17, 0, 0, 18, 19, 0, 
	0, 20, 21, 22, 23, 24, 25, 25, 
	26, 27, 25, 28, 27, 29, 27, 25, 
	25, 26, 25, 30, 25, 25, 31, 25, 
	25, 25, 25, 25, 25, 0, 32, 33, 
	0, 34, 33, 35, 33, 0, 0, 32, 
	0, 36, 0, 0, 0, 0, 0, 0, 
	0, 0, 23, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 37, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 38, 39, 40, 41, 0, 0, 0, 
	41, 24, 42, 25, 25, 25, 42, 43, 
	44, 45, 0, 0, 0, 0, 0, 46, 
	47, 0, 48, 49, 0, 50, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 51, 
	51, 52, 0, 24, 0, 53, 0, 7, 
	0, 8, 0, 7, 0, 0, 0, 0, 
	8, 7, 0, 8, 0, 7, 7, 0, 
	0, 0, 0, 0, 0, 0, 0, 54, 
	0, 0, 0, 0, 54, 55, 0, 0, 
	0, 56, 57, 58, 59, 0, 7, 7, 
	60, 61, 61, 0, 0, 0, 24, 0, 
	0, 0, 25, 62, 25, 25, 25, 63, 
	64, 65, 64, 64, 64, 0, 66, 67, 
	66, 66, 66, 68, 69, 70, 71, 0, 
	72, 73, 74, 77, 78, 0, 24, 0, 
	7, 0, 7, 79, 80, 81, 63, 82, 
	0, 83, 0, 84, 85, 86, 0, 87, 
	88, 0, 89, 7, 7, 90, 91, 0, 
	0, 92, 93, 94, 95, 95, 95, 95, 
	95, 95, 95, 95, 96, 97, 98, 0, 
	0, 99, 0, 100, 101, 102, 0, 103, 
	104, 105, 0, 7, 0, 0, 106, 107, 
	0, 24, 108, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 109, 110, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 111, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 112, 113, 114, 0, 
	115, 116, 117, 7, 7, 118, 0, 0, 
	119, 120, 121, 95, 95, 95, 95, 95, 
	95, 95, 95, 122, 123, 124, 0, 0, 
	125, 0, 126, 127, 128, 0, 129, 130, 
	131, 0, 7, 0, 0, 132, 133, 0, 
	24, 134, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 135, 136, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	137, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 138, 139, 140, 0, 141, 
	142, 0, 143, 0, 144, 145, 146, 147, 
	148, 149, 0, 150, 151, 152, 153, 154, 
	155, 7, 156, 0, 0, 157, 158, 159, 
	160, 161, 162, 0, 163, 0, 0, 164, 
	165, 166, 167, 168, 169, 0, 24, 0, 
	0, 7, 170, 0, 0, 0, 0, 0, 
	0, 0, 171, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 172, 173, 174, 175, 176, 177, 63, 
	178, 0, 179, 0, 0, 0, 180, 181, 
	182, 0, 0, 183, 0, 0, 0, 184, 
	0, 185, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 184, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 186, 0, 0, 0, 0, 187, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 7, 
	188, 189, 0, 0, 0, 190, 191, 192, 
	63, 193, 0, 24, 194, 0, 195, 196, 
	0, 24, 0, 0, 197, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 198, 
	0, 199, 0, 200, 201, 202, 203, 204, 
	63, 205, 0, 0, 206, 0, 207, 208, 
	209, 210, 24, 0, 23, 0, 0, 23, 
	0, 0, 0, 0, 0, 0, 7, 7, 
	7, 211, 212, 213, 214, 215, 216, 217, 
	0, 218, 219, 220, 221, 222, 223, 224, 
	225, 226, 63, 227, 0, 228, 229, 230, 
	231, 232, 233, 0, 0, 0, 234, 7, 
	7, 0, 235, 236, 237, 238, 239, 0, 
	0, 0, 0, 0, 240, 241, 63, 242, 
	0, 243, 24, 244, 245, 246, 247, 248, 
	249, 0, 24, 0, 0, 0, 0, 0, 
	0, 250, 251, 252, 253, 63, 254, 0, 
	255, 24, 256, 257, 258, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 259, 260, 0, 8, 0, 0, 7, 
	261, 0, 0, 0, 0, 0, 0, 7, 
	7, 0, 262, 0, 262, 262, 262, 0, 
	0, 262, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 0, 262, 263, 264, 0, 
	265, 266, 0, 54, 0, 267, 0, 268, 
	269, 270, 271, 272, 25, 273, 274, 275, 
	276, 277, 63, 278, 0, 279, 280, 0, 
	281, 282, 0, 283, 284, 261, 285, 0, 
	286, 0, 0, 287, 0, 0, 0, 0, 
	288, 0, 0, 0, 0, 0, 0, 289, 
	0, 0, 290, 0, 291, 292, 0, 0, 
	0, 293, 0, 0, 294, 295, 296, 297, 
	0, 0, 0, 298, 299, 0, 300, 301, 
	302, 0, 7, 303, 304, 305, 0, 306, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	307, 308, 309, 0, 0, 310, 0, 311, 
	312, 313, 0, 314, 315, 316, 0, 7, 
	0, 0, 317, 318, 0, 24, 319, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	320, 321, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 322, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 323, 324, 325, 0, 
	0, 0, 326, 24, 327, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 54, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 328, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 329, 
	330, 331, 332, 333, 333, 329, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 334, 335, 336, 0, 24, 0, 0, 
	337, 338, 339, 63, 340, 0, 341, 24, 
	342, 7, 343, 344, 0, 24, 345, 0, 
	0, 346, 347, 348, 349, 63, 350, 0, 
	24, 351, 352, 353, 354, 0, 24, 0, 
	355, 0, 7, 0, 0, 0, 0, 0, 
	356, 0, 0, 357, 357, 0, 358, 0, 
	0, 0, 359, 7, 360, 360, 360, 0, 
	0, 361, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 362, 363, 
	0, 364, 365, 366, 367, 368, 369, 63, 
	370, 0, 371, 0, 0, 372, 373, 374, 
	375, 376, 377, 378, 0, 379, 380, 0, 
	0, 381, 382, 383, 0, 0, 384, 0, 
	0, 383, 385, 385, 386, 387, 0, 388, 
	388, 0, 389, 390, 391, 392, 0, 393, 
	383, 383, 394, 0, 0, 395, 395, 0, 
	396, 397, 0, 398, 399, 400, 400, 401, 
	401, 0, 0, 402, 403, 403, 404, 404, 
	405, 406, 406, 407, 407, 408, 409, 409, 
	410, 410, 0, 0, 411, 412, 413, 414, 
	415, 416, 416, 413, 415, 417, 357, 418, 
	0, 0, 0, 0, 0, 419, 420, 360, 
	360, 360, 421, 360, 422, 423, 24, 424, 
	425, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 426, 0, 0, 
	0, 0, 421, 0, 0, 0, 0, 0, 
	427, 428, 0, 0, 0, 0, 0, 0, 
	429, 0, 0, 0, 0, 0, 428, 430, 
	431, 0, 432, 0, 433, 0, 0, 0, 
	0, 434, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 435, 0, 0, 0, 0, 
	0, 0, 0, 434, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 436, 437, 438, 7, 72, 439, 
	0, 440, 0, 441, 0, 0, 0, 442, 
	443
]

class << self
	attr_accessor :_lex_to_state_actions
	private :_lex_to_state_actions, :_lex_to_state_actions=
end
self._lex_to_state_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 75, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	75, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 75, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 75, 0, 0, 75, 0, 75, 0, 
	0, 0, 75, 75, 0, 75, 0, 0, 
	0, 0, 75, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 75, 0, 0, 0, 0, 0, 
	0, 75, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 75, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 75, 0, 0, 
	0, 0, 0, 75, 0, 0, 0, 0, 
	0, 0, 0, 75, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 75, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 75, 0, 0, 0, 0, 0, 0, 
	75, 0, 0, 0, 0, 0, 0, 0, 
	75, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 75, 0, 0, 
	75, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_lex_from_state_actions
	private :_lex_from_state_actions, :_lex_from_state_actions=
end
self._lex_from_state_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 76, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	76, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 76, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 76, 0, 0, 76, 0, 76, 0, 
	0, 0, 76, 76, 0, 76, 0, 0, 
	0, 0, 76, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 76, 0, 0, 0, 0, 0, 
	0, 76, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 76, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 76, 0, 0, 
	0, 0, 0, 76, 0, 0, 0, 0, 
	0, 0, 0, 76, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 76, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 76, 0, 0, 0, 0, 0, 0, 
	76, 0, 0, 0, 0, 0, 0, 0, 
	76, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 76, 0, 0, 
	76, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_lex_eof_trans
	private :_lex_eof_trans, :_lex_eof_trans=
end
self._lex_eof_trans = [
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 13, 13, 13, 13, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 44, 44, 44, 
	44, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 75, 
	75, 75, 75, 0, 0, 0, 0, 89, 
	91, 91, 95, 95, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 170, 172, 172, 
	172, 184, 186, 186, 186, 186, 186, 192, 
	184, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 184, 196, 196, 
	196, 196, 246, 246, 246, 251, 253, 253, 
	253, 257, 257, 251, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 287, 287, 0, 
	300, 301, 302, 304, 306, 308, 306, 306, 
	0, 318, 319, 323, 323, 324, 333, 334, 
	335, 335, 335, 338, 338, 340, 341, 342, 
	342, 342, 344, 345, 346, 346, 342, 338, 
	338, 351, 352, 352, 352, 352, 352, 355, 
	355, 355, 355, 355, 355, 355, 355, 365, 
	366, 366, 366, 366, 378, 378, 378, 366, 
	366, 366, 366, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 389, 378, 390, 391, 
	391, 0, 398, 402, 402, 403, 412, 413, 
	414, 414, 414, 417, 417, 419, 420, 421, 
	421, 421, 423, 424, 425, 425, 421, 417, 
	417, 430, 431, 431, 431, 431, 431, 434, 
	434, 434, 434, 434, 434, 434, 434, 444, 
	445, 445, 445, 445, 457, 457, 457, 445, 
	445, 445, 445, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 468, 457, 469, 470, 
	470, 0, 477, 478, 0, 484, 0, 491, 
	495, 495, 0, 0, 501, 0, 504, 504, 
	505, 506, 0, 546, 548, 549, 550, 551, 
	553, 555, 559, 559, 550, 550, 550, 560, 
	550, 550, 555, 550, 550, 546, 564, 564, 
	564, 564, 564, 564, 555, 555, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 603, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 550, 0, 646, 647, 648, 650, 646, 
	653, 0, 672, 674, 676, 677, 678, 679, 
	680, 682, 679, 679, 679, 679, 679, 685, 
	679, 679, 687, 685, 685, 679, 0, 706, 
	707, 95, 95, 710, 711, 95, 707, 707, 
	714, 716, 719, 707, 720, 707, 721, 722, 
	724, 726, 707, 714, 727, 727, 716, 727, 
	731, 727, 727, 727, 727, 0, 170, 739, 
	740, 739, 739, 0, 749, 750, 752, 754, 
	756, 754, 758, 0, 770, 771, 772, 773, 
	775, 777, 779, 780, 780, 780, 780, 780, 
	780, 780, 780, 780, 780, 780, 780, 780, 
	780, 780, 780, 0, 184, 838, 841, 842, 
	846, 848, 849, 850, 851, 852, 854, 857, 
	858, 860, 862, 865, 866, 868, 869, 184, 
	866, 866, 857, 857, 857, 857, 888, 891, 
	893, 894, 898, 901, 902, 903, 904, 888, 
	888, 888, 888, 888, 888, 888, 888, 888, 
	888, 888, 857, 908, 857, 857, 857, 909, 
	916, 916, 918, 920, 929, 930, 931, 931, 
	931, 934, 934, 936, 937, 938, 938, 938, 
	940, 941, 942, 942, 938, 934, 934, 947, 
	948, 948, 948, 948, 948, 951, 951, 951, 
	951, 951, 951, 951, 951, 961, 962, 962, 
	962, 962, 974, 974, 974, 962, 962, 962, 
	962, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 989, 
	990, 991, 991, 184, 857, 857, 995, 857, 
	852, 997, 997, 997, 997, 997, 997, 997, 
	997, 997, 997, 997, 997, 997, 997, 997, 
	997, 997, 997, 997, 997, 997, 997, 997, 
	997, 997, 997, 997, 997, 997, 997, 997, 
	997, 997, 997, 997, 997, 997, 997, 997, 
	997, 997, 997, 997, 997, 997, 997, 997, 
	997, 997, 997, 997, 997, 997, 997, 997, 
	997, 997, 997, 997, 1049, 842, 997, 997, 
	997, 997, 997, 997, 997, 997, 997, 997, 
	997, 997, 997, 997, 997, 997, 997, 997, 
	997, 997, 997, 997, 997, 997, 997, 1074, 
	857, 0, 1081, 1082, 1083, 1085, 1087, 1089, 
	0, 1098, 1099, 1100, 1101, 1103, 1098, 1106, 
	0, 257, 1160, 1162, 1163, 1164, 1165, 1167, 
	1169, 1171, 1174, 1174, 1165, 1165, 1177, 1178, 
	1165, 1165, 1180, 1182, 1183, 1183, 1186, 1197, 
	257, 1203, 1205, 1206, 1208, 1186, 1186, 1211, 
	1211, 1211, 1217, 1218, 1220, 1221, 1211, 1211, 
	1228, 1233, 1238, 1211, 1211, 1245, 1245, 1211, 
	1211, 1182, 1165, 1165, 1182, 1165, 1165, 1171, 
	257, 1262, 1263, 1263, 1263, 1263, 1263, 1263, 
	1269, 1171, 1272, 1273, 1273, 1273, 1273, 1273, 
	1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 
	1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 
	1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 
	1273, 1273, 1273, 1273, 1273, 1273, 1273, 1312, 
	1313, 1273, 1273, 1317, 1273, 1273, 1273, 1273, 
	1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 
	1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 
	1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 
	1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 
	1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 
	1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 
	1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 
	1273, 1273, 1371, 1165, 1372, 0, 1376, 1376, 
	0, 1380, 1380, 1380, 1380, 1384
]

class << self
	attr_accessor :lex_start
end
self.lex_start = 159;
class << self
	attr_accessor :lex_error
end
self.lex_error = 0;

class << self
	attr_accessor :lex_en_interp_words
end
self.lex_en_interp_words = 168;
class << self
	attr_accessor :lex_en_interp_string
end
self.lex_en_interp_string = 233;
class << self
	attr_accessor :lex_en_plain_words
end
self.lex_en_plain_words = 297;
class << self
	attr_accessor :lex_en_plain_string
end
self.lex_en_plain_string = 300;
class << self
	attr_accessor :lex_en_interp_backslash_delimited
end
self.lex_en_interp_backslash_delimited = 302;
class << self
	attr_accessor :lex_en_plain_backslash_delimited
end
self.lex_en_plain_backslash_delimited = 306;
class << self
	attr_accessor :lex_en_regexp_modifiers
end
self.lex_en_regexp_modifiers = 307;
class << self
	attr_accessor :lex_en_expr_variable
end
self.lex_en_expr_variable = 309;
class << self
	attr_accessor :lex_en_expr_fname
end
self.lex_en_expr_fname = 314;
class << self
	attr_accessor :lex_en_expr_endfn
end
self.lex_en_expr_endfn = 426;
class << self
	attr_accessor :lex_en_expr_dot
end
self.lex_en_expr_dot = 433;
class << self
	attr_accessor :lex_en_expr_arg
end
self.lex_en_expr_arg = 454;
class << self
	attr_accessor :lex_en_expr_cmdarg
end
self.lex_en_expr_cmdarg = 485;
class << self
	attr_accessor :lex_en_expr_endarg
end
self.lex_en_expr_endarg = 491;
class << self
	attr_accessor :lex_en_expr_mid
end
self.lex_en_expr_mid = 499;
class << self
	attr_accessor :lex_en_expr_beg
end
self.lex_en_expr_beg = 523;
class << self
	attr_accessor :lex_en_expr_labelarg
end
self.lex_en_expr_labelarg = 737;
class << self
	attr_accessor :lex_en_expr_value
end
self.lex_en_expr_value = 744;
class << self
	attr_accessor :lex_en_expr_end
end
self.lex_en_expr_end = 752;
class << self
	attr_accessor :lex_en_leading_dot
end
self.lex_en_leading_dot = 925;
class << self
	attr_accessor :lex_en_line_comment
end
self.lex_en_line_comment = 928;
class << self
	attr_accessor :lex_en_line_begin
end
self.lex_en_line_begin = 159;


# line 82 "lib/parser/lexer.rl"
  # %

  ESCAPES = {
    ?a.ord => "\a", ?b.ord  => "\b", ?e.ord => "\e", ?f.ord => "\f",
    ?n.ord => "\n", ?r.ord  => "\r", ?s.ord => "\s", ?t.ord => "\t",
    ?v.ord => "\v", ?\\.ord => "\\"
  }.freeze

  REGEXP_META_CHARACTERS = Regexp.union(*"\\$()*+.<>?[]^{|}".chars).freeze

  RBRACE_OR_RBRACK = %w"} ]".freeze

  attr_reader   :source_buffer

  attr_accessor :diagnostics
  attr_accessor :static_env
  attr_accessor :force_utf32

  attr_accessor :cond, :cmdarg, :in_kwarg

  attr_accessor :tokens, :comments

  def initialize(version)
    @version    = version
    @static_env = nil

    @tokens     = nil
    @comments   = nil

    reset
  end

  def reset(reset_state=true)
    # Ragel state:
    if reset_state
      # Unit tests set state prior to resetting lexer.
      @cs     = self.class.lex_en_line_begin

      @cond   = StackState.new('cond')
      @cmdarg = StackState.new('cmdarg')
      @cond_stack   = []
      @cmdarg_stack = []
    end

    @force_utf32   = false # Set to true by some tests

    @source_pts    = nil # @source as a codepoint array

    @p             = 0   # stream position (saved manually in #advance)
    @ts            = nil # token start
    @te            = nil # token end
    @act           = 0   # next action

    @stack         = []  # state stack
    @top           = 0   # state stack top pointer

    # Lexer state:
    @token_queue   = []
    @literal_stack = []

    @eq_begin_s    = nil # location of last encountered =begin
    @sharp_s       = nil # location of last encountered #

    @newline_s     = nil # location of last encountered newline

    @num_base      = nil # last numeric base
    @num_digits_s  = nil # starting position of numeric digits
    @num_suffix_s  = nil # starting position of numeric suffix
    @num_xfrm      = nil # numeric suffix-induced transformation

    @escape_s      = nil # starting position of current sequence
    @escape        = nil # last escaped sequence, as string

    @herebody_s    = nil # starting position of current heredoc line

    # Ruby 1.9 ->() lambdas emit a distinct token if do/{ is
    # encountered after a matching closing parenthesis.
    @paren_nest    = 0
    @lambda_stack  = []

    # After encountering the closing line of <<~SQUIGGLY_HEREDOC,
    # we store the indentation level and give it out to the parser
    # on request. It is not possible to infer indentation level just
    # from the AST because escape sequences such as `\ ` or `\t` are
    # expanded inside the lexer, but count as non-whitespace for
    # indentation purposes.
    @dedent_level  = nil

    # If the lexer is in `command state' (aka expr_value)
    # at the entry to #advance, it will transition to expr_cmdarg
    # instead of expr_arg at certain points.
    @command_state = false

    # True at the end of "def foo a:"
    @in_kwarg      = false
  end

  def source_buffer=(source_buffer)
    @source_buffer = source_buffer

    if @source_buffer
      source = @source_buffer.source

      if defined?(Encoding) && source.encoding == Encoding::UTF_8
        @source_pts = source.unpack('U*')
      else
        @source_pts = source.unpack('C*')
      end

      if @source_pts[0] == 0xfeff
        # Skip byte order mark.
        @p = 1
      end
    else
      @source_pts = nil
    end
  end

  def encoding
    @source_buffer.source.encoding
  end

  LEX_STATES = {
    :line_begin    => lex_en_line_begin,
    :expr_dot      => lex_en_expr_dot,
    :expr_fname    => lex_en_expr_fname,
    :expr_value    => lex_en_expr_value,
    :expr_beg      => lex_en_expr_beg,
    :expr_mid      => lex_en_expr_mid,
    :expr_arg      => lex_en_expr_arg,
    :expr_cmdarg   => lex_en_expr_cmdarg,
    :expr_end      => lex_en_expr_end,
    :expr_endarg   => lex_en_expr_endarg,
    :expr_endfn    => lex_en_expr_endfn,
    :expr_labelarg => lex_en_expr_labelarg,

    :interp_string => lex_en_interp_string,
    :interp_words  => lex_en_interp_words,
    :plain_string  => lex_en_plain_string,
    :plain_words   => lex_en_plain_string,
  }

  def state
    LEX_STATES.invert.fetch(@cs, @cs)
  end

  def state=(state)
    @cs = LEX_STATES.fetch(state)
  end

  def push_cmdarg
    @cmdarg_stack.push(@cmdarg)
    @cmdarg = StackState.new("cmdarg.#{@cmdarg_stack.count}")
  end

  def pop_cmdarg
    @cmdarg = @cmdarg_stack.pop
  end

  def push_cond
    @cond_stack.push(@cond)
    @cond = StackState.new("cond.#{@cond_stack.count}")
  end

  def pop_cond
    @cond = @cond_stack.pop
  end

  def dedent_level
    # We erase @dedent_level as a precaution to avoid accidentally
    # using a stale value.
    dedent_level, @dedent_level = @dedent_level, nil
    dedent_level
  end

  # Return next token: [type, value].
  def advance
    if @token_queue.any?
      return @token_queue.shift
    end

    # Ugly, but dependent on Ragel output. Consider refactoring it somehow.
    klass = self.class
    _lex_trans_keys         = klass.send :_lex_trans_keys
    _lex_key_spans          = klass.send :_lex_key_spans
    _lex_index_offsets      = klass.send :_lex_index_offsets
    _lex_indicies           = klass.send :_lex_indicies
    _lex_trans_targs        = klass.send :_lex_trans_targs
    _lex_trans_actions      = klass.send :_lex_trans_actions
    _lex_to_state_actions   = klass.send :_lex_to_state_actions
    _lex_from_state_actions = klass.send :_lex_from_state_actions
    _lex_eof_trans          = klass.send :_lex_eof_trans

    pe = @source_pts.size + 2
    p, eof = @p, pe

    @command_state = (@cs == klass.lex_en_expr_value ||
                      @cs == klass.lex_en_line_begin)

    
# line 10779 "lib/parser/lexer.rb"
begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if  @cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	case _lex_from_state_actions[ @cs] 
	when 76 then
# line 1 "NONE"
		begin
 @ts = p
		end
# line 10807 "lib/parser/lexer.rb"
	end
	_keys =  @cs << 1
	_inds = _lex_index_offsets[ @cs]
	_slen = _lex_key_spans[ @cs]
	_wide = ( (@source_pts[p] || 0))
	_trans = if (   _slen > 0 && 
			_lex_trans_keys[_keys] <= _wide && 
			_wide <= _lex_trans_keys[_keys + 1] 
		    ) then
			_lex_indicies[ _inds + _wide - _lex_trans_keys[_keys] ] 
		 else 
			_lex_indicies[ _inds + _slen ]
		 end
	end
	if _goto_level <= _eof_trans
	 @cs = _lex_trans_targs[_trans]
	if _lex_trans_actions[_trans] != 0
	case _lex_trans_actions[_trans]
	when 24 then
# line 486 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 95 then
# line 766 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
	when 25 then
# line 806 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
	when 63 then
# line 1108 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
	when 66 then
# line 1111 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
	when 264 then
# line 1152 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 32 then
# line 1410 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 34 then
# line 1426 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 36 then
# line 1454 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 51 then
# line 1640 "lib/parser/lexer.rl"
		begin
 heredoc_e      = p 		end
	when 304 then
# line 1694 "lib/parser/lexer.rl"
		begin
 @escape = nil 		end
	when 333 then
# line 1763 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 409 then
# line 1981 "lib/parser/lexer.rl"
		begin
 @num_base = 16; @num_digits_s = p 		end
	when 403 then
# line 1982 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = p 		end
	when 406 then
# line 1983 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = p 		end
	when 400 then
# line 1984 "lib/parser/lexer.rl"
		begin
 @num_base = 2;  @num_digits_s = p 		end
	when 415 then
# line 1985 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
	when 383 then
# line 1986 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
	when 395 then
# line 1987 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 390 then
# line 2044 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 388 then
# line 2045 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 72 then
# line 2180 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 7 then
# line 1 "NONE"
		begin
 @te = p+1
		end
	when 92 then
# line 1007 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DBEG, '#{'.freeze)

    if current_literal.heredoc?
      current_literal.saved_herebody_s = @herebody_s
      @herebody_s = nil
    end

    current_literal.start_interp_brace
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 744
		_goto_level = _again
		next
	end

   end
		end
	when 5 then
# line 952 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 309
		_goto_level = _again
		next
	end

   end
		end
	when 88 then
# line 877 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 87 then
# line 815 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 737;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 93 then
# line 952 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 309
		_goto_level = _again
		next
	end

   end
		end
	when 90 then
# line 939 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    literal.extend_space @ts, @te
   end
		end
	when 91 then
# line 815 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 737;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 6 then
# line 839 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 4 then
# line 815 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 737;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 119 then
# line 1007 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DBEG, '#{'.freeze)

    if current_literal.heredoc?
      current_literal.saved_herebody_s = @herebody_s
      @herebody_s = nil
    end

    current_literal.start_interp_brace
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 744
		_goto_level = _again
		next
	end

   end
		end
	when 10 then
# line 952 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 309
		_goto_level = _again
		next
	end

   end
		end
	when 116 then
# line 877 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 115 then
# line 815 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 737;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 120 then
# line 952 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 309
		_goto_level = _again
		next
	end

   end
		end
	when 118 then
# line 815 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 737;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 11 then
# line 839 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 9 then
# line 815 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 737;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 142 then
# line 877 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 141 then
# line 815 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 737;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 144 then
# line 939 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    literal.extend_space @ts, @te
   end
		end
	when 145 then
# line 815 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 737;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 148 then
# line 877 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 147 then
# line 815 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 737;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 150 then
# line 815 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 737;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 157 then
# line 1007 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DBEG, '#{'.freeze)

    if current_literal.heredoc?
      current_literal.saved_herebody_s = @herebody_s
      @herebody_s = nil
    end

    current_literal.start_interp_brace
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 744
		_goto_level = _again
		next
	end

   end
		end
	when 13 then
# line 952 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 309
		_goto_level = _again
		next
	end

   end
		end
	when 154 then
# line 877 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 153 then
# line 815 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 737;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 158 then
# line 952 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 309
		_goto_level = _again
		next
	end

   end
		end
	when 156 then
# line 815 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 737;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 12 then
# line 815 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 737;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 160 then
# line 877 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 159 then
# line 815 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 737;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 162 then
# line 1083 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tREGEXP_OPT, tok(@ts, @te - 1), @ts, @te - 1)
        p = p - 1; 	begin
		 @cs = 752
		_goto_level = _again
		next
	end

       end
		end
	when 163 then
# line 1071 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        unknown_options = tok.scan(/[^imxouesn]/)
        if unknown_options.any?
          diagnostic :error, :regexp_options,
                     { :options => unknown_options.join }
        end

        emit(:tREGEXP_OPT)
         @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 14 then
# line 1211 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        if    tok =~ /^\$([1-9][0-9]*)$/
          emit(:tNTH_REF, tok(@ts + 1).to_i)
        elsif tok =~ /^\$([&`'+])$/
          emit(:tBACK_REF)
        else
          emit(:tGVAR)
        end

         @cs = (stack_pop); 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 164 then
# line 1211 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if    tok =~ /^\$([1-9][0-9]*)$/
          emit(:tNTH_REF, tok(@ts + 1).to_i)
        elsif tok =~ /^\$([&`'+])$/
          emit(:tBACK_REF)
        else
          emit(:tGVAR)
        end

         @cs = (stack_pop); 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 166 then
# line 1224 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if tok =~ /^@@[0-9]/
          diagnostic :error, :cvar_name, { :name => tok }
        end

        emit(:tCVAR)
         @cs = (stack_pop); 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 165 then
# line 1234 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if tok =~ /^@[0-9]/
          diagnostic :error, :ivar_name, { :name => tok }
        end

        emit(:tIVAR)
         @cs = (stack_pop); 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 187 then
# line 1255 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(KEYWORDS_BEGIN);
            @cs = 426; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 173 then
# line 1263 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tIDENTIFIER)
            @cs = 426; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 16 then
# line 1267 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1
            @cs = 752; 	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 309
		_goto_level = _again
		next
	end
  end
		end
	when 170 then
# line 1276 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 426; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 182 then
# line 1280 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; p = p - 1; 	begin
		 @cs = 752
		_goto_level = _again
		next
	end
  end
		end
	when 169 then
# line 1288 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 752
		_goto_level = _again
		next
	end
  end
		end
	when 168 then
# line 512 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 186 then
# line 1255 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(KEYWORDS_BEGIN);
            @cs = 426; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 183 then
# line 1259 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tCONSTANT)
            @cs = 426; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 185 then
# line 1263 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tIDENTIFIER)
            @cs = 426; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 180 then
# line 1267 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
            @cs = 752; 	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 309
		_goto_level = _again
		next
	end
  end
		end
	when 176 then
# line 1276 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 426; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 181 then
# line 1283 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 523
		_goto_level = _again
		next
	end
  end
		end
	when 174 then
# line 1285 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 179 then
# line 1288 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 752
		_goto_level = _again
		next
	end
  end
		end
	when 15 then
# line 1288 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 752
		_goto_level = _again
		next
	end
  end
		end
	when 172 then
# line 1 "NONE"
		begin
	case  @act
	when 31 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS_BEGIN);
            @cs = 426; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 32 then
	begin begin p = (( @te))-1; end
 emit(:tCONSTANT)
            @cs = 426; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 33 then
	begin begin p = (( @te))-1; end
 emit(:tIDENTIFIER)
            @cs = 426; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
end 
			end
	when 18 then
# line 1300 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tLABEL, tok(@ts, @te - 1))
            @cs = 737; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 189 then
# line 1306 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 752
		_goto_level = _again
		next
	end
  end
		end
	when 188 then
# line 512 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 191 then
# line 1303 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 190 then
# line 1306 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 752
		_goto_level = _again
		next
	end
  end
		end
	when 17 then
# line 1306 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 752
		_goto_level = _again
		next
	end
  end
		end
	when 197 then
# line 1332 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 454; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 196 then
# line 1338 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 752
		_goto_level = _again
		next
	end
  end
		end
	when 195 then
# line 512 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 207 then
# line 1317 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tCONSTANT)
            @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 198 then
# line 1321 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tIDENTIFIER)
            @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 203 then
# line 1332 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 454; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 201 then
# line 1335 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 206 then
# line 1338 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 752
		_goto_level = _again
		next
	end
  end
		end
	when 230 then
# line 1396 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        # Unlike expr_beg as invoked in the next rule, do not warn
        p = @ts - 1
        	begin
		 @cs = 752
		_goto_level = _again
		next
	end

       end
		end
	when 213 then
# line 1414 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        if tok(tm, tm + 1) == '/'.freeze
          # Ambiguous regexp literal.
          diagnostic :warning, :ambiguous_literal, nil, range(tm, tm + 1)
        end

        p = tm - 1
        	begin
		 @cs = 523
		_goto_level = _again
		next
	end

       end
		end
	when 219 then
# line 1438 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; p = p - 1; 	begin
		 @cs = 523
		_goto_level = _again
		next
	end
  end
		end
	when 20 then
# line 1446 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1; 	begin
		 @cs = 523
		_goto_level = _again
		next
	end
  end
		end
	when 221 then
# line 1455 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = tm - 1; 	begin
		 @cs = 752
		_goto_level = _again
		next
	end
  end
		end
	when 35 then
# line 1464 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = @ts - 1
        	begin
		 @cs = 752
		_goto_level = _again
		next
	end

       end
		end
	when 208 then
# line 1478 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 523
		_goto_level = _again
		next
	end
  end
		end
	when 209 then
# line 512 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 220 then
# line 1405 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 523
		_goto_level = _again
		next
	end
  end
		end
	when 216 then
# line 1427 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :warning, :ambiguous_prefix, { :prefix => tok(tm, @te) },
                   range(tm, @te)

        p = tm - 1
        	begin
		 @cs = 523
		_goto_level = _again
		next
	end

       end
		end
	when 218 then
# line 1443 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 523
		_goto_level = _again
		next
	end
  end
		end
	when 212 then
# line 1464 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        p = @ts - 1
        	begin
		 @cs = 752
		_goto_level = _again
		next
	end

       end
		end
	when 211 then
# line 1469 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 229 then
# line 1478 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 523
		_goto_level = _again
		next
	end
  end
		end
	when 21 then
# line 1469 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
		end
	when 37 then
# line 1478 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 523
		_goto_level = _again
		next
	end
  end
		end
	when 19 then
# line 1 "NONE"
		begin
	case  @act
	when 58 then
	begin begin p = (( @te))-1; end

        if tok(tm, tm + 1) == '/'.freeze
          # Ambiguous regexp literal.
          diagnostic :warning, :ambiguous_literal, nil, range(tm, tm + 1)
        end

        p = tm - 1
        	begin
		 @cs = 523
		_goto_level = _again
		next
	end

      end
	when 59 then
	begin begin p = (( @te))-1; end

        diagnostic :warning, :ambiguous_prefix, { :prefix => tok(tm, @te) },
                   range(tm, @te)

        p = tm - 1
        	begin
		 @cs = 523
		_goto_level = _again
		next
	end

      end
	when 64 then
	begin begin p = (( @te))-1; end

        p = @ts - 1
        	begin
		 @cs = 752
		_goto_level = _again
		next
	end

      end
	else
	begin begin p = (( @te))-1; end
end
end 
			end
	when 39 then
# line 1514 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1
           	begin
		 @cs = 454
		_goto_level = _again
		next
	end
  end
		end
	when 234 then
# line 512 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 235 then
# line 1514 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 454
		_goto_level = _again
		next
	end
  end
		end
	when 40 then
# line 1514 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = @ts - 1
           	begin
		 @cs = 454
		_goto_level = _again
		next
	end
  end
		end
	when 38 then
# line 1 "NONE"
		begin
	case  @act
	when 71 then
	begin begin p = (( @te))-1; end

        if @cond.active?
          emit(:kDO_COND, 'do'.freeze, @te - 2, @te)
        else
          emit(:kDO, 'do'.freeze, @te - 2, @te)
        end
         @cs = 744; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 72 then
	begin begin p = (( @te))-1; end
 p = @ts - 1
           	begin
		 @cs = 454
		_goto_level = _again
		next
	end
 end
end 
			end
	when 245 then
# line 1541 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_do(true)
            @cs = 744; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 238 then
# line 1547 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 752
		_goto_level = _again
		next
	end
  end
		end
	when 239 then
# line 512 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 240 then
# line 1544 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 243 then
# line 1547 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 752
		_goto_level = _again
		next
	end
  end
		end
	when 249 then
# line 1571 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 523
		_goto_level = _again
		next
	end
  end
		end
	when 248 then
# line 512 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 257 then
# line 1563 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1; 	begin
		 @cs = 523
		_goto_level = _again
		next
	end
  end
		end
	when 251 then
# line 1565 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 255 then
# line 1571 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 523
		_goto_level = _again
		next
	end
  end
		end
	when 250 then
# line 1 "NONE"
		begin
	case  @act
	when 79 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 523; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 80 then
	begin begin p = (( @te))-1; end
 p = @ts - 1; 	begin
		 @cs = 523
		_goto_level = _again
		next
	end
 end
end 
			end
	when 285 then
# line 1588 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = p - 1;
        if tok.start_with? '-'.freeze
          emit(:tUMINUS_NUM, '-'.freeze, @ts, @ts + 1)
           @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
       end
		end
	when 286 then
# line 1608 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type = delimiter = tok[0].chr
        p = p - 1; 	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 280 then
# line 1615 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type, delimiter = @source_buffer.slice(@ts).chr, tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 47 then
# line 1622 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type, delimiter = tok[0..-2], tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 287 then
# line 1668 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type, delimiter = tok, tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 50 then
# line 1682 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tSYMBOL, tok(@ts + 1), @ts)
         @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 301 then
# line 1709 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        escape = { " "  => '\s', "\r" => '\r', "\n" => '\n', "\t" => '\t',
                   "\v" => '\v', "\f" => '\f' }[@source_buffer.slice(@ts + 1)]
        diagnostic :warning, :invalid_escape_use, { :escape => escape }, range

        p = @ts - 1
        	begin
		 @cs = 752
		_goto_level = _again
		next
	end

       end
		end
	when 300 then
# line 1719 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        diagnostic :fatal, :incomplete_escape, nil, range(@ts, @ts + 1)
       end
		end
	when 288 then
# line 1758 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 44 then
# line 1778 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = p - 1;

        if version?(18)
          ident = tok(@ts, @te - 2)

          emit((@source_buffer.slice(@ts) =~ /[A-Z]/) ? :tCONSTANT : :tIDENTIFIER,
               ident, @ts, @te - 2)
          p = p - 1; # continue as a symbol

          if !@static_env.nil? && @static_env.declared?(ident)
             @cs = 752;
          else
             @cs = (arg_or_cmdarg);
          end
        else
          emit(:tLABEL, tok(@ts, @te - 2), @ts, @te - 1)
           @cs = 737;
        end

        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 274 then
# line 1824 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1
           	begin
		 @cs = 159
		_goto_level = _again
		next
	end
  end
		end
	when 48 then
# line 1837 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1; 	begin
		 @cs = 752
		_goto_level = _again
		next
	end
  end
		end
	when 260 then
# line 512 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 284 then
# line 1598 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tSTAR, '*'.freeze)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 281 then
# line 1622 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        type, delimiter = tok[0..-2], tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 279 then
# line 1628 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :fatal, :string_eof, nil, range(@ts, @ts + 1)
       end
		end
	when 289 then
# line 1682 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1), @ts)
         @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 299 then
# line 1719 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :fatal, :incomplete_escape, nil, range(@ts, @ts + 1)
       end
		end
	when 305 then
# line 1725 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        p = @ts - 1
        	begin
		 @cs = 752
		_goto_level = _again
		next
	end

       end
		end
	when 282 then
# line 1758 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 327 then
# line 1196 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
   end
		end
	when 271 then
# line 1821 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 273 then
# line 1824 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 159
		_goto_level = _again
		next
	end
  end
		end
	when 276 then
# line 1837 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1; 	begin
		 @cs = 752
		_goto_level = _again
		next
	end
  end
		end
	when 46 then
# line 1628 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        diagnostic :fatal, :string_eof, nil, range(@ts, @ts + 1)
       end
		end
	when 53 then
# line 1696 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 45 then
# line 1821 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
		end
	when 49 then
# line 1837 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = @ts - 1; 	begin
		 @cs = 752
		_goto_level = _again
		next
	end
  end
		end
	when 43 then
# line 1 "NONE"
		begin
	case  @act
	when 102 then
	begin begin p = (( @te))-1; end
 emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 103 then
	begin begin p = (( @te))-1; end
 emit(:kRESCUE, 'rescue'.freeze, @ts, tm)
           p = tm - 1
            @cs = 499; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 104 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS_BEGIN)
            @cs = 744; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 106 then
	begin begin p = (( @te))-1; end
 p = @ts - 1
           	begin
		 @cs = 752
		_goto_level = _again
		next
	end
 end
	when 107 then
	begin begin p = (( @te))-1; end

    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
  end
	when 110 then
	begin begin p = (( @te))-1; end
 p = @ts - 1; 	begin
		 @cs = 752
		_goto_level = _again
		next
	end
 end
end 
			end
	when 335 then
# line 1857 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 523
		_goto_level = _again
		next
	end
  end
		end
	when 336 then
# line 512 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 337 then
# line 1845 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 341 then
# line 1857 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 523
		_goto_level = _again
		next
	end
  end
		end
	when 56 then
# line 1867 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1
           	begin
		 @cs = 752
		_goto_level = _again
		next
	end
  end
		end
	when 345 then
# line 1872 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        	begin
		 @cs = (push_literal(tok, tok, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 344 then
# line 1882 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 523
		_goto_level = _again
		next
	end
  end
		end
	when 343 then
# line 512 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 347 then
# line 1876 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 346 then
# line 1882 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 523
		_goto_level = _again
		next
	end
  end
		end
	when 55 then
# line 1882 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 523
		_goto_level = _again
		next
	end
  end
		end
	when 377 then
# line 1893 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tLAMBDA, '->'.freeze, @ts, @ts + 2)

        @lambda_stack.push @paren_nest
         @cs = 426; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 70 then
# line 1930 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:kCLASS, 'class'.freeze, @ts, @ts + 5)
           emit(:tLSHFT, '<<'.freeze,    @te - 2, @te)
            @cs = 744; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 355 then
# line 2065 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type, delimiter = tok, tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts, nil, false, false, true))
		_goto_level = _again
		next
	end

       end
		end
	when 58 then
# line 2083 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1; 	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 309
		_goto_level = _again
		next
	end
  end
		end
	when 374 then
# line 2090 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 433; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 368 then
# line 2117 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 523; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 361 then
# line 2121 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit_table(PUNCTUATION)
        @cond.lexpop; @cmdarg.lexpop

        if RBRACE_OR_RBRACK.include?(tok)
           @cs = 491;
        else # )
          # fnext expr_endfn; ?
        end

        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 373 then
# line 2135 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tOP_ASGN, tok(@ts, @te - 1))
            @cs = 523; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 359 then
# line 2139 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tEH, '?'.freeze)
            @cs = 744; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 356 then
# line 2147 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 523; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 358 then
# line 2160 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tSEMI, ';'.freeze)
            @cs = 744; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 423 then
# line 2163 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        diagnostic :error, :bare_backslash, nil, range(@ts, @ts + 1)
        p = p - 1;
       end
		end
	when 354 then
# line 2169 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        diagnostic :fatal, :unexpected, { :character => tok.inspect[1..-2] }
       end
		end
	when 353 then
# line 512 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 433 then
# line 1926 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(KEYWORDS)
            @cs = 314; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 431 then
# line 1930 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:kCLASS, 'class'.freeze, @ts, @ts + 5)
           emit(:tLSHFT, '<<'.freeze,    @te - 2, @te)
            @cs = 744; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 430 then
# line 1941 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(KEYWORDS)
            @cs = 744; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 380 then
# line 2015 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :error, :no_dot_digit_literal
       end
		end
	when 420 then
# line 2075 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tCONSTANT)
            @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 372 then
# line 2083 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1; 	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 309
		_goto_level = _again
		next
	end
  end
		end
	when 378 then
# line 2090 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 433; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 425 then
# line 1196 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
   end
		end
	when 367 then
# line 2117 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 523; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 379 then
# line 2147 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 523; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 365 then
# line 2154 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 371 then
# line 2169 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :fatal, :unexpected, { :character => tok.inspect[1..-2] }
       end
		end
	when 59 then
# line 2015 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        diagnostic :error, :no_dot_digit_literal
       end
		end
	when 57 then
# line 2169 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        diagnostic :fatal, :unexpected, { :character => tok.inspect[1..-2] }
       end
		end
	when 60 then
# line 1 "NONE"
		begin
	case  @act
	when 123 then
	begin begin p = (( @te))-1; end

        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop

          if tok == '{'.freeze
            emit(:tLAMBEG, '{'.freeze)
          else # 'do'
            emit(:kDO_LAMBDA, 'do'.freeze)
          end
        else
          if tok == '{'.freeze
            emit(:tLCURLY, '{'.freeze)
          else # 'do'
            emit_do
          end
        end

         @cs = 744; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 124 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 314; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 125 then
	begin begin p = (( @te))-1; end
 emit(:kCLASS, 'class'.freeze, @ts, @ts + 5)
           emit(:tLSHFT, '<<'.freeze,    @te - 2, @te)
            @cs = 744; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 126 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 523; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 127 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 744; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 128 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 499; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 129 then
	begin begin p = (( @te))-1; end

        emit_table(KEYWORDS)

        if version?(18) && tok == 'not'.freeze
           @cs = 523; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
           @cs = 454; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 130 then
	begin begin p = (( @te))-1; end

        if version?(18)
          emit(:tIDENTIFIER)

          unless !@static_env.nil? && @static_env.declared?(tok)
             @cs = (arg_or_cmdarg);
          end
        else
          emit(:k__ENCODING__, '__ENCODING__'.freeze)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 131 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
           	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 132 then
	begin begin p = (( @te))-1; end

        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 134 then
	begin begin p = (( @te))-1; end

        if version?(18, 19, 20)
          diagnostic :error,
                     :trailing_in_number, { :character => tok(@te - 1, @te) },
                     range(@te - 1, @te)
        else
          emit(:tINTEGER, tok(@ts, @te - 1).to_i, @ts, @te - 1)
          p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 135 then
	begin begin p = (( @te))-1; end

        if version?(18, 19, 20)
          diagnostic :error,
                     :trailing_in_number, { :character => tok(@te - 1, @te) },
                     range(@te - 1, @te)
        else
          emit(:tFLOAT, tok(@ts, @te - 1).to_f, @ts, @te - 1)
          p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 136 then
	begin begin p = (( @te))-1; end

        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 138 then
	begin begin p = (( @te))-1; end
 emit(:tCONSTANT)
            @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 142 then
	begin begin p = (( @te))-1; end

    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
  end
	when 143 then
	begin begin p = (( @te))-1; end

        if tm == @te
          # Suffix was consumed, e.g. foo!
          emit(:tFID)
        else
          # Suffix was not consumed, e.g. foo!=
          emit(:tIDENTIFIER, tok(@ts, tm), @ts, tm)
          p = tm - 1
        end
         @cs = 454; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
end 
			end
	when 74 then
# line 2181 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = tm - 1; 	begin
		 @cs = 752
		_goto_level = _again
		next
	end
  end
		end
	when 438 then
# line 2184 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tNL, nil, @newline_s, @newline_s + 1)
           p = p - 1;  @cs = 159; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 439 then
# line 2184 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tNL, nil, @newline_s, @newline_s + 1)
           p = p - 1;  @cs = 159; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 71 then
# line 2184 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  emit(:tNL, nil, @newline_s, @newline_s + 1)
           p = p - 1;  @cs = 159; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 442 then
# line 2194 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit_comment(@eq_begin_s, @te)
        	begin
		 @cs = 159
		_goto_level = _again
		next
	end

       end
		end
	when 441 then
# line 2202 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :fatal, :embedded_document, nil,
                   range(@eq_begin_s, @eq_begin_s + '=begin'.length)
       end
		end
	when 85 then
# line 2212 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  @eq_begin_s = @ts
           	begin
		 @cs = 928
		_goto_level = _again
		next
	end
  end
		end
	when 2 then
# line 2216 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = pe - 3  end
		end
	when 77 then
# line 2219 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 744
		_goto_level = _again
		next
	end
  end
		end
	when 78 then
# line 512 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 79 then
# line 2209 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 84 then
# line 2212 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  @eq_begin_s = @ts
           	begin
		 @cs = 928
		_goto_level = _again
		next
	end
  end
		end
	when 83 then
# line 2219 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 744
		_goto_level = _again
		next
	end
  end
		end
	when 1 then
# line 2219 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 744
		_goto_level = _again
		next
	end
  end
		end
	when 69 then
# line 486 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1111 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
	when 89 then
# line 486 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 877 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 117 then
# line 486 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 877 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 143 then
# line 486 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 877 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 149 then
# line 486 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 877 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 155 then
# line 486 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 877 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 161 then
# line 486 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 877 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 231 then
# line 486 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1396 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        # Unlike expr_beg as invoked in the next rule, do not warn
        p = @ts - 1
        	begin
		 @cs = 752
		_goto_level = _again
		next
	end

       end
		end
	when 222 then
# line 486 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1455 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = tm - 1; 	begin
		 @cs = 752
		_goto_level = _again
		next
	end
  end
		end
	when 214 then
# line 486 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1464 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = @ts - 1
        	begin
		 @cs = 752
		_goto_level = _again
		next
	end

       end
		end
	when 302 then
# line 486 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1709 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        escape = { " "  => '\s', "\r" => '\r', "\n" => '\n', "\t" => '\t',
                   "\v" => '\v', "\f" => '\f' }[@source_buffer.slice(@ts + 1)]
        diagnostic :warning, :invalid_escape_use, { :escape => escape }, range

        p = @ts - 1
        	begin
		 @cs = 752
		_goto_level = _again
		next
	end

       end
		end
	when 275 then
# line 486 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1824 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1
           	begin
		 @cs = 159
		_goto_level = _again
		next
	end
  end
		end
	when 443 then
# line 486 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2194 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit_comment(@eq_begin_s, @te)
        	begin
		 @cs = 159
		_goto_level = _again
		next
	end

       end
		end
	when 440 then
# line 486 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2199 "lib/parser/lexer.rl"
		begin
 @te = p+1
		end
	when 86 then
# line 486 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2212 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  @eq_begin_s = @ts
           	begin
		 @cs = 928
		_goto_level = _again
		next
	end
  end
		end
	when 3 then
# line 486 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2216 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = pe - 3  end
		end
	when 397 then
# line 620 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tRATIONAL,  Rational(chars)) } 		end
# line 1988 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 396 then
# line 621 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tIMAGINARY, Complex(0, chars)) } 		end
# line 1988 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 398 then
# line 622 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tIMAGINARY, Complex(0, Rational(chars))) } 		end
# line 1988 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 391 then
# line 626 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tIMAGINARY, Complex(0, Float(chars))) } 		end
# line 2047 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 392 then
# line 630 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tRATIONAL,  Rational(chars)) } 		end
# line 2047 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 393 then
# line 631 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tIMAGINARY, Complex(0, Rational(chars))) } 		end
# line 2047 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 112 then
# line 646 "lib/parser/lexer.rl"
		begin

    @escape = ""

    codepoints  = tok(@escape_s + 2, p - 1)
    codepoint_s = @escape_s + 2

    codepoints.split(/[ \t]/).each do |codepoint_str|
      codepoint = codepoint_str.to_i(16)

      if codepoint >= 0x110000
        diagnostic :error, :unicode_point_too_large, nil,
                   range(codepoint_s, codepoint_s + codepoint_str.length)
        break
      end

      @escape     += codepoint.chr(Encoding::UTF_8)
      codepoint_s += codepoint_str.length + 1
    end
  		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 138 then
# line 646 "lib/parser/lexer.rl"
		begin

    @escape = ""

    codepoints  = tok(@escape_s + 2, p - 1)
    codepoint_s = @escape_s + 2

    codepoints.split(/[ \t]/).each do |codepoint_str|
      codepoint = codepoint_str.to_i(16)

      if codepoint >= 0x110000
        diagnostic :error, :unicode_point_too_large, nil,
                   range(codepoint_s, codepoint_s + codepoint_str.length)
        break
      end

      @escape     += codepoint.chr(Encoding::UTF_8)
      codepoint_s += codepoint_str.length + 1
    end
  		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 323 then
# line 646 "lib/parser/lexer.rl"
		begin

    @escape = ""

    codepoints  = tok(@escape_s + 2, p - 1)
    codepoint_s = @escape_s + 2

    codepoints.split(/[ \t]/).each do |codepoint_str|
      codepoint = codepoint_str.to_i(16)

      if codepoint >= 0x110000
        diagnostic :error, :unicode_point_too_large, nil,
                   range(codepoint_s, codepoint_s + codepoint_str.length)
        break
      end

      @escape     += codepoint.chr(Encoding::UTF_8)
      codepoint_s += codepoint_str.length + 1
    end
  		end
# line 1696 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 96 then
# line 666 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 122 then
# line 666 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 307 then
# line 666 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 1696 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 99 then
# line 673 "lib/parser/lexer.rl"
		begin

    diagnostic :fatal, :invalid_escape
  		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 125 then
# line 673 "lib/parser/lexer.rl"
		begin

    diagnostic :fatal, :invalid_escape
  		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 310 then
# line 673 "lib/parser/lexer.rl"
		begin

    diagnostic :fatal, :invalid_escape
  		end
# line 1696 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 101 then
# line 692 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 127 then
# line 692 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 312 then
# line 692 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 1696 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 98 then
# line 699 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s, p).to_i(8) % 0x100) 		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 124 then
# line 699 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s, p).to_i(8) % 0x100) 		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 309 then
# line 699 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s, p).to_i(8) % 0x100) 		end
# line 1696 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 114 then
# line 703 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s + 1, p).to_i(16)) 		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 140 then
# line 703 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s + 1, p).to_i(16)) 		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 325 then
# line 703 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s + 1, p).to_i(16)) 		end
# line 1696 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 109 then
# line 707 "lib/parser/lexer.rl"
		begin
 @escape = tok(@escape_s + 1, p).to_i(16).chr(Encoding::UTF_8) 		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 135 then
# line 707 "lib/parser/lexer.rl"
		begin
 @escape = tok(@escape_s + 1, p).to_i(16).chr(Encoding::UTF_8) 		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 320 then
# line 707 "lib/parser/lexer.rl"
		begin
 @escape = tok(@escape_s + 1, p).to_i(16).chr(Encoding::UTF_8) 		end
# line 1696 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 113 then
# line 711 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_hex_escape, nil, range(@escape_s - 1, p + 2)
      		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 139 then
# line 711 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_hex_escape, nil, range(@escape_s - 1, p + 2)
      		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 324 then
# line 711 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_hex_escape, nil, range(@escape_s - 1, p + 2)
      		end
# line 1696 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 108 then
# line 723 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 134 then
# line 723 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 319 then
# line 723 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 1696 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 111 then
# line 734 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 137 then
# line 734 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 322 then
# line 734 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 1696 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 97 then
# line 760 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 123 then
# line 760 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 308 then
# line 760 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 1696 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 146 then
# line 766 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 151 then
# line 766 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 62 then
# line 806 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 486 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 26 then
# line 806 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1410 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 28 then
# line 806 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1426 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 30 then
# line 806 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1454 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 175 then
# line 806 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1285 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 194 then
# line 806 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1303 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 202 then
# line 806 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1335 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 29 then
# line 806 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1464 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = @ts - 1
        	begin
		 @cs = 752
		_goto_level = _again
		next
	end

       end
		end
	when 233 then
# line 806 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1469 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 225 then
# line 806 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1475 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 752
		_goto_level = _again
		next
	end
  end
		end
	when 244 then
# line 806 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1544 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 256 then
# line 806 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1565 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 252 then
# line 806 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1568 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 752
		_goto_level = _again
		next
	end
  end
		end
	when 272 then
# line 806 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1821 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 342 then
# line 806 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1845 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 338 then
# line 806 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1848 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
      if @in_kwarg
        p = p - 1; 	begin
		 @cs = 752
		_goto_level = _again
		next
	end

      else
        	begin
		 @cs = 159
		_goto_level = _again
		next
	end

      end
     end
		end
	when 351 then
# line 806 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1876 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 348 then
# line 806 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1879 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  	begin
		 @cs = 159
		_goto_level = _again
		next
	end
  end
		end
	when 424 then
# line 806 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2154 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 366 then
# line 806 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2157 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  	begin
		 @cs = 925
		_goto_level = _again
		next
	end
  end
		end
	when 80 then
# line 806 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2209 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 224 then
# line 977 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    current_literal = literal
    if current_literal
      current_literal.start_interp_brace
    end
  		end
# line 1379 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @lambda_stack.last == @paren_nest
          p = @ts - 1
          	begin
		 @cs = 752
		_goto_level = _again
		next
	end

        else
          emit(:tLCURLY, '{'.freeze, @te - 1, @te)
           @cs = 744; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
       end
		end
	when 246 then
# line 977 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    current_literal = literal
    if current_literal
      current_literal.start_interp_brace
    end
  		end
# line 1537 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLBRACE_ARG, '{'.freeze)
            @cs = 744;  end
		end
	when 334 then
# line 977 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    current_literal = literal
    if current_literal
      current_literal.start_interp_brace
    end
  		end
# line 1736 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop
          emit(:tLAMBEG, '{'.freeze)
        else
          emit(:tLBRACE, '{'.freeze)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 436 then
# line 977 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    current_literal = literal
    if current_literal
      current_literal.start_interp_brace
    end
  		end
# line 1901 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop

          if tok == '{'.freeze
            emit(:tLAMBEG, '{'.freeze)
          else # 'do'
            emit(:kDO_LAMBDA, 'do'.freeze)
          end
        else
          if tok == '{'.freeze
            emit(:tLCURLY, '{'.freeze)
          else # 'do'
            emit_do
          end
        end

         @cs = 744; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 437 then
# line 986 "lib/parser/lexer.rl"
		begin

    current_literal = literal
    if current_literal
      if current_literal.end_interp_brace_and_try_closing
        if version?(18, 19)
          emit(:tRCURLY, '}'.freeze, p - 1, p)
        else
          emit(:tSTRING_DEND, '}'.freeze, p - 1, p)
        end

        if current_literal.saved_herebody_s
          @herebody_s = current_literal.saved_herebody_s
        end

        p = p - 1;
         @cs = (stack_pop);
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
    end
  		end
# line 2121 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit_table(PUNCTUATION)
        @cond.lexpop; @cmdarg.lexpop

        if RBRACE_OR_RBRACK.include?(tok)
           @cs = 491;
        else # )
          # fnext expr_endfn; ?
        end

        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 64 then
# line 1108 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1111 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
	when 67 then
# line 1111 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 486 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 178 then
# line 1111 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1285 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 193 then
# line 1111 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1303 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 205 then
# line 1111 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1335 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 227 then
# line 1111 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1472 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  	begin
		 @cs = 752
		_goto_level = _again
		next
	end
  end
		end
	when 242 then
# line 1111 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1544 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 254 then
# line 1111 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1565 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 278 then
# line 1111 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1821 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 340 then
# line 1111 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1845 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 350 then
# line 1111 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1876 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 370 then
# line 1111 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2154 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 82 then
# line 1111 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2209 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 199 then
# line 1152 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1325 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tFID, tok(@ts, tm), @ts, tm)
            @cs = (arg_or_cmdarg); p = tm - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 290 then
# line 1152 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1674 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 263 then
# line 1152 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1809 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 752
		_goto_level = _again
		next
	end
  end
		end
	when 363 then
# line 1152 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1 "NONE"
		begin
	case  @act
	when 123 then
	begin begin p = (( @te))-1; end

        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop

          if tok == '{'.freeze
            emit(:tLAMBEG, '{'.freeze)
          else # 'do'
            emit(:kDO_LAMBDA, 'do'.freeze)
          end
        else
          if tok == '{'.freeze
            emit(:tLCURLY, '{'.freeze)
          else # 'do'
            emit_do
          end
        end

         @cs = 744; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 124 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 314; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 125 then
	begin begin p = (( @te))-1; end
 emit(:kCLASS, 'class'.freeze, @ts, @ts + 5)
           emit(:tLSHFT, '<<'.freeze,    @te - 2, @te)
            @cs = 744; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 126 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 523; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 127 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 744; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 128 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 499; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 129 then
	begin begin p = (( @te))-1; end

        emit_table(KEYWORDS)

        if version?(18) && tok == 'not'.freeze
           @cs = 523; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
           @cs = 454; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 130 then
	begin begin p = (( @te))-1; end

        if version?(18)
          emit(:tIDENTIFIER)

          unless !@static_env.nil? && @static_env.declared?(tok)
             @cs = (arg_or_cmdarg);
          end
        else
          emit(:k__ENCODING__, '__ENCODING__'.freeze)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 131 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
           	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 132 then
	begin begin p = (( @te))-1; end

        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 134 then
	begin begin p = (( @te))-1; end

        if version?(18, 19, 20)
          diagnostic :error,
                     :trailing_in_number, { :character => tok(@te - 1, @te) },
                     range(@te - 1, @te)
        else
          emit(:tINTEGER, tok(@ts, @te - 1).to_i, @ts, @te - 1)
          p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 135 then
	begin begin p = (( @te))-1; end

        if version?(18, 19, 20)
          diagnostic :error,
                     :trailing_in_number, { :character => tok(@te - 1, @te) },
                     range(@te - 1, @te)
        else
          emit(:tFLOAT, tok(@ts, @te - 1).to_f, @ts, @te - 1)
          p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 136 then
	begin begin p = (( @te))-1; end

        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 138 then
	begin begin p = (( @te))-1; end
 emit(:tCONSTANT)
            @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 142 then
	begin begin p = (( @te))-1; end

    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
  end
	when 143 then
	begin begin p = (( @te))-1; end

        if tm == @te
          # Suffix was consumed, e.g. foo!
          emit(:tFID)
        else
          # Suffix was not consumed, e.g. foo!=
          emit(:tIDENTIFIER, tok(@ts, tm), @ts, tm)
          p = tm - 1
        end
         @cs = 454; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
end 
			end
	when 200 then
# line 1153 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1325 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tFID, tok(@ts, tm), @ts, tm)
            @cs = (arg_or_cmdarg); p = tm - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 291 then
# line 1153 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1674 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 265 then
# line 1153 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1809 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 752
		_goto_level = _again
		next
	end
  end
		end
	when 364 then
# line 1153 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 2097 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if tm == @te
          # Suffix was consumed, e.g. foo!
          emit(:tFID)
        else
          # Suffix was not consumed, e.g. foo!=
          emit(:tIDENTIFIER, tok(@ts, tm), @ts, tm)
          p = tm - 1
        end
         @cs = 454; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 292 then
# line 1158 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1674 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 266 then
# line 1158 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1809 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 752
		_goto_level = _again
		next
	end
  end
		end
	when 293 then
# line 1159 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1674 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 267 then
# line 1159 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1809 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 752
		_goto_level = _again
		next
	end
  end
		end
	when 297 then
# line 1160 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1674 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 270 then
# line 1160 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1809 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 752
		_goto_level = _again
		next
	end
  end
		end
	when 296 then
# line 1161 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1674 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 269 then
# line 1161 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1 "NONE"
		begin
	case  @act
	when 102 then
	begin begin p = (( @te))-1; end
 emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 103 then
	begin begin p = (( @te))-1; end
 emit(:kRESCUE, 'rescue'.freeze, @ts, tm)
           p = tm - 1
            @cs = 499; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 104 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS_BEGIN)
            @cs = 744; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 106 then
	begin begin p = (( @te))-1; end
 p = @ts - 1
           	begin
		 @cs = 752
		_goto_level = _again
		next
	end
 end
	when 107 then
	begin begin p = (( @te))-1; end

    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
  end
	when 110 then
	begin begin p = (( @te))-1; end
 p = @ts - 1; 	begin
		 @cs = 752
		_goto_level = _again
		next
	end
 end
end 
			end
	when 294 then
# line 1162 "lib/parser/lexer.rl"
		begin
 tm = p - 3 		end
# line 1674 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 268 then
# line 1162 "lib/parser/lexer.rl"
		begin
 tm = p - 3 		end
# line 1809 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 752
		_goto_level = _again
		next
	end
  end
		end
	when 295 then
# line 1167 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1674 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 419 then
# line 1172 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 2079 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tCONSTANT, tok(@ts, tm), @ts, tm)
           p = tm - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 223 then
# line 1178 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)
  		end
# line 1373 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLBRACK, '['.freeze, @te - 1, @te)
            @cs = 523; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 326 then
# line 1178 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)
  		end
# line 1748 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLBRACK, '['.freeze)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 422 then
# line 1178 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)
  		end
# line 2143 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLBRACK2, '['.freeze)
            @cs = 523; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 215 then
# line 1185 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1
  		end
# line 1354 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if version?(18)
          emit(:tLPAREN2, '('.freeze, @te - 1, @te)
           @cs = 744; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
          emit(:tLPAREN_ARG, '('.freeze, @te - 1, @te)
           @cs = 523; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
       end
		end
	when 228 then
# line 1185 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1
  		end
# line 1367 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLPAREN2, '('.freeze)
            @cs = 523; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 236 then
# line 1185 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1
  		end
# line 1491 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tLPAREN_ARG, '('.freeze, @te - 1, @te)
        if version?(18)
           @cs = 744; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
           @cs = 523; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
       end
		end
	when 283 then
# line 1185 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1
  		end
# line 1753 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLPAREN, '('.freeze)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 375 then
# line 1185 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1
  		end
# line 2117 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 523; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 376 then
# line 1191 "lib/parser/lexer.rl"
		begin

    @paren_nest -= 1
  		end
# line 2121 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit_table(PUNCTUATION)
        @cond.lexpop; @cmdarg.lexpop

        if RBRACE_OR_RBRACK.include?(tok)
           @cs = 491;
        else # )
          # fnext expr_endfn; ?
        end

        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 52 then
# line 1640 "lib/parser/lexer.rl"
		begin
 heredoc_e      = p 		end
# line 486 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 298 then
# line 1641 "lib/parser/lexer.rl"
		begin
 new_herebody_s = p 		end
# line 1642 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        tok(@ts, heredoc_e) =~ /^<<(-?)(~?)(["'`]?)(.*)\3$/

        indent      = !$1.empty? || !$2.empty?
        dedent_body = !$2.empty?
        type        =  $3.empty? ? '<<"'.freeze : ('<<'.freeze + $3)
        delimiter   =  $4

        if dedent_body && version?(18, 19, 20, 21, 22)
          emit(:tLSHFT, '<<'.freeze, @ts, @ts + 2)
          p = @ts + 1
           @cs = 523; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
           @cs = (push_literal(type, delimiter, @ts, heredoc_e, indent, dedent_body));

          @herebody_s ||= new_herebody_s
          p = @herebody_s - 1
        end
       end
		end
	when 303 then
# line 1694 "lib/parser/lexer.rl"
		begin
 @escape = nil 		end
# line 1696 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 330 then
# line 1763 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1764 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:kRESCUE, 'rescue'.freeze, @ts, tm)
           p = tm - 1
            @cs = 499; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 410 then
# line 1981 "lib/parser/lexer.rl"
		begin
 @num_base = 16; @num_digits_s = p 		end
# line 1987 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 404 then
# line 1982 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = p 		end
# line 1987 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 407 then
# line 1983 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = p 		end
# line 1987 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 401 then
# line 1984 "lib/parser/lexer.rl"
		begin
 @num_base = 2;  @num_digits_s = p 		end
# line 1987 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 416 then
# line 1985 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 1987 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 385 then
# line 1986 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
# line 1987 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 417 then
# line 1987 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 619 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
	when 73 then
# line 2180 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 2181 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = tm - 1; 	begin
		 @cs = 752
		_goto_level = _again
		next
	end
  end
		end
	when 8 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 486 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 184 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1255 "lib/parser/lexer.rl"
		begin
 @act = 31;		end
	when 171 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1259 "lib/parser/lexer.rl"
		begin
 @act = 32;		end
	when 167 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1263 "lib/parser/lexer.rl"
		begin
 @act = 33;		end
	when 22 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1414 "lib/parser/lexer.rl"
		begin
 @act = 58;		end
	when 217 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1427 "lib/parser/lexer.rl"
		begin
 @act = 59;		end
	when 23 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1464 "lib/parser/lexer.rl"
		begin
 @act = 64;		end
	when 210 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1469 "lib/parser/lexer.rl"
		begin
 @act = 65;		end
	when 237 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1501 "lib/parser/lexer.rl"
		begin
 @act = 71;		end
	when 41 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1514 "lib/parser/lexer.rl"
		begin
 @act = 72;		end
	when 258 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1559 "lib/parser/lexer.rl"
		begin
 @act = 79;		end
	when 247 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1563 "lib/parser/lexer.rl"
		begin
 @act = 80;		end
	when 261 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1758 "lib/parser/lexer.rl"
		begin
 @act = 102;		end
	when 329 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1764 "lib/parser/lexer.rl"
		begin
 @act = 103;		end
	when 328 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1770 "lib/parser/lexer.rl"
		begin
 @act = 104;		end
	when 54 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1809 "lib/parser/lexer.rl"
		begin
 @act = 106;		end
	when 259 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1196 "lib/parser/lexer.rl"
		begin
 @act = 107;		end
	when 262 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1837 "lib/parser/lexer.rl"
		begin
 @act = 110;		end
	when 432 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1901 "lib/parser/lexer.rl"
		begin
 @act = 123;		end
	when 427 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1926 "lib/parser/lexer.rl"
		begin
 @act = 124;		end
	when 435 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1936 "lib/parser/lexer.rl"
		begin
 @act = 126;		end
	when 428 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1941 "lib/parser/lexer.rl"
		begin
 @act = 127;		end
	when 429 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1945 "lib/parser/lexer.rl"
		begin
 @act = 128;		end
	when 434 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1949 "lib/parser/lexer.rl"
		begin
 @act = 129;		end
	when 426 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1960 "lib/parser/lexer.rl"
		begin
 @act = 130;		end
	when 421 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1974 "lib/parser/lexer.rl"
		begin
 @act = 131;		end
	when 357 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1988 "lib/parser/lexer.rl"
		begin
 @act = 132;		end
	when 387 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2032 "lib/parser/lexer.rl"
		begin
 @act = 135;		end
	when 61 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2047 "lib/parser/lexer.rl"
		begin
 @act = 136;		end
	when 360 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2075 "lib/parser/lexer.rl"
		begin
 @act = 138;		end
	when 352 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1196 "lib/parser/lexer.rl"
		begin
 @act = 142;		end
	when 362 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2097 "lib/parser/lexer.rl"
		begin
 @act = 143;		end
	when 152 then
# line 486 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 877 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
# line 766 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
	when 102 then
# line 666 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 677 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 128 then
# line 666 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 677 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 313 then
# line 666 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 677 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 1696 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 107 then
# line 666 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 681 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 133 then
# line 666 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 681 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 318 then
# line 666 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 681 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1696 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 106 then
# line 687 "lib/parser/lexer.rl"
		begin
 @escape = @source_buffer.slice(p - 1).chr 		end
# line 681 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 132 then
# line 687 "lib/parser/lexer.rl"
		begin
 @escape = @source_buffer.slice(p - 1).chr 		end
# line 681 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 317 then
# line 687 "lib/parser/lexer.rl"
		begin
 @escape = @source_buffer.slice(p - 1).chr 		end
# line 681 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1696 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 104 then
# line 692 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 681 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 130 then
# line 692 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 681 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 315 then
# line 692 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 681 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1696 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 100 then
# line 693 "lib/parser/lexer.rl"
		begin
 @escape = @source_buffer.slice(p - 1).chr 		end
# line 677 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 126 then
# line 693 "lib/parser/lexer.rl"
		begin
 @escape = @source_buffer.slice(p - 1).chr 		end
# line 677 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 311 then
# line 693 "lib/parser/lexer.rl"
		begin
 @escape = @source_buffer.slice(p - 1).chr 		end
# line 677 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 1696 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 110 then
# line 723 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 734 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 136 then
# line 723 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 734 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 321 then
# line 723 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 734 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 1696 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 94 then
# line 766 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 760 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 121 then
# line 766 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 760 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 306 then
# line 766 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 760 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 1696 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 65 then
# line 1108 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1111 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 486 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 177 then
# line 1108 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1111 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1285 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 192 then
# line 1108 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1111 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1303 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 204 then
# line 1108 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1111 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1335 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 226 then
# line 1108 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1111 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1472 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  	begin
		 @cs = 752
		_goto_level = _again
		next
	end
  end
		end
	when 241 then
# line 1108 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1111 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1544 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 253 then
# line 1108 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1111 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1565 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 277 then
# line 1108 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1111 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1821 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 339 then
# line 1108 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1111 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1845 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 349 then
# line 1108 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1111 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1876 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 369 then
# line 1108 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1111 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2154 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 81 then
# line 1108 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1111 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2209 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 412 then
# line 1985 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 1987 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 619 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
	when 382 then
# line 1986 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
# line 1987 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 619 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
	when 394 then
# line 1987 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 619 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 1988 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 389 then
# line 2044 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 625 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tFLOAT,     Float(chars)) } 		end
# line 2047 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 386 then
# line 2045 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 625 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tFLOAT,     Float(chars)) } 		end
# line 2047 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 232 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 486 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1469 "lib/parser/lexer.rl"
		begin
 @act = 65;		end
	when 31 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 806 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1464 "lib/parser/lexer.rl"
		begin
 @act = 64;		end
	when 42 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 806 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1514 "lib/parser/lexer.rl"
		begin
 @act = 72;		end
	when 68 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1111 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1930 "lib/parser/lexer.rl"
		begin
 @act = 125;		end
	when 33 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1426 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1427 "lib/parser/lexer.rl"
		begin
 @act = 59;		end
	when 332 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1763 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1809 "lib/parser/lexer.rl"
		begin
 @act = 106;		end
	when 331 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1763 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1196 "lib/parser/lexer.rl"
		begin
 @act = 107;		end
	when 413 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1985 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 1988 "lib/parser/lexer.rl"
		begin
 @act = 132;		end
	when 105 then
# line 666 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 677 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 681 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 131 then
# line 666 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 677 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 681 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 316 then
# line 666 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 677 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 681 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1696 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 103 then
# line 693 "lib/parser/lexer.rl"
		begin
 @escape = @source_buffer.slice(p - 1).chr 		end
# line 677 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 681 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 129 then
# line 693 "lib/parser/lexer.rl"
		begin
 @escape = @source_buffer.slice(p - 1).chr 		end
# line 677 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 681 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 839 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 314 then
# line 693 "lib/parser/lexer.rl"
		begin
 @escape = @source_buffer.slice(p - 1).chr 		end
# line 677 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 681 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1696 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 752; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 408 then
# line 1981 "lib/parser/lexer.rl"
		begin
 @num_base = 16; @num_digits_s = p 		end
# line 1987 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 619 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 1988 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 402 then
# line 1982 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = p 		end
# line 1987 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 619 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 1988 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 405 then
# line 1983 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = p 		end
# line 1987 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 619 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 1988 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 399 then
# line 1984 "lib/parser/lexer.rl"
		begin
 @num_base = 2;  @num_digits_s = p 		end
# line 1987 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 619 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 1988 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 411 then
# line 1985 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 1987 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 619 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 1988 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 381 then
# line 1986 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
# line 1987 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 619 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 1988 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 27 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 806 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1426 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1427 "lib/parser/lexer.rl"
		begin
 @act = 59;		end
	when 418 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1987 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 619 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2020 "lib/parser/lexer.rl"
		begin
 @act = 134;		end
	when 414 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1985 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 1987 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 619 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2020 "lib/parser/lexer.rl"
		begin
 @act = 134;		end
	when 384 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1986 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
# line 1987 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 619 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2020 "lib/parser/lexer.rl"
		begin
 @act = 134;		end
# line 20659 "lib/parser/lexer.rb"
	end
	end
	end
	if _goto_level <= _again
	case _lex_to_state_actions[ @cs] 
	when 75 then
# line 1 "NONE"
		begin
 @ts = nil;		end
# line 20669 "lib/parser/lexer.rb"
	end

	if  @cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	if _lex_eof_trans[ @cs] > 0
		_trans = _lex_eof_trans[ @cs] - 1;
		_goto_level = _eof_trans
		next;
	end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

# line 282 "lib/parser/lexer.rl"
    # %

    @p = p

    if @token_queue.any?
      @token_queue.shift
    elsif @cs == klass.lex_error
      [ false, [ '$error'.freeze, range(p - 1, p) ] ]
    else
      eof = @source_pts.size
      [ false, [ '$eof'.freeze,   range(eof, eof) ] ]
    end
  end

  protected

  def eof_codepoint?(point)
    [0x04, 0x1a, 0x00].include? point
  end

  def version?(*versions)
    versions.include?(@version)
  end

  def stack_pop
    @top -= 1
    @stack[@top]
  end

  if defined?(Encoding)
    def encode_escape(ord)
      ord.chr.force_encoding(@source_buffer.source.encoding)
    end
  else
    def encode_escape(ord)
      ord.chr
    end
  end

  def tok(s = @ts, e = @te)
    @source_buffer.slice(s...e)
  end

  def range(s = @ts, e = @te)
    Parser::Source::Range.new(@source_buffer, s, e)
  end

  def emit(type, value = tok, s = @ts, e = @te)
    token = [ type, [ value, range(s, e) ] ]

    @token_queue.push(token)

    @tokens.push(token) if @tokens

    token
  end

  def emit_table(table, s = @ts, e = @te)
    value = tok(s, e)

    emit(table[value], value, s, e)
  end

  def emit_do(do_block=false)
    if @cond.active?
      emit(:kDO_COND, 'do'.freeze)
    elsif @cmdarg.active? || do_block
      emit(:kDO_BLOCK, 'do'.freeze)
    else
      emit(:kDO, 'do'.freeze)
    end
  end

  def arg_or_cmdarg
    if @command_state
      self.class.lex_en_expr_cmdarg
    else
      self.class.lex_en_expr_arg
    end
  end

  def emit_comment(s = @ts, e = @te)
    if @comments
      @comments.push(Parser::Source::Comment.new(range(s, e)))
    end

    if @tokens
      @tokens.push([ :tCOMMENT, [ tok(s, e), range(s, e) ] ])
    end

    nil
  end

  def diagnostic(type, reason, arguments=nil, location=range, highlights=[])
    @diagnostics.process(
        Parser::Diagnostic.new(type, reason, arguments, location, highlights))
  end

  #
  # === LITERAL STACK ===
  #

  def push_literal(*args)
    new_literal = Literal.new(self, *args)
    @literal_stack.push(new_literal)

    if new_literal.words?
      if new_literal.interpolate?
        self.class.lex_en_interp_words
      else
        self.class.lex_en_plain_words
      end
    elsif new_literal.backslash_delimited?
      if new_literal.interpolate?
        self.class.lex_en_interp_backslash_delimited
      else
        self.class.lex_en_plain_backslash_delimited
      end
    else
      if new_literal.interpolate?
        self.class.lex_en_interp_string
      else
        self.class.lex_en_plain_string
      end
    end
  end

  def literal
    @literal_stack.last
  end

  def pop_literal
    old_literal = @literal_stack.pop

    @dedent_level = old_literal.dedent_level

    if old_literal.type == :tREGEXP_BEG
      # Fetch modifiers.
      self.class.lex_en_regexp_modifiers
    else
      self.class.lex_en_expr_end
    end
  end

  # Mapping of strings to parser tokens.

  PUNCTUATION = {
    '='   => :tEQL,     '&'   => :tAMPER2,  '|'   => :tPIPE,
    '!'   => :tBANG,    '^'   => :tCARET,   '+'   => :tPLUS,
    '-'   => :tMINUS,   '*'   => :tSTAR2,   '/'   => :tDIVIDE,
    '%'   => :tPERCENT, '~'   => :tTILDE,   ','   => :tCOMMA,
    ';'   => :tSEMI,    '.'   => :tDOT,     '..'  => :tDOT2,
    '...' => :tDOT3,    '['   => :tLBRACK2, ']'   => :tRBRACK,
    '('   => :tLPAREN2, ')'   => :tRPAREN,  '?'   => :tEH,
    ':'   => :tCOLON,   '&&'  => :tANDOP,   '||'  => :tOROP,
    '-@'  => :tUMINUS,  '+@'  => :tUPLUS,   '~@'  => :tTILDE,
    '**'  => :tPOW,     '->'  => :tLAMBDA,  '=~'  => :tMATCH,
    '!~'  => :tNMATCH,  '=='  => :tEQ,      '!='  => :tNEQ,
    '>'   => :tGT,      '>>'  => :tRSHFT,   '>='  => :tGEQ,
    '<'   => :tLT,      '<<'  => :tLSHFT,   '<='  => :tLEQ,
    '=>'  => :tASSOC,   '::'  => :tCOLON2,  '===' => :tEQQ,
    '<=>' => :tCMP,     '[]'  => :tAREF,    '[]=' => :tASET,
    '{'   => :tLCURLY,  '}'   => :tRCURLY,  '`'   => :tBACK_REF2,
    '!@'  => :tBANG,    '&.'  => :tANDDOT,
  }

  PUNCTUATION_BEGIN = {
    '&'   => :tAMPER,   '*'   => :tSTAR,    '**'  => :tDSTAR,
    '+'   => :tUPLUS,   '-'   => :tUMINUS,  '::'  => :tCOLON3,
    '('   => :tLPAREN,  '{'   => :tLBRACE,  '['   => :tLBRACK,
  }

  KEYWORDS = {
    'if'     => :kIF_MOD,      'unless'   => :kUNLESS_MOD,
    'while'  => :kWHILE_MOD,   'until'    => :kUNTIL_MOD,
    'rescue' => :kRESCUE_MOD,  'defined?' => :kDEFINED,
    'BEGIN'  => :klBEGIN,      'END'      => :klEND,
  }

  KEYWORDS_BEGIN = {
    'if'     => :kIF,          'unless'   => :kUNLESS,
    'while'  => :kWHILE,       'until'    => :kUNTIL,
    'rescue' => :kRESCUE,      'defined?' => :kDEFINED,
  }

  %w(class module def undef begin end then elsif else ensure case when
     for break next redo retry in do return yield super self nil true
     false and or not alias __FILE__ __LINE__ __ENCODING__).each do |keyword|
    KEYWORDS_BEGIN[keyword] = KEYWORDS[keyword] = :"k#{keyword.upcase}"
  end

  
# line 2224 "lib/parser/lexer.rl"

  # %
end
