# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

Parser.check_for_encoding_support

module Parser
  class Ruby23 < Parser::Base

module_eval(<<'...end ruby23.y/module_eval...', 'ruby23.y', 2339)

  def version
    23
  end

  def default_encoding
    Encoding::UTF_8
  end
...end ruby23.y/module_eval...
##### State transition tables begin ###

clist = [
'-575,769,570,216,217,814,-488,-575,-575,-575,219,-101,715,-575,-575',
'647,-575,270,-98,-100,212,570,570,610,647,-575,398,263,-98,-105,-488',
'400,399,836,805,270,-575,-575,-103,-575,-575,-575,-575,-575,570,-99',
'-104,-83,-102,957,646,220,-100,-88,216,217,581,-69,-100,646,216,217',
'589,-97,-97,-102,-575,-575,-575,-575,-575,-575,-575,-575,-575,-575,-575',
'-575,-575,-575,970,-105,-575,-575,-575,213,631,-97,-571,609,-575,570',
'-90,-575,566,565,-99,-104,-575,265,-575,972,-575,-575,269,-575,-575',
'-575,-575,-575,-289,-575,-575,-575,813,-572,113,-289,-289,-289,113,112',
'269,-289,-289,112,-289,-575,-91,-101,-575,-575,-97,-92,-101,-575,-98',
'-89,-96,113,113,-98,-575,-101,112,112,-289,-289,220,-289,-289,-289,-289',
'-289,220,270,-103,-286,-90,-93,-91,-103,113,-99,-104,841,-102,112,-99',
'-104,-100,-102,715,-88,-93,-100,-289,-289,-289,-289,-289,-289,-289,-289',
'-289,-289,-289,-289,-289,-289,270,582,-289,-289,-289,583,630,-286,-90',
'-105,-289,-90,-101,-289,-105,-90,-95,-489,-289,113,-289,-90,-289,-289',
'112,-289,-289,-289,-289,-289,-474,-289,805,-289,576,-93,-91,-474,-474',
'-474,216,217,-474,-474,-474,612,-474,-289,614,647,-289,-289,269,-94',
'-474,-289,-474,-474,-474,617,-97,517,-289,-103,265,-97,-474,-474,446',
'-474,-474,-474,-474,-474,-98,-93,-91,-571,-93,-91,-92,-261,-103,715',
'646,113,113,269,-93,-91,112,112,647,974,216,217,-474,-474,-474,-474',
'-474,-474,-474,-474,-474,-474,-474,-474,-474,-474,597,611,-474,-474',
'-474,212,-474,-474,-104,619,-474,-92,937,-474,-474,-105,-474,646,-474',
'220,-474,587,-474,-474,220,-474,-474,-474,-474,-474,623,-474,-289,-474',
'624,-571,-92,-572,388,-289,-289,-289,91,92,-289,-289,-289,-474,-289',
'113,-474,-474,-474,-474,112,-474,113,-474,-289,-289,-289,112,-474,-474',
'599,598,613,265,-289,-289,213,-289,-289,-289,-289,-289,-92,113,113,-92',
'634,-94,112,112,550,859,547,546,545,-92,548,550,597,547,546,545,770',
'548,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289',
'-289,91,92,-289,-289,-289,637,772,-289,93,94,-289,597,625,-289,-289',
'974,-289,597,-289,240,-289,240,-289,-289,597,-289,-289,-289,-289,-289',
'-99,-289,113,-289,113,216,217,112,597,112,597,-102,240,597,599,598,608',
'-289,240,597,-289,-289,-289,-289,832,-289,220,-289,-575,-91,220,955',
'-289,-103,121,-575,-575,-575,220,-100,-575,-575,-575,-474,-575,599,598',
'595,93,94,-474,599,598,-575,-575,-575,-575,-83,599,598,595,746,662,220',
'-575,-575,978,-575,-575,-575,-575,-575,599,598,599,598,602,599,598,604',
'-477,-484,748,599,598,600,-483,-477,-484,529,666,517,531,-483,-575,-575',
'-575,-575,-575,-575,-575,-575,-575,-575,-575,-575,-575,-575,-474,985',
'-575,-575,-575,220,771,-575,212,522,-575,986,-485,-575,-575,984,-575',
'677,-575,-485,-575,755,-575,-575,982,-575,-575,-575,-575,-575,-95,-575',
'-575,-575,626,898,214,-477,-484,-482,-104,-479,79,-483,898,-489,-482',
'-575,-479,898,-575,-575,-575,-575,80,-575,529,-575,-477,531,836,805',
'-575,-101,81,-477,-477,-477,-90,682,-477,-477,-477,213,-477,683,529',
'-485,-99,531,685,-93,-477,-96,-477,-477,-477,529,216,217,528,-102,-89',
'-105,-477,-477,991,-477,-477,-477,-477,-477,-98,-289,-482,-289,-479',
'-332,689,-480,-289,692,-289,212,-332,-572,-480,-572,693,-289,263,-289',
'695,-332,-477,-477,-477,-477,-477,-477,-477,-477,-477,-477,-477,-477',
'-477,-477,697,699,-477,-477,-477,240,-477,-477,-290,957,-477,707,-481',
'-477,-477,-290,-477,708,-477,-481,-477,709,-477,-477,-290,-477,-477',
'-477,-477,-477,-289,-477,-289,-477,-332,220,-480,237,212,711,213,239',
'238,240,576,585,718,-477,319,735,-477,-477,-477,-477,587,-477,745,-477',
'-409,749,750,-262,-477,-477,109,-409,-409,-409,555,756,-409,-409,-409',
'-290,-409,237,479,-481,558,239,238,240,-572,-409,-409,-409,934,-571',
'547,546,545,-575,548,479,-409,-409,682,-409,-409,-409,-409,-409,550',
'213,547,546,545,212,548,974,220,566,565,237,579,774,559,239,238,318',
'235,236,259,577,-409,-409,-409,-409,-409,-409,-409,-409,-409,-409,-409',
'-409,-409,-409,490,701,-409,-409,-409,-575,492,-409,212,265,-409,798',
'-575,-409,-409,211,-409,-571,-409,677,-409,-575,-409,-409,209,-409,-409',
'-409,-409,-409,220,-409,-409,-409,213,240,265,265,677,240,-575,212,212',
'805,220,-568,220,-409,520,443,-409,-409,-577,-409,957,-409,830,444,444',
'-577,-577,-577,-409,220,-577,-577,-577,237,-577,805,-575,239,238,213',
'235,236,840,-577,-577,-577,-577,740,741,220,220,742,107,108,-577,-577',
'259,-577,-577,-577,-577,-577,934,-474,547,546,545,-279,548,1010,-474',
'849,213,213,-279,-568,-263,1011,1012,-474,858,974,974,-279,-577,-577',
'-577,-577,-577,-577,-577,-577,-577,-577,-577,-577,-577,-577,-568,212',
'-577,-577,-577,974,220,-577,510,861,-577,692,864,-577,-577,866,-577',
'508,-577,868,-577,870,-577,-577,220,-577,-577,-577,-577,-577,-474,-577',
'-577,-577,-279,872,555,550,-487,547,546,545,873,548,876,-487,558,-577',
'878,-569,-577,-577,-577,-577,-487,-577,-296,-577,879,677,881,215,-577',
'-296,-296,-296,213,-261,-296,-296,-296,885,-296,887,701,890,692,892',
'894,566,565,896,-296,-296,559,116,117,118,119,120,898,898,-296,-296',
'220,-296,-296,-296,-296,-296,904,-477,906,-487,908,-486,208,207,-477',
'206,914,445,-486,-569,447,448,219,-477,917,220,921,-486,-296,-296,-296',
'-296,-296,-296,-296,-296,-296,-296,-296,-296,-296,-296,-569,-290,-296',
'-296,-296,212,-264,-296,-290,274,-296,898,937,-296,-296,957,-296,-290',
'-296,931,-296,587,-296,-296,938,-296,-296,-296,-296,-296,-477,-296,-244',
'-296,-486,939,948,949,479,-244,-244,-244,488,490,-244,-244,-244,-296',
'-244,492,-296,-296,580,-296,959,-296,500,-244,-244,-244,-68,220,-296',
'503,504,960,-290,511,-244,-244,213,-244,-244,-244,-244,-244,550,274',
'547,546,545,550,548,547,546,545,550,548,547,546,545,220,548,116,117',
'118,119,120,-244,-244,-244,-244,-244,-244,-244,-244,-244,-244,-244,-244',
'-244,-244,265,701,-244,-244,-244,514,701,-244,518,265,-244,701,240,-244',
'-244,704,-244,965,-244,401,-244,735,-244,-244,220,-244,-244,-244,-244',
'-244,532,-244,-244,-244,550,533,547,546,545,555,548,116,117,118,119',
'120,492,-244,692,558,-244,-244,-576,-244,968,-244,576,390,,-576,-576',
'-576,-244,,-576,-576,-576,,-576,240,550,553,547,546,545,,548,-576,-576',
'-576,-576,,566,565,,254,255,559,-576,-576,,-576,-576,-576,-576,-576',
'550,,547,546,545,237,548,243,,239,238,701,235,236,,,241,,242,,903,,-576',
'-576,-576,-576,-576,-576,-576,-576,-576,-576,-576,-576,-576,-576,,701',
'-576,-576,-576,,,-576,,,-576,,,-576,-576,,-576,,-576,,-576,,-576,-576',
',-576,-576,-576,-576,-576,,-576,-576,-576,550,,547,546,545,,548,,,,',
',,-576,,,-576,-576,-576,-576,,-576,-280,-576,,,,,-576,-280,-280,-280',
',,-280,-280,-280,701,-280,240,,,,,,,704,,-280,-280,-280,,,,,254,255',
',-280,-280,,-280,-280,-280,-280,-280,,,,,,237,,243,,239,238,,235,236',
',,241,,242,,,,-280,-280,-280,-280,-280,-280,-280,-280,-280,-280,-280',
'-280,-280,-280,,,-280,-280,-280,,,-280,,,-280,,,-280,-280,,-280,,-280',
',-280,,-280,-280,,-280,-280,-280,-280,-280,,-280,,-280,,,,,,,,,,,,,',
'-280,,,-280,-280,-280,-280,,-280,-244,-280,,,,,-280,-244,-244,-244,',
',-244,-244,-244,550,-244,547,546,545,555,548,,,,-244,-244,,,,558,,,',
',,-244,-244,,-244,-244,-244,-244,-244,550,,547,546,545,555,548,550,553',
'547,546,545,555,548,,558,,563,562,566,565,,558,,559,,550,,547,546,545',
'555,548,-244,,,,553,,,-244,558,,,553,265,-244,,566,565,220,,,559,,566',
'565,,,,559,,,553,,,,,-244,-244,,,563,562,566,565,,,,559,,,,-244,,,-244',
',,,,-244,292,69,70,71,9,57,-244,,,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,101,100,102,103,,,19,,,,,635,8,45,294,10,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,240,244,249,250,251,246,248',
'256,257,252,253,,233,234,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243',
'44,239,238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,',
',,,80,88,,258,,-238,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,620,8,45',
'294,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,244',
'249,250,251,246,248,256,257,252,253,,233,234,,,254,255,,40,,,296,,,58',
'59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,258,,,,,62,,81,93,94,292,69,70,71,9,57',
',,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,',
',19,,,,,635,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92',
'42,43,41,240,244,249,250,251,246,248,256,257,252,253,,233,234,,,254',
'255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241',
'20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,258,,,,,62,,81,93,94,292',
'69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,240,244,249,250,251,246,248,256,257,252,253,,233',
'234,,,254,255,,40,,,296,,,58,59,,,60,,35,237,,243,44,239,238,,235,236',
'247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,258,,,,,62',
',81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,',
',,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,240,244,249,250,251,246,248,256,257',
'252,253,,233,234,,,254,255,,40,,,296,,,58,59,,,60,,35,237,,243,44,239',
'238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',258,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,244,249,250,251,246',
'248,256,257,252,253,,233,234,,,254,255,,40,,,33,,,58,59,,,60,,35,237',
',243,44,239,238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,258,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294',
'10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,244,249',
'250,251,246,248,256,257,252,253,,233,234,,,254,255,,40,,,33,,,58,59',
',,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,258,,,,,62,,81,93,94,5,69,70,71,9,57,,,,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,',
',,,8,45,7,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
'240,244,249,250,251,246,248,256,257,252,253,,233,234,,,254,255,,40,',
',33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242',
',,,89,79,82,83,,84,86,85,87,,,,,80,88,,258,,,,,62,,81,93,94,292,69,70',
'71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102',
'103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,240,244,249,250,251,246,248,256,257,252,253,,233,234,,,254',
'255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241',
'20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,258,,,,,62,,81,93,94,292',
'69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,240,244,249,250,251,246,248,256,257,252,253,,233',
'234,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236',
'247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,258,,,,,62',
',81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,',
',,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,240,244,249,250,251,246,248,256,257',
'252,253,,233,234,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239',
'238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',258,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,244,249,250,251,246',
'248,256,257,252,253,,233,234,,,254,255,,40,,,33,,,58,59,,,60,,35,237',
',243,44,239,238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,258,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294',
'10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,244,249',
'250,251,246,248,256,257,252,253,,233,234,,,254,255,,40,,,33,,,58,59',
',,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,220,258,,,,,62,,81,93,94,292,69,70,71,9,57',
',,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,',
',19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,240,244,249,250,251,246,248,256,257,252,253,,233,234,,,254,255',
',40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20',
'242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,258,,,,,62,,81,93,94,292',
'69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,240,244,249,250,251,246,248,256,257,252,253,,233',
'234,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236',
'247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,258,,,,,62',
',81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,',
',,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,240,244,249,250,251,246,248,256,257',
'252,253,,233,234,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239',
'238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',258,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,244,249,250,251,246',
'248,256,257,252,253,,233,234,,,254,255,,40,,,33,,,58,59,,,60,,35,237',
',243,44,239,238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,258,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294',
'10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,244,249',
'250,251,246,248,,,252,253,,,,,,254,255,,40,,,33,,,58,59,,,60,,35,237',
',243,44,239,238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,,,,,,62,,81,93,94,5,69,70,71,9,57,,,,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,7,10,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,-596,-596,-596',
'-596,246,248,,,-596,-596,,,,,,254,255,,40,,,33,,,58,59,,,60,,35,237',
',243,44,239,238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10',
'105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,-596,-596',
'-596,-596,246,248,,,-596,-596,,,,,,254,255,,40,,,33,,,58,59,,,60,,35',
'237,,243,44,239,238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294',
'10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,-596,-596',
'-596,-596,246,248,,,-596,-596,,,,,,254,255,,40,,,33,,,58,59,,,60,,35',
'237,,243,44,239,238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294',
'10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,-596,-596',
'-596,-596,246,248,,,-596,-596,,,,,,254,255,,40,,,33,,,58,59,,,60,,35',
'237,,243,44,239,238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294',
'10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,244,249',
'250,251,246,248,256,257,252,253,,-596,-596,,,254,255,,40,,,33,,,58,59',
',,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,',
',,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
'240,244,249,250,251,246,248,256,257,252,253,,-596,-596,,,254,255,,40',
',,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242',
',,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,292,69,70,71',
'9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102',
'103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,240,-596,-596,-596,-596,246,248,,,-596,-596,,,,,,254,255',
',40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20',
'242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,292,69',
'70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108',
',91,92,42,43,41,240,,,,,,,,,,,,,,,,254,255,,40,,,33,,,58,59,,,60,,35',
'237,,243,44,239,238,,235,236,,,241,20,242,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,-596,-596,-596',
'-596,246,248,,,-596,-596,,,,,,254,255,,40,,,33,,,58,59,,,60,,35,237',
',243,44,239,238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10',
'105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,,,,,,,,,',
',,,,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236',
',,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94',
'5,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,,19,,,,,,8,45,7,10,105,104,106,95,56,97,96,98,,99,107,108',
',91,92,42,43,41,240,244,249,250,251,246,248,256,,252,253,,,,,,254,255',
',40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20',
'242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,292,69',
'70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108',
',91,92,42,43,41,240,,,,,,,,,,,,,,,,254,255,,40,,,33,,,58,59,,,60,,35',
'237,,243,44,239,238,,235,236,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,',
'80,88,,,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,,,,,,,,,,,,,',
',,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,,,',
'20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94',
'63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19',
',,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240',
',,,,,,,,,,,,,,,254,255,,225,,,231,,,58,59,,,60,,,237,,,44,239,238,,235',
'236,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94',
'69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,,19,,,,,,8,45,7,10,105,104,106,95,56,97,96,98,,99,107,108',
',91,92,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,',
',,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103',
',,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43',
'41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,',
',89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64',
',,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,',
',,45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,',
',,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,287,,,,,,230',
',,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,',
',,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,287,,,,,,230',
',,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,',
',,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,287,,,,,,230',
',,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,',
'232,,,,,,,309,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,315',
',,,,,,,,,,,,,,,,,,,305,,,301,,,58,59,,,60,,300,,,,,,,,,,,,,,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',309,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,315,,,,,,,,,',
',,,,,,,,,,305,,,231,,,58,59,,,60,,,550,,547,546,545,555,548,,,,,,,,',
'558,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,317,,553,62,,81,93,94,69',
'70,71,,57,566,565,,63,64,559,,,67,,65,66,68,311,312,72,73,,,,,,307,308',
'314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,',
',,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,',
',,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92',
'42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,,,44,,,287',
',,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92',
'42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,287,,,',
',,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,',
',19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,',
'231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,',
',80,88,113,,,,,112,62,,81,93,94,69,70,71,,57,,,,63,64,,,,67,,65,66,68',
'311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,309,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,,,315,,,,,,,,,,,,,,,,,,,,350',
',,33,,,58,59,,,60,,35,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,',
'80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73',
',,,,,307,308,314,101,100,102,103,,,232,,,,,,,309,,,105,104,106,355,56',
'97,96,356,,99,107,108,,91,92,,,315,,,,,,,,,,,,,,,,,362,,,357,,,231,',
',58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,',
',69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307',
'308,314,101,100,102,103,,,232,,,,,,,309,,,105,104,106,355,56,97,96,356',
',99,107,108,,91,92,,,315,,,,,,,,,,,,,,,,,,,,357,,,231,,,58,59,,,60,',
',550,,547,546,545,555,548,,,,,,,,,558,,89,79,82,83,,84,86,85,87,,,,',
'80,88,,,,,,553,62,,81,93,94,69,70,71,9,57,566,565,,63,64,559,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,7,10',
'105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,',
',,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,,,390,62,,81,93,94,69,70,71,,57,,,,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,',
'105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,',
',,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,',
'231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,',
',80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96',
'98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59',
',,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69',
'70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108',
',91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,',
',,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,69',
'70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,19,,,,,,8,45,,10,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,',
',,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,',
',232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43',
'41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,406,,,,44,,,,,,,,,230',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,',
',,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,',
',,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45,',
',105,104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,,,,,,,',
',,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,287,,,,,,230,,,,,89',
'284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,',
',67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,',
'45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,',
',,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83',
',84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,406,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,',
'58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,',
',,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92',
'42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,220,,,69,70,71,62,57,81,93,94',
'63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103',
',,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43',
'41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,',
',89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64',
',,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232',
',,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,',
',,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,',
',,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311',
'312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72',
'73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,',
',,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58',
'59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
',,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307',
'308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,',
',,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,',
'232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,',
',,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311',
'312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72',
'73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,',
',,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58',
'59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
',,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307',
'308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,',
',,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,',
'232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,',
',,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,',
',,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,287,,,,,,230,,,,,89,284',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45,',
',105,104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,,,,,,,',
',,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,287,,,,,,230,,,,,89',
'284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,',
',67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,',
'45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,,,',
',,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,287,,,,,,230,,',
',,89,284,82,83,,84,86,85,87,,,,,80,88,220,,,69,70,71,62,57,81,93,94',
'63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103',
',,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43',
'41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,',
',89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64',
',,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232',
',,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,',
',,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,',
',,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,69,70,71,9,57,,,,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,',
'10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,',
',,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,309,,',
'105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,315,,,,,,,,,,,,,,,,',
',,,305,,,231,,,58,59,,,60,,,550,,547,546,545,555,548,,,,,,,,,558,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,506,,553,62,,81,93,94,69,70,71,,57',
'566,565,,63,64,559,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101',
'100,102,103,,,232,,,,,,,309,,,105,104,106,95,56,97,96,98,,99,107,108',
',91,92,,,315,,,,,,,,,,,,,,,,,,,,305,,,301,,,58,59,,,60,,,,,,,,,,,,,',
',,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94',
'63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103',
',,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43',
'41,,,,,,,,,,,,,,,,,,,,225,,,231,522,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,',
'58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,',
',,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92',
'42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,',
'232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45',
',,105,104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,,,,,,',
',,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,287,,,,,,230,,,,,89',
'284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,',
',67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,',
',,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,',
',,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,',
',,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,',
',,,,,225,,,231,,,58,59,,,60,,659,,281,,44,,,287,,,,,,230,,,,,89,284',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,281,,44,,,287,,,,,,230,,,,',
'89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64',
',,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232',
',,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,',
',,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,69,70,71,9,57,,,,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,',
',,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,,,390,62,,81,93,94,69,70,71,,57,',
',,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103',
',,232,,,,,,,309,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,315',
',,,,,,,,,,,,,,,,,,,305,,,301,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,',
',,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,287,,,,,,230,,,,,89,284',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',309,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,315,,,,,,,,,',
',,,,,,,,,,305,,,301,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311',
'312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58',
'59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,',
',69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307',
'308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98',
'286,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59',
',,60,,659,,,,44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,',
',,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97',
'96,98,286,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,',
'58,59,,,60,,,,,,44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,',
'80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73',
',,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,',
'58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,',
'307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96',
'98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59',
',,60,,283,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
',,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286',
'99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',283,,281,,44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286',
'99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',283,,281,,44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,',
'307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96',
'98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59',
',,60,,753,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
',,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307',
'308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,659,',
'281,,44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69',
'70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308',
'314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286',
'99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',,,281,,44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,',
',69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28',
'27,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,',
',,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,',
',,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45,',
',105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,',
',,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,',
'231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,',
',,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72',
'73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,',
',,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58',
'59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
',,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307',
'308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,309,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,,,315,,,,,,,,,,,,,,,,,,,,305,,,301,,,58,59,,,60,,,,,,,,,',
',,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,309,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92',
',,315,,,,,,,,,,,,,,,,,,,,305,,,301,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,406,,,,44,,,,,,,,,230,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,',
'105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,',
',,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,',
'231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,',
',80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73',
',,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,',
'58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,',
',,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,',
',,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,',
'232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',309,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,315,,,,,,,,,',
',,,,,,,,,,875,,,231,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,',
'231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,',
',80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73',
',,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,',
'58,59,,,60,,659,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,',
',,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97',
'96,98,286,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,',
'58,59,,,60,,,,281,,44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,',
',,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72',
'73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,',
',,,307,308,314,101,100,102,103,,,232,,,,,,,309,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,,,315,,,,,,,,,,,,,,,,,,,,875,,,231,,,58,59',
',,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,309,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,,,315,,,,,,,,,,,,,,,,,,,,945,,,231,,,58,59,,,60,,,,,,,,,',
',,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,',
',232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,287',
',,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94',
'173,184,174,197,170,190,180,179,200,201,195,178,177,172,198,202,203',
'182,171,185,189,191,183,176,,,,192,199,194,193,186,196,181,169,188,187',
',,,,,168,175,166,167,163,164,165,124,126,,,125,,,,,,,,157,158,,154,136',
'137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,,,,,,,,,151,150',
',135,156,153,152,161,148,149,143,141,133,155,134,,,162,89,,,,,,,,,,',
',,,88,173,184,174,197,170,190,180,179,200,201,195,178,177,172,198,202',
'203,182,171,185,189,191,183,176,,,,192,199,194,193,186,196,181,169,188',
'187,,,,,,168,175,166,167,163,164,165,124,126,,,125,,,,,,,,157,158,,154',
'136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,,,,,,,,,151',
'150,,135,156,153,152,161,148,149,143,141,133,155,134,,,162,89,,,,,,',
',,,,,,,88,173,184,174,197,170,190,180,179,200,201,195,178,177,172,198',
'202,203,182,171,185,189,191,183,176,,,,192,199,194,193,186,196,181,169',
'188,187,,,,,,168,175,166,167,163,164,165,124,126,,,125,,,,,,,,157,158',
',154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,,,,,',
',,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134,,,162,89',
',,,,,,,,,,,,,88,173,184,174,197,170,190,180,179,200,201,195,178,177',
'172,198,202,203,182,171,185,189,191,183,176,,,,192,199,194,193,186,196',
'181,169,188,187,,,,,,168,175,166,167,163,164,165,124,126,123,,125,,',
',,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147',
',,,,,,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134',
',,162,89,,,,,,,,,,,,,,88,173,184,174,197,170,190,180,179,200,201,195',
'178,177,172,198,202,203,182,171,185,189,191,183,176,,,,192,199,194,373',
'372,374,371,169,188,187,,,,,,168,175,166,167,368,369,370,366,126,97',
'96,367,,99,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159',
'160,146,147,,,,,,378,,,,,,,,151,150,,135,156,153,152,161,148,149,143',
'141,133,155,134,,,162,173,184,174,197,170,190,180,179,200,201,195,178',
'177,172,198,202,203,182,171,185,189,191,183,176,,,,192,199,194,193,186',
'196,181,169,188,187,,,,,,168,175,166,167,163,164,165,124,126,,,125,',
',,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146',
'147,,,,,,,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155',
'134,477,419,162,,478,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139',
'140,,,,159,160,146,147,,,,,,265,,,,,,,,151,150,,135,156,153,152,161',
'148,149,143,141,133,155,134,670,419,162,,671,,,,,,,,157,158,,154,136',
'137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,265,,,,,,,,151',
'150,,135,156,153,152,161,148,149,143,141,133,155,134,673,426,162,,674',
',,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146',
'147,,,,,,265,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133',
'155,134,638,419,162,,639,,,,,,,,157,158,,154,136,137,138,145,142,144',
',,139,140,,,,159,160,146,147,,,,,,265,,,,,,,,151,150,,135,156,153,152',
'161,148,149,143,141,133,155,134,640,426,162,,641,,,,,,,,157,158,,154',
'136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,265,,,,,,',
',151,150,,135,156,153,152,161,148,149,143,141,133,155,134,638,419,162',
',639,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160',
'146,147,,,,,,265,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141',
'133,155,134,640,426,162,,641,,,,,,,,157,158,,154,136,137,138,145,142',
'144,,,139,140,,,,159,160,146,147,,,,,,265,,,,,,,,151,150,,135,156,153',
'152,161,148,149,143,141,133,155,134,721,419,162,,722,,,,,,,,157,158',
',154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,265,',
',,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134,723,426',
'162,,724,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159',
'160,146,147,,,,,,265,,,,,,,,151,150,,135,156,153,152,161,148,149,143',
'141,133,155,134,726,426,162,,727,,,,,,,,157,158,,154,136,137,138,145',
'142,144,,,139,140,,,,159,160,146,147,,,,,,265,,,,,,,,151,150,,135,156',
'153,152,161,148,149,143,141,133,155,134,477,419,162,,478,,,,,,,,157',
'158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,',
',,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134,980',
'426,162,,979,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,',
',,159,160,146,147,,,,,,265,,,,,,,,151,150,,135,156,153,152,161,148,149',
'143,141,133,155,134,422,426,162,,421,,,,,,,,157,158,,154,136,137,138',
'145,142,144,,,139,140,,,,159,160,146,147,,,,,,265,,,,,,,,151,150,,135',
'156,153,152,161,148,149,143,141,133,155,134,415,419,162,,416,,,,,,,',
'157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,',
',,,265,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134',
'1003,419,162,,1004,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139',
'140,,,,159,160,146,147,,,,,,265,,,,,,,,151,150,,135,156,153,152,161',
'148,149,143,141,133,155,134,1005,426,162,,1006,,,,,,,,157,158,,154,136',
'137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,265,,,,,,,,151',
'150,,135,156,153,152,161,148,149,143,141,133,155,134,,550,162,547,546',
'545,555,548,,550,,547,546,545,555,548,558,,,,,,,,558,,550,,547,546,545',
'555,548,,,,,,553,,,558,,,,,553,563,562,566,565,,,,559,563,562,566,565',
',,,559,553,,550,,547,546,545,555,548,563,562,566,565,,,,559,558,,550',
',547,546,545,555,548,550,,547,546,545,555,548,,558,,,,,553,,558,,,,',
',,563,562,566,565,,,,559,553,,,,,,,553,,,,566,565,,,,559,,566,565,,',
'550,559,547,546,545,555,548,550,,547,546,545,555,548,,558,,,,,,550,558',
'547,546,545,555,548,,,,,,,,,558,553,,,,,,,553,,,,566,565,,,,559,,566',
'565,,553,,559,,,,,,,563,562,566,565,,,550,559,547,546,545,555,548,,550',
',547,546,545,555,548,558,,,,,,,,558,,550,,547,546,545,555,548,,,,,,553',
'536,,558,,,,,553,563,562,566,565,,,,559,563,562,566,565,,,,559,553,',
'550,,547,546,545,555,548,563,562,566,565,,,,559,558,,,,,,,,,,,,,,,,',
',,,,,553,,,,,,,,,563,562,566,565,,,,559' ]
        racc_action_table = arr = ::Array.new(25159, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'422,638,907,17,17,687,38,422,422,422,19,1005,572,422,422,484,422,61',
'943,721,24,340,341,385,475,422,123,24,348,351,223,123,123,993,993,310',
'422,422,1006,422,422,422,422,422,719,1017,985,665,1004,905,484,19,1003',
'38,594,594,352,665,638,475,439,439,361,38,347,722,422,422,422,422,422',
'422,422,422,422,422,422,422,422,422,926,946,422,422,422,24,422,223,1005',
'385,422,884,800,422,692,692,843,580,422,310,422,927,422,422,61,422,422',
'422,422,422,421,422,422,422,687,1006,572,421,421,421,907,572,310,421',
'421,907,421,422,721,1005,422,422,942,422,1005,422,943,348,351,340,341',
'943,422,422,340,341,421,421,594,421,421,421,421,421,439,650,1006,58',
'800,671,670,1006,719,1017,985,719,1004,719,1017,985,1003,1004,573,347',
'722,1003,421,421,421,421,421,421,421,421,421,421,421,421,421,421,26',
'357,421,421,421,357,421,58,800,946,421,800,723,421,946,843,580,224,421',
'884,421,800,421,421,884,421,421,421,421,421,95,421,912,421,912,671,670',
'95,95,95,680,680,95,95,95,386,95,421,396,483,421,421,650,421,95,421',
'95,95,95,402,942,445,421,421,26,942,95,95,226,95,95,95,95,95,224,671',
'670,723,671,670,673,405,724,844,483,344,573,26,671,670,344,573,651,928',
'590,590,95,95,95,95,95,95,95,95,95,95,95,95,95,95,387,386,95,95,95,936',
'95,95,445,407,95,723,936,95,95,226,95,651,95,411,95,936,95,95,680,95',
'95,95,95,95,413,95,641,95,414,673,673,724,109,641,641,641,315,315,641',
'641,641,95,641,3,95,95,95,95,3,95,290,95,641,641,641,290,95,95,387,387',
'387,423,641,641,936,641,641,641,641,641,673,844,590,673,431,724,844',
'590,704,773,704,704,704,673,704,903,384,903,903,903,639,903,641,641',
'641,641,641,641,641,641,641,641,641,641,641,641,41,41,641,641,641,441',
'641,641,315,315,641,494,415,641,641,930,641,605,641,453,641,454,641',
'641,380,641,641,641,641,641,773,641,852,641,847,339,339,852,607,847',
'382,639,455,383,384,384,384,641,456,381,641,641,641,641,704,641,481',
'641,640,415,485,903,641,641,7,640,640,640,501,415,640,640,640,366,640',
'494,494,494,41,41,366,605,605,640,640,640,640,502,380,380,380,605,494',
'932,640,640,932,640,640,640,640,640,607,607,382,382,382,383,383,383',
'367,368,607,381,381,381,369,367,368,686,505,319,686,369,640,640,640',
'640,640,640,640,640,640,640,640,640,640,640,366,945,640,640,640,507',
'640,640,944,512,640,950,370,640,640,944,640,515,640,370,640,621,640',
'640,944,640,640,640,640,640,319,640,640,640,416,951,15,367,368,371,319',
'372,77,369,952,39,371,640,372,953,640,640,640,640,77,640,334,640,98',
'334,710,710,640,640,77,98,98,98,621,523,98,98,98,944,98,524,331,370',
'621,331,526,416,98,15,98,98,98,330,525,525,330,416,39,15,98,98,954,98',
'98,98,98,98,39,727,371,674,372,46,538,373,727,539,674,376,46,727,373',
'674,541,727,376,674,542,46,98,98,98,98,98,98,98,98,98,98,98,98,98,98',
'543,552,98,98,98,451,98,98,511,956,98,560,374,98,98,511,98,564,98,374',
'98,567,98,98,511,98,98,98,98,98,727,98,674,98,46,45,373,451,359,569',
'376,451,451,452,574,359,575,98,40,592,98,98,98,98,359,98,602,98,27,610',
'612,618,98,98,1,27,27,27,689,622,27,27,27,511,27,452,627,374,689,452',
'452,470,979,27,27,27,872,980,872,872,872,726,872,632,27,27,981,27,27',
'27,27,27,832,359,832,832,832,349,832,1019,642,689,689,470,349,644,689',
'470,470,37,470,470,649,349,27,27,27,27,27,27,27,27,27,27,27,27,27,27',
'656,832,27,27,27,726,658,27,14,27,27,664,726,27,27,14,27,726,27,667',
'27,726,27,27,14,27,27,27,27,27,669,27,27,27,349,471,672,675,676,679',
'726,321,222,681,684,355,688,27,321,222,27,27,427,27,992,27,703,321,222',
'427,427,427,27,705,427,427,427,471,427,712,726,471,471,14,471,471,717',
'427,427,427,427,598,598,720,729,598,598,598,427,427,22,427,427,427,427',
'427,978,355,978,978,978,306,978,994,355,733,321,222,306,355,752,995',
'996,355,757,997,998,306,427,427,427,427,427,427,427,427,427,427,427',
'427,427,427,355,304,427,427,427,999,1002,427,304,775,427,776,778,427',
'427,779,427,304,427,780,427,782,427,427,783,427,427,427,427,427,355',
'427,427,427,306,784,861,955,303,955,955,955,785,955,789,303,861,427',
'793,356,427,427,427,427,303,427,28,427,794,799,803,16,427,28,28,28,304',
'806,28,28,28,807,28,810,955,815,816,820,821,861,861,823,28,28,861,6',
'6,6,6,6,824,826,28,28,829,28,28,28,28,28,831,356,834,303,837,302,13',
'12,356,10,846,225,302,356,227,228,232,356,850,851,854,302,28,28,28,28',
'28,28,28,28,28,28,28,28,28,28,356,583,28,28,28,874,855,28,583,28,28',
'1007,874,28,28,1008,28,583,28,871,28,874,28,28,875,28,28,28,28,28,356',
'28,417,28,302,877,888,889,264,417,417,417,278,279,417,417,417,28,417',
'282,28,28,350,28,909,28,294,417,417,417,295,297,28,298,299,910,583,305',
'417,417,874,417,417,417,417,417,991,308,991,991,991,553,991,553,553',
'553,957,553,957,957,957,309,957,499,499,499,499,499,417,417,417,417',
'417,417,417,417,417,417,417,417,417,417,314,991,417,417,417,316,553',
'417,320,417,417,957,323,417,417,553,417,916,417,204,417,920,417,417',
'328,417,417,417,417,417,332,417,417,417,898,333,898,898,898,898,898',
'293,293,293,293,293,335,417,922,898,417,417,426,417,925,417,345,346',
',426,426,426,417,,426,426,426,,426,462,830,898,830,830,830,,830,426',
'426,426,426,,898,898,,462,462,898,426,426,,426,426,426,426,426,904,',
'904,904,904,462,904,462,,462,462,830,462,462,,,462,,462,,830,,426,426',
'426,426,426,426,426,426,426,426,426,426,426,426,,904,426,426,426,,,426',
',,426,,,426,426,,426,,426,,426,,426,426,,426,426,426,426,426,,426,426',
'426,701,,701,701,701,,701,,,,,,,426,,,426,426,426,426,,426,56,426,,',
',,426,56,56,56,,,56,56,56,701,56,463,,,,,,,701,,56,56,56,,,,,463,463',
',56,56,,56,56,56,56,56,,,,,,463,,463,,463,463,,463,463,,,463,,463,,',
',56,56,56,56,56,56,56,56,56,56,56,56,56,56,,,56,56,56,,,56,,,56,,,56',
'56,,56,,56,,56,,56,56,,56,56,56,56,56,,56,,56,,,,,,,,,,,,,,56,,,56,56',
'56,56,,56,476,56,,,,,56,476,476,476,,,476,476,476,646,476,646,646,646',
'646,646,,,,476,476,,,,646,,,,,,476,476,,476,476,476,476,476,986,,986',
'986,986,986,986,868,646,868,868,868,868,868,,986,,646,646,646,646,,868',
',646,,866,,866,866,866,866,866,476,,,,986,,,476,866,,,868,476,476,,986',
'986,646,,,986,,868,868,,,,868,,,866,,,,,476,476,,,866,866,866,866,,',
',866,,,,476,,,476,,,,,476,941,941,941,941,941,941,476,,,941,941,,,,941',
',941,941,941,941,941,941,941,,,,,,941,941,941,941,941,941,941,,,941',
',,,,434,941,941,941,941,941,941,941,941,941,941,941,941,,941,941,941',
',941,941,941,941,941,434,434,434,434,434,434,434,434,434,434,434,,434',
'434,,,434,434,,941,,,941,,,941,941,,,941,,941,434,,434,941,434,434,',
'434,434,434,434,434,941,434,,,,941,941,941,941,,941,941,941,941,,,,',
'941,941,,434,,434,,,941,,941,941,941,33,33,33,33,33,33,,,,33,33,,,,33',
',33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33,,,,,410,33,33,33',
'33,33,33,33,33,33,33,33,33,,33,33,33,,33,33,33,33,33,410,410,410,410',
'410,410,410,410,410,410,410,,410,410,,,410,410,,33,,,33,,,33,33,,,33',
',33,410,,410,33,410,410,,410,410,410,410,410,33,410,,,,33,33,33,33,',
'33,33,33,33,,,,,33,33,,410,,,,,33,,33,33,33,881,881,881,881,881,881',
',,,881,881,,,,881,,881,881,881,881,881,881,881,,,,,,881,881,881,881',
'881,881,881,,,881,,,,,643,881,881,881,881,881,881,881,881,881,881,881',
'881,,881,881,881,,881,881,881,881,881,643,643,643,643,643,643,643,643',
'643,643,643,,643,643,,,643,643,,881,,,881,,,881,881,,,881,,881,643,',
'643,881,643,643,,643,643,643,643,643,881,643,,,,881,881,881,881,,881',
'881,881,881,,,,,881,881,,643,,,,,881,,881,881,881,301,301,301,301,301',
'301,,,,301,301,,,,301,,301,301,301,301,301,301,301,,,,,,301,301,301',
'301,301,301,301,,,301,,,,,,301,301,301,301,301,301,301,301,301,301,301',
'301,,301,301,301,,301,301,301,301,301,276,276,276,276,276,276,276,276',
'276,276,276,,276,276,,,276,276,,301,,,301,,,301,301,,,301,,301,276,',
'276,301,276,276,,276,276,276,276,276,301,276,,,,301,301,301,301,,301',
'301,301,301,,,,,301,301,,276,,,,,301,,301,301,301,296,296,296,296,296',
'296,,,,296,296,,,,296,,296,296,296,296,296,296,296,,,,,,296,296,296',
'296,296,296,296,,,296,,,,,,296,296,296,296,296,296,296,296,296,296,296',
'296,,296,296,296,,296,296,296,296,296,678,678,678,678,678,678,678,678',
'678,678,678,,678,678,,,678,678,,296,,,296,,,296,296,,,296,,296,678,',
'678,296,678,678,,678,678,678,678,678,296,678,,,,296,296,296,296,,296',
'296,296,296,,,,,296,296,,678,,,,,296,,296,296,296,848,848,848,848,848',
'848,,,,848,848,,,,848,,848,848,848,848,848,848,848,,,,,,848,848,848',
'848,848,848,848,,,848,,,,,,848,848,848,848,848,848,848,848,848,848,848',
'848,,848,848,848,,848,848,848,848,848,21,21,21,21,21,21,21,21,21,21',
'21,,21,21,,,21,21,,848,,,848,,,848,848,,,848,,848,21,,21,848,21,21,',
'21,21,21,21,21,848,21,,,,848,848,848,848,,848,848,848,848,,,,,848,848',
',21,,,,,848,,848,848,848,648,648,648,648,648,648,,,,648,648,,,,648,',
'648,648,648,648,648,648,648,,,,,,648,648,648,648,648,648,648,,,648,',
',,,,648,648,648,648,648,648,648,648,648,648,648,648,,648,648,648,,648',
'648,648,648,648,754,754,754,754,754,754,754,754,754,754,754,,754,754',
',,754,754,,648,,,648,,,648,648,,,648,,648,754,,754,648,754,754,,754',
'754,754,754,754,648,754,,,,648,648,648,648,,648,648,648,648,,,,,648',
'648,,754,,,,,648,,648,648,648,0,0,0,0,0,0,,,,0,0,,,,0,,0,0,0,0,0,0,0',
',,,,,0,0,0,0,0,0,0,,,0,,,,,,0,0,0,0,0,0,0,0,0,0,0,0,,0,0,0,,0,0,0,0',
'0,759,759,759,759,759,759,759,759,759,759,759,,759,759,,,759,759,,0',
',,0,,,0,0,,,0,,0,759,,759,0,759,759,,759,759,759,759,759,0,759,,,,0',
'0,0,0,,0,0,0,0,,,,,0,0,,759,,,,,0,,0,0,0,591,591,591,591,591,591,,,',
'591,591,,,,591,,591,591,591,591,591,591,591,,,,,,591,591,591,591,591',
'591,591,,,591,,,,,,591,591,591,591,591,591,591,591,591,591,591,591,',
'591,591,591,,591,591,591,591,591,761,761,761,761,761,761,761,761,761',
'761,761,,761,761,,,761,761,,591,,,591,,,591,591,,,591,,591,761,,761',
'591,761,761,,761,761,761,761,761,591,761,,,,591,591,591,591,,591,591',
'591,591,,,,,591,591,,761,,,,,591,,591,591,591,231,231,231,231,231,231',
',,,231,231,,,,231,,231,231,231,231,231,231,231,,,,,,231,231,231,231',
'231,231,231,,,231,,,,,,231,231,231,231,231,231,231,231,231,231,231,231',
',231,231,231,,231,231,231,231,231,764,764,764,764,764,764,764,764,764',
'764,764,,764,764,,,764,764,,231,,,231,,,231,231,,,231,,231,764,,764',
'231,764,764,,764,764,764,764,764,231,764,,,,231,231,231,231,,231,231',
'231,231,,,,,231,231,,764,,,,,231,,231,231,231,571,571,571,571,571,571',
',,,571,571,,,,571,,571,571,571,571,571,571,571,,,,,,571,571,571,571',
'571,571,571,,,571,,,,,,571,571,571,571,571,571,571,571,571,571,571,571',
',571,571,571,,571,571,571,571,571,766,766,766,766,766,766,766,766,766',
'766,766,,766,766,,,766,766,,571,,,571,,,571,571,,,571,,571,766,,766',
'571,766,766,,766,766,766,766,766,571,766,,,,571,571,571,571,,571,571',
'571,571,,,,,571,571,,766,,,,,571,,571,571,571,842,842,842,842,842,842',
',,,842,842,,,,842,,842,842,842,842,842,842,842,,,,,,842,842,842,842',
'842,842,842,,,842,,,,,,842,842,842,842,842,842,842,842,842,842,842,842',
',842,842,842,,842,842,842,842,842,768,768,768,768,768,768,768,768,768',
'768,768,,768,768,,,768,768,,842,,,842,,,842,842,,,842,,842,768,,768',
'842,768,768,,768,768,768,768,768,842,768,,,,842,842,842,842,,842,842',
'842,842,,,,,842,842,,768,,,,,842,,842,842,842,839,839,839,839,839,839',
',,,839,839,,,,839,,839,839,839,839,839,839,839,,,,,,839,839,839,839',
'839,839,839,,,839,,,,,,839,839,839,839,839,839,839,839,839,839,839,839',
',839,839,839,,839,839,839,839,839,474,474,474,474,474,474,474,474,474',
'474,474,,474,474,,,474,474,,839,,,839,,,839,839,,,839,,839,474,,474',
'839,474,474,,474,474,474,474,474,839,474,,,,839,839,839,839,,839,839',
'839,839,,,,,839,839,474,474,,,,,839,,839,839,839,838,838,838,838,838',
'838,,,,838,838,,,,838,,838,838,838,838,838,838,838,,,,,,838,838,838',
'838,838,838,838,,,838,,,,,,838,838,838,838,838,838,838,838,838,838,838',
'838,,838,838,838,,838,838,838,838,838,521,521,521,521,521,521,521,521',
'521,521,521,,521,521,,,521,521,,838,,,838,,,838,838,,,838,,838,521,',
'521,838,521,521,,521,521,521,521,521,838,521,,,,838,838,838,838,,838',
'838,838,838,,,,,838,838,,521,,,,,838,,838,838,838,568,568,568,568,568',
'568,,,,568,568,,,,568,,568,568,568,568,568,568,568,,,,,,568,568,568',
'568,568,568,568,,,568,,,,,,568,568,568,568,568,568,568,568,568,568,568',
'568,,568,568,568,,568,568,568,568,568,429,429,429,429,429,429,429,429',
'429,429,429,,429,429,,,429,429,,568,,,568,,,568,568,,,568,,568,429,',
'429,568,429,429,,429,429,429,429,429,568,429,,,,568,568,568,568,,568',
'568,568,568,,,,,568,568,,429,,,,,568,,568,568,568,805,805,805,805,805',
'805,,,,805,805,,,,805,,805,805,805,805,805,805,805,,,,,,805,805,805',
'805,805,805,805,,,805,,,,,,805,805,805,805,805,805,805,805,805,805,805',
'805,,805,805,805,,805,805,805,805,805,857,857,857,857,857,857,857,857',
'857,857,857,,857,857,,,857,857,,805,,,805,,,805,805,,,805,,805,857,',
'857,805,857,857,,857,857,857,857,857,805,857,,,,805,805,805,805,,805',
'805,805,805,,,,,805,805,,857,,,,,805,,805,805,805,814,814,814,814,814',
'814,,,,814,814,,,,814,,814,814,814,814,814,814,814,,,,,,814,814,814',
'814,814,814,814,,,814,,,,,,814,814,814,814,814,814,814,814,814,814,814',
'814,,814,814,814,,814,814,814,814,814,860,860,860,860,860,860,860,860',
'860,860,860,,860,860,,,860,860,,814,,,814,,,814,814,,,814,,814,860,',
'860,814,860,860,,860,860,860,860,860,814,860,,,,814,814,814,814,,814',
'814,814,814,,,,,814,814,,860,,,,,814,,814,814,814,813,813,813,813,813',
'813,,,,813,813,,,,813,,813,813,813,813,813,813,813,,,,,,813,813,813',
'813,813,813,813,,,813,,,,,,813,813,813,813,813,813,813,813,813,813,813',
'813,,813,813,813,,813,813,813,813,813,472,472,472,472,472,472,472,,',
'472,472,,,,,,472,472,,813,,,813,,,813,813,,,813,,813,472,,472,813,472',
'472,,472,472,472,472,472,813,472,,,,813,813,813,813,,813,813,813,813',
',,,,813,813,,,,,,,813,,813,813,813,500,500,500,500,500,500,,,,500,500',
',,,500,,500,500,500,500,500,500,500,,,,,,500,500,500,500,500,500,500',
',,500,,,,,,500,500,500,500,500,500,500,500,500,500,500,500,,500,500',
'500,,500,500,500,500,500,465,465,465,465,465,465,465,,,465,465,,,,,',
'465,465,,500,,,500,,,500,500,,,500,,500,465,,465,500,465,465,,465,465',
'465,465,465,500,465,,,,500,500,500,500,,500,500,500,500,,,,,500,500',
',,,,,,500,,500,500,500,792,792,792,792,792,792,,,,792,792,,,,792,,792',
'792,792,792,792,792,792,,,,,,792,792,792,792,792,792,792,,,792,,,,,',
'792,792,792,792,792,792,792,792,792,792,792,792,,792,792,792,,792,792',
'792,792,792,466,466,466,466,466,466,466,,,466,466,,,,,,466,466,,792',
',,792,,,792,792,,,792,,792,466,,466,792,466,466,,466,466,466,466,466',
'792,466,,,,792,792,792,792,,792,792,792,792,,,,,792,792,,,,,,,792,,792',
'792,792,744,744,744,744,744,744,,,,744,744,,,,744,,744,744,744,744,744',
'744,744,,,,,,744,744,744,744,744,744,744,,,744,,,,,,744,744,744,744',
'744,744,744,744,744,744,744,744,,744,744,744,,744,744,744,744,744,469',
'469,469,469,469,469,469,,,469,469,,,,,,469,469,,744,,,744,,,744,744',
',,744,,744,469,,469,744,469,469,,469,469,469,469,469,744,469,,,,744',
'744,744,744,,744,744,744,744,,,,,744,744,,,,,,,744,,744,744,744,964',
'964,964,964,964,964,,,,964,964,,,,964,,964,964,964,964,964,964,964,',
',,,,964,964,964,964,964,964,964,,,964,,,,,,964,964,964,964,964,964,964',
'964,964,964,964,964,,964,964,964,,964,964,964,964,964,467,467,467,467',
'467,467,467,,,467,467,,,,,,467,467,,964,,,964,,,964,964,,,964,,964,467',
',467,964,467,467,,467,467,467,467,467,964,467,,,,964,964,964,964,,964',
'964,964,964,,,,,964,964,,,,,,,964,,964,964,964,734,734,734,734,734,734',
',,,734,734,,,,734,,734,734,734,734,734,734,734,,,,,,734,734,734,734',
'734,734,734,,,734,,,,,,734,734,734,734,734,734,734,734,734,734,734,734',
',734,734,734,,734,734,734,734,734,450,450,450,450,450,450,450,450,450',
'450,450,,450,450,,,450,450,,734,,,734,,,734,734,,,734,,734,450,,450',
'734,450,450,,450,450,450,450,450,734,450,,,,734,734,734,734,,734,734',
'734,734,,,,,734,734,,,,,,,734,,734,734,734,730,730,730,730,730,730,',
',,730,730,,,,730,,730,730,730,730,730,730,730,,,,,,730,730,730,730,730',
'730,730,,,730,,,,,,730,730,730,730,730,730,730,730,730,730,730,730,',
'730,730,730,,730,730,730,730,730,449,449,449,449,449,449,449,449,449',
'449,449,,449,449,,,449,449,,730,,,730,,,730,730,,,730,,730,449,,449',
'730,449,449,,449,449,449,449,449,730,449,,,,730,730,730,730,,730,730',
'730,730,,,,,730,730,,,,,,,730,,730,730,730,654,654,654,654,654,654,',
',,654,654,,,,654,,654,654,654,654,654,654,654,,,,,,654,654,654,654,654',
'654,654,,,654,,,,,,654,654,654,654,654,654,654,654,654,654,654,654,',
'654,654,654,,654,654,654,654,654,468,468,468,468,468,468,468,,,468,468',
',,,,,468,468,,654,,,654,,,654,654,,,654,,654,468,,468,654,468,468,,468',
'468,468,468,468,654,468,,,,654,654,654,654,,654,654,654,654,,,,,654',
'654,,,,,,,654,,654,654,654,653,653,653,653,653,653,,,,653,653,,,,653',
',653,653,653,653,653,653,653,,,,,,653,653,653,653,653,653,653,,,653',
',,,,,653,653,653,653,653,653,653,653,653,653,653,653,,653,653,653,,653',
'653,653,653,653,464,,,,,,,,,,,,,,,,464,464,,653,,,653,,,653,653,,,653',
',653,464,,464,653,464,464,,464,464,,,464,653,464,,,,653,653,653,653',
',653,653,653,653,,,,,653,653,,,,,,,653,,653,653,653,966,966,966,966',
'966,966,,,,966,966,,,,966,,966,966,966,966,966,966,966,,,,,,966,966',
'966,966,966,966,966,,,966,,,,,,966,966,966,966,966,966,966,966,966,966',
'966,966,,966,966,966,,966,966,966,966,966,460,460,460,460,460,460,460',
',,460,460,,,,,,460,460,,966,,,966,,,966,966,,,966,,966,460,,460,966',
'460,460,,460,460,460,460,460,966,460,,,,966,966,966,966,,966,966,966',
'966,,,,,966,966,,,,,,,966,,966,966,966,958,958,958,958,958,958,,,,958',
'958,,,,958,,958,958,958,958,958,958,958,,,,,,958,958,958,958,958,958',
'958,,,958,,,,,,958,958,958,958,958,958,958,958,958,958,958,958,,958',
'958,958,,958,958,958,958,958,461,,,,,,,,,,,,,,,,461,461,,958,,,958,',
',958,958,,,958,,958,461,,461,958,461,461,,461,461,,,461,958,461,,,,958',
'958,958,958,,958,958,958,958,,,,,958,958,,,,,,,958,,958,958,958,121',
'121,121,121,121,121,,,,121,121,,,,121,,121,121,121,121,121,121,121,',
',,,,121,121,121,121,121,121,121,,,121,,,,,,121,121,121,121,121,121,121',
'121,121,121,121,121,,121,121,121,,121,121,121,121,121,473,473,473,473',
'473,473,473,473,,473,473,,,,,,473,473,,121,,,121,,,121,121,,,121,,121',
'473,,473,121,473,473,,473,473,473,473,473,121,473,,,,121,121,121,121',
',121,121,121,121,,,,,121,121,,,,,,,121,,121,121,121,326,326,326,326',
'326,326,,,,326,326,,,,326,,326,326,326,326,326,326,326,,,,,,326,326',
'326,326,326,326,326,,,326,,,,,,326,326,326,326,326,326,326,326,326,326',
'326,326,,326,326,326,,326,326,326,326,326,457,,,,,,,,,,,,,,,,457,457',
',326,,,326,,,326,326,,,326,,326,457,,457,326,457,457,,457,457,,,,326',
',,,,326,326,326,326,,326,326,326,326,,,,,326,326,,,,,,,326,,326,326',
'326,206,206,206,206,206,206,,,,206,206,,,,206,,206,206,206,206,206,206',
'206,,,,,,206,206,206,206,206,206,206,,,206,,,,,,206,206,206,206,206',
'206,206,206,206,206,206,206,,206,206,206,,206,206,206,206,206,458,,',
',,,,,,,,,,,,,458,458,,206,,,206,,,206,206,,,206,,206,458,,458,206,458',
'458,,458,458,,,,206,,,,,206,206,206,206,,206,206,206,206,,,,,206,206',
',,,216,216,216,206,216,206,206,206,216,216,,,,216,,216,216,216,216,216',
'216,216,,,,,,216,216,216,216,216,216,216,,,216,,,,,,,216,,,216,216,216',
'216,216,216,216,216,,216,216,216,,216,216,216,216,216,459,,,,,,,,,,',
',,,,,459,459,,216,,,216,,,216,216,,,216,,,459,,,216,459,459,,459,459',
',,,216,,,,,216,216,216,216,,216,216,216,216,,,,,216,216,,,,,,,216,,216',
'216,216,5,5,5,5,5,,,,5,5,,,,5,,5,5,5,5,5,5,5,,,,,,5,5,5,5,5,5,5,,,5',
',,,,,5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,,5,5,5,5,5,,,,,,,,,,,,,,,,,,,,5',
',,5,,,5,5,,,5,,5,,,,5,,,,,,,,,5,,,,,5,5,5,5,,5,5,5,5,,,,,5,5,,,,20,20',
'20,5,20,5,5,5,20,20,,,,20,,20,20,20,20,20,20,20,,,,,,20,20,20,20,20',
'20,20,,,20,,,,,,,20,,,20,20,20,20,20,20,20,20,,20,20,20,,20,20,20,20',
'20,,,,,,,,,,,,,,,,,,,,20,,,20,,,20,20,,,20,,,,,,20,,,,,,,,,20,,,,,20',
'20,20,20,,20,20,20,20,,,,,20,20,,,,29,29,29,20,29,20,20,20,29,29,,,',
'29,,29,29,29,29,29,29,29,,,,,,29,29,29,29,29,29,29,,,29,,,,,,,29,,,29',
'29,29,29,29,29,29,29,29,29,29,29,,29,29,29,29,29,,,,,,,,,,,,,,,,,,,',
'29,,,29,,,29,29,,,29,,29,,29,,29,,,29,,,,,,29,,,,,29,29,29,29,,29,29',
'29,29,,,,,29,29,,,,30,30,30,29,30,29,29,29,30,30,,,,30,,30,30,30,30',
'30,30,30,,,,,,30,30,30,30,30,30,30,,,30,,,,,,,30,,,30,30,30,30,30,30',
'30,30,30,30,30,30,,30,30,30,30,30,,,,,,,,,,,,,,,,,,,,30,,,30,,,30,30',
',,30,,30,,30,,30,,,30,,,,,,30,,,,,30,30,30,30,,30,30,30,30,,,,,30,30',
',,,31,31,31,30,31,30,30,30,31,31,,,,31,,31,31,31,31,31,31,31,,,,,,31',
'31,31,31,31,31,31,,,31,,,,,,,31,,,31,31,31,31,31,31,31,31,31,31,31,31',
',31,31,31,31,31,,,,,,,,,,,,,,,,,,,,31,,,31,,,31,31,,,31,,31,,31,,31',
',,31,,,,,,31,,,,,31,31,31,31,,31,31,31,31,,,,,31,31,,,,34,34,34,31,34',
'31,31,31,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34,34',
',,34,,,,,,,34,,,34,34,34,34,34,34,34,34,,34,34,34,,34,34,,,34,,,,,,',
',,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,,,,,,,,,,,,,,,,,34,34,34,34,',
'34,34,34,34,,,,,34,34,,,,35,35,35,34,35,34,34,34,35,35,,,,35,,35,35',
'35,35,35,35,35,,,,,,35,35,35,35,35,35,35,,,35,,,,,,,35,,,35,35,35,35',
'35,35,35,35,,35,35,35,,35,35,,,35,,,,,,,,,,,,,,,,,,,,35,,,35,,,35,35',
',,35,,,697,,697,697,697,697,697,,,,,,,,,697,,35,35,35,35,,35,35,35,35',
',,,,35,35,,,,35,,697,35,,35,35,35,42,42,42,,42,697,697,,42,42,697,,',
'42,,42,42,42,42,42,42,42,,,,,,42,42,42,42,42,42,42,,,42,,,,,,,42,,,42',
'42,42,42,42,42,42,42,,42,42,42,,42,42,42,42,42,,,,,,,,,,,,,,,,,,,,42',
',,42,,,42,42,,,42,,,,,,42,,,,,,,,,42,,,,,42,42,42,42,,42,42,42,42,,',
',,42,42,,,,43,43,43,42,43,42,42,42,43,43,,,,43,,43,43,43,43,43,43,43',
',,,,,43,43,43,43,43,43,43,,,43,,,,,,,43,,,43,43,43,43,43,43,43,43,,43',
'43,43,,43,43,43,43,43,,,,,,,,,,,,,,,,,,,,43,,,43,,,43,43,,,43,,,,,,43',
',,,,,,,,43,,,,,43,43,43,43,,43,43,43,43,,,,,43,43,,,,44,44,44,43,44',
'43,43,43,44,44,,,,44,,44,44,44,44,44,44,44,,,,,,44,44,44,44,44,44,44',
',,44,,,,,,,44,,,44,44,44,44,44,44,44,44,,44,44,44,,44,44,44,44,44,,',
',,,,,,,,,,,,,,,,,44,,,44,,,44,44,,,44,,,,,,44,,,,,,,,,44,,,,,44,44,44',
'44,,44,44,44,44,,,,,44,44,,,,59,59,59,44,59,44,44,44,59,59,,,,59,,59',
'59,59,59,59,59,59,,,,,,59,59,59,59,59,59,59,,,59,,,,,,,59,,,59,59,59',
'59,59,59,59,59,59,59,59,59,,59,59,59,59,59,,,,,,,,,,,,,,,,,,,,59,,,59',
',,59,59,,,59,,59,,,,59,,,59,,,,,,59,,,,,59,59,59,59,,59,59,59,59,,,',
',59,59,,,,60,60,60,59,60,59,59,59,60,60,,,,60,,60,60,60,60,60,60,60',
',,,,,60,60,60,60,60,60,60,,,60,,,,,,,60,,,60,60,60,60,60,60,60,60,60',
'60,60,60,,60,60,60,60,60,,,,,,,,,,,,,,,,,,,,60,,,60,,,60,60,,,60,,,',
',,60,,,60,,,,,,60,,,,,60,60,60,60,,60,60,60,60,,,,,60,60,,,,63,63,63',
'60,63,60,60,60,63,63,,,,63,,63,63,63,63,63,63,63,,,,,,63,63,63,63,63',
'63,63,,,63,,,,,,,63,,,63,63,63,63,63,63,63,63,,63,63,63,,63,63,63,63',
'63,,,,,,,,,,,,,,,,,,,,63,,,63,,,63,63,,,63,,,,,,63,,,,,,,,,63,,,,,63',
'63,63,63,,63,63,63,63,,,,,63,63,,,,64,64,64,63,64,63,63,63,64,64,,,',
'64,,64,64,64,64,64,64,64,,,,,,64,64,64,64,64,64,64,,,64,,,,,,,64,,,64',
'64,64,64,64,64,64,64,,64,64,64,,64,64,64,64,64,,,,,,,,,,,,,,,,,,,,64',
',,64,,,64,64,,,64,,,,,,64,,,,,,,,,64,,,,,64,64,64,64,,64,64,64,64,,',
',,64,64,,,,67,67,67,64,67,64,64,64,67,67,,,,67,,67,67,67,67,67,67,67',
',,,,,67,67,67,67,67,67,67,,,67,,,,,,,67,,,67,67,67,67,67,67,67,67,,67',
'67,67,,67,67,67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,,,,,,67',
',,,,,,,,67,,,,,67,67,67,67,,67,67,67,67,,,,,67,67,67,,,,,67,67,,67,67',
'67,68,68,68,,68,,,,68,68,,,,68,,68,68,68,68,68,68,68,,,,,,68,68,68,68',
'68,68,68,,,68,,,,,,,68,,,68,68,68,68,68,68,68,68,,68,68,68,,68,68,,',
'68,,,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,,,68,,68,,,,,,,,,,,,,,,,,,68,68',
'68,68,,68,68,68,68,,,,,68,68,,,,69,69,69,68,69,68,68,68,69,69,,,,69',
',69,69,69,69,69,69,69,,,,,,69,69,69,69,69,69,69,,,69,,,,,,,69,,,69,69',
'69,69,69,69,69,69,,69,69,69,,69,69,,,69,,,,,,,,,,,,,,,,,69,,,69,,,69',
',,69,69,,,69,,,,,,,,,,,,,,,,,,,,69,69,69,69,,69,69,69,69,,,,,69,69,',
',,70,70,70,69,70,69,69,69,70,70,,,,70,,70,70,70,70,70,70,70,,,,,,70',
'70,70,70,70,70,70,,,70,,,,,,,70,,,70,70,70,70,70,70,70,70,,70,70,70',
',70,70,,,70,,,,,,,,,,,,,,,,,,,,70,,,70,,,70,70,,,70,,,1012,,1012,1012',
'1012,1012,1012,,,,,,,,,1012,,70,70,70,70,,70,70,70,70,,,,,70,70,,,,',
',1012,70,,70,70,70,111,111,111,111,111,1012,1012,,111,111,1012,,,111',
',111,111,111,111,111,111,111,,,,,,111,111,111,111,111,111,111,,,111',
',,,,,111,111,111,111,111,111,111,111,111,111,111,111,,111,111,111,,111',
'111,111,111,111,,,,,,,,,,,,,,,,,,,,111,,,111,,,111,111,,,111,,111,,',
',111,,,,,,,,,111,,,,,111,111,111,111,,111,111,111,111,,,,,111,111,,',
',,,111,111,,111,111,111,116,116,116,,116,,,,116,116,,,,116,,116,116',
'116,116,116,116,116,,,,,,116,116,116,116,116,116,116,,,116,,,,,,,116',
',,116,116,116,116,116,116,116,116,,116,116,116,,116,116,116,116,116',
',,,,,,,,,,,,,,,,,,,116,,,116,,,116,116,,,116,,,,,,116,,,,,,,,,116,,',
',,116,116,116,116,,116,116,116,116,,,,,116,116,,,,117,117,117,116,117',
'116,116,116,117,117,,,,117,,117,117,117,117,117,117,117,,,,,,117,117',
'117,117,117,117,117,,,117,,,,,,,117,,,117,117,117,117,117,117,117,117',
',117,117,117,,117,117,117,117,117,,,,,,,,,,,,,,,,,,,,117,,,117,,,117',
'117,,,117,,,,,,117,,,,,,,,,117,,,,,117,117,117,117,,117,117,117,117',
',,,,117,117,,,,118,118,118,117,118,117,117,117,118,118,,,,118,,118,118',
'118,118,118,118,118,,,,,,118,118,118,118,118,118,118,,,118,,,,,,,118',
',,118,118,118,118,118,118,118,118,,118,118,118,,118,118,118,118,118',
',,,,,,,,,,,,,,,,,,,118,,,118,,,118,118,,,118,,,,,,118,,,,,,,,,118,,',
',,118,118,118,118,,118,118,118,118,,,,,118,118,,,,119,119,119,118,119',
'118,118,118,119,119,,,,119,,119,119,119,119,119,119,119,,,,,,119,119',
'119,119,119,119,119,,,119,,,,,,,119,,,119,119,119,119,119,119,119,119',
',119,119,119,,119,119,119,119,119,,,,,,,,,,,,,,,,,,,,119,,,119,,,119',
'119,,,119,,,,,,119,,,,,,,,,119,,,,,119,119,119,119,,119,119,119,119',
',,,,119,119,,,,,,,119,,119,119,119,120,120,120,120,120,,,,120,120,,',
',120,,120,120,120,120,120,120,120,,,,,,120,120,120,120,120,120,120,',
',120,,,,,,120,120,,120,120,120,120,120,120,120,120,120,,120,120,120',
',120,120,120,120,120,,,,,,,,,,,,,,,,,,,,120,,,120,,,120,120,,,120,,120',
',,,120,,,,,,,,,120,,,,,120,120,120,120,,120,120,120,120,,,,,120,120',
',,,207,207,207,120,207,120,120,120,207,207,,,,207,,207,207,207,207,207',
'207,207,,,,,,207,207,207,207,207,207,207,,,207,,,,,,,207,,,207,207,207',
'207,207,207,207,207,,207,207,207,,207,207,207,207,207,,,,,,,,,,,,,,',
',,,,,207,,,207,,,207,207,,,207,,207,,,,207,,,,,,,,,207,,,,,207,207,207',
'207,,207,207,207,207,,,,,207,207,,,,208,208,208,207,208,207,207,207',
'208,208,,,,208,,208,208,208,208,208,208,208,,,,,,208,208,208,208,208',
'208,208,,,208,,,,,,,208,,,208,208,208,208,208,208,208,208,,208,208,208',
',208,208,208,208,208,,,,,,,,,,,,,,,,,,,,208,,,208,,,208,208,,,208,,',
',,,208,,,,,,,,,208,,,,,208,208,208,208,,208,208,208,208,,,,,208,208',
',,,209,209,209,208,209,208,208,208,209,209,,,,209,,209,209,209,209,209',
'209,209,,,,,,209,209,209,209,209,209,209,,,209,,,,,,,209,,,209,209,209',
'209,209,209,209,209,209,209,209,209,,209,209,209,209,209,,,,,,,,,,,',
',,,,,,,,209,,,209,,,209,209,,,209,,209,,209,,209,,,209,,,,,,209,,,,',
'209,209,209,209,,209,209,209,209,,,,,209,209,,,,214,214,214,209,214',
'209,209,209,214,214,,,,214,,214,214,214,214,214,214,214,,,,,,214,214',
'214,214,214,214,214,,,214,,,,,,,214,,,214,214,214,214,214,214,214,214',
',214,214,214,,214,214,214,214,214,,,,,,,,,,,,,,,,,,,,214,,,214,,,214',
'214,,,214,,,,,,214,,,,,,,,,214,,,,,214,214,214,214,,214,214,214,214',
',,,,214,214,,,,215,215,215,214,215,214,214,214,215,215,,,,215,,215,215',
'215,215,215,215,215,,,,,,215,215,215,215,215,215,215,,,215,,,,,,,215',
',,215,215,215,215,215,215,215,215,,215,215,215,,215,215,215,215,215',
',,,,,,,,,,,,,,,,,,,215,,,215,,,215,215,,,215,,215,,,,215,,,,,,,,,215',
',,,,215,215,215,215,,215,215,215,215,,,,,215,215,,,,217,217,217,215',
'217,215,215,215,217,217,,,,217,,217,217,217,217,217,217,217,,,,,,217',
'217,217,217,217,217,217,,,217,,,,,,,217,,,217,217,217,217,217,217,217',
'217,,217,217,217,,217,217,217,217,217,,,,,,,,,,,,,,,,,,,,217,,,217,',
',217,217,,,217,,,,,,217,,,,,,,,,217,,,,,217,217,217,217,,217,217,217',
'217,,,,,217,217,,,,218,218,218,217,218,217,217,217,218,218,,,,218,,218',
'218,218,218,218,218,218,,,,,,218,218,218,218,218,218,218,,,218,,,,,',
',218,,,218,218,218,218,218,218,218,218,,218,218,218,,218,218,218,218',
'218,,,,,,,,,,,,,,,,,,,,218,,,218,,,218,218,,,218,,,,,,218,,,,,,,,,218',
',,,,218,218,218,218,,218,218,218,218,,,,,218,218,,,,219,219,219,218',
'219,218,218,218,219,219,,,,219,,219,219,219,219,219,219,219,,,,,,219',
'219,219,219,219,219,219,,,219,,,,,,,219,,,219,219,219,219,219,219,219',
'219,,219,219,219,,219,219,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219,',
',219,219,,,219,,,,,,219,,,,,,,,,219,,,,,219,219,219,219,,219,219,219',
'219,,,,,219,219,219,,,230,230,230,219,230,219,219,219,230,230,,,,230',
',230,230,230,230,230,230,230,,,,,,230,230,230,230,230,230,230,,,230',
',,,,,,230,,,230,230,230,230,230,230,230,230,,230,230,230,,230,230,230',
'230,230,,,,,,,,,,,,,,,,,,,,230,,,230,,,230,230,,,230,,,,,,230,,,,,,',
',,230,,,,,230,230,230,230,,230,230,230,230,,,,,230,230,,,,233,233,233',
'230,233,230,230,230,233,233,,,,233,,233,233,233,233,233,233,233,,,,',
',233,233,233,233,233,233,233,,,233,,,,,,,233,,,233,233,233,233,233,233',
'233,233,,233,233,233,,233,233,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233',
',,233,233,,,233,,,,,,233,,,,,,,,,233,,,,,233,233,233,233,,233,233,233',
'233,,,,,233,233,,,,234,234,234,233,234,233,233,233,234,234,,,,234,,234',
'234,234,234,234,234,234,,,,,,234,234,234,234,234,234,234,,,234,,,,,',
',234,,,234,234,234,234,234,234,234,234,,234,234,234,,234,234,234,234',
'234,,,,,,,,,,,,,,,,,,,,234,,,234,,,234,234,,,234,,,,,,234,,,,,,,,,234',
',,,,234,234,234,234,,234,234,234,234,,,,,234,234,,,,235,235,235,234',
'235,234,234,234,235,235,,,,235,,235,235,235,235,235,235,235,,,,,,235',
'235,235,235,235,235,235,,,235,,,,,,,235,,,235,235,235,235,235,235,235',
'235,,235,235,235,,235,235,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,',
',235,235,,,235,,,,,,235,,,,,,,,,235,,,,,235,235,235,235,,235,235,235',
'235,,,,,235,235,,,,236,236,236,235,236,235,235,235,236,236,,,,236,,236',
'236,236,236,236,236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,',
',236,,,236,236,236,236,236,236,236,236,,236,236,236,,236,236,236,236',
'236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,,236',
',,,,236,236,236,236,,236,236,236,236,,,,,236,236,,,,237,237,237,236',
'237,236,236,236,237,237,,,,237,,237,237,237,237,237,237,237,,,,,,237',
'237,237,237,237,237,237,,,237,,,,,,,237,,,237,237,237,237,237,237,237',
'237,,237,237,237,,237,237,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237,',
',237,237,,,237,,,,,,237,,,,,,,,,237,,,,,237,237,237,237,,237,237,237',
'237,,,,,237,237,,,,238,238,238,237,238,237,237,237,238,238,,,,238,,238',
'238,238,238,238,238,238,,,,,,238,238,238,238,238,238,238,,,238,,,,,',
',238,,,238,238,238,238,238,238,238,238,,238,238,238,,238,238,238,238',
'238,,,,,,,,,,,,,,,,,,,,238,,,238,,,238,238,,,238,,,,,,238,,,,,,,,,238',
',,,,238,238,238,238,,238,238,238,238,,,,,238,238,,,,239,239,239,238',
'239,238,238,238,239,239,,,,239,,239,239,239,239,239,239,239,,,,,,239',
'239,239,239,239,239,239,,,239,,,,,,,239,,,239,239,239,239,239,239,239',
'239,,239,239,239,,239,239,239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239,',
',239,239,,,239,,,,,,239,,,,,,,,,239,,,,,239,239,239,239,,239,239,239',
'239,,,,,239,239,,,,240,240,240,239,240,239,239,239,240,240,,,,240,,240',
'240,240,240,240,240,240,,,,,,240,240,240,240,240,240,240,,,240,,,,,',
',240,,,240,240,240,240,240,240,240,240,,240,240,240,,240,240,240,240',
'240,,,,,,,,,,,,,,,,,,,,240,,,240,,,240,240,,,240,,,,,,240,,,,,,,,,240',
',,,,240,240,240,240,,240,240,240,240,,,,,240,240,,,,241,241,241,240',
'241,240,240,240,241,241,,,,241,,241,241,241,241,241,241,241,,,,,,241',
'241,241,241,241,241,241,,,241,,,,,,,241,,,241,241,241,241,241,241,241',
'241,,241,241,241,,241,241,241,241,241,,,,,,,,,,,,,,,,,,,,241,,,241,',
',241,241,,,241,,,,,,241,,,,,,,,,241,,,,,241,241,241,241,,241,241,241',
'241,,,,,241,241,,,,242,242,242,241,242,241,241,241,242,242,,,,242,,242',
'242,242,242,242,242,242,,,,,,242,242,242,242,242,242,242,,,242,,,,,',
',242,,,242,242,242,242,242,242,242,242,,242,242,242,,242,242,242,242',
'242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,,,,242',
',,,,242,242,242,242,,242,242,242,242,,,,,242,242,,,,243,243,243,242',
'243,242,242,242,243,243,,,,243,,243,243,243,243,243,243,243,,,,,,243',
'243,243,243,243,243,243,,,243,,,,,,,243,,,243,243,243,243,243,243,243',
'243,,243,243,243,,243,243,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,',
',243,243,,,243,,,,,,243,,,,,,,,,243,,,,,243,243,243,243,,243,243,243',
'243,,,,,243,243,,,,244,244,244,243,244,243,243,243,244,244,,,,244,,244',
'244,244,244,244,244,244,,,,,,244,244,244,244,244,244,244,,,244,,,,,',
',244,,,244,244,244,244,244,244,244,244,,244,244,244,,244,244,244,244',
'244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244,,,,,,244,,,,,,,,,244',
',,,,244,244,244,244,,244,244,244,244,,,,,244,244,,,,245,245,245,244',
'245,244,244,244,245,245,,,,245,,245,245,245,245,245,245,245,,,,,,245',
'245,245,245,245,245,245,,,245,,,,,,,245,,,245,245,245,245,245,245,245',
'245,,245,245,245,,245,245,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,',
',245,245,,,245,,,,,,245,,,,,,,,,245,,,,,245,245,245,245,,245,245,245',
'245,,,,,245,245,,,,246,246,246,245,246,245,245,245,246,246,,,,246,,246',
'246,246,246,246,246,246,,,,,,246,246,246,246,246,246,246,,,246,,,,,',
',246,,,246,246,246,246,246,246,246,246,,246,246,246,,246,246,246,246',
'246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,,,,246',
',,,,246,246,246,246,,246,246,246,246,,,,,246,246,,,,247,247,247,246',
'247,246,246,246,247,247,,,,247,,247,247,247,247,247,247,247,,,,,,247',
'247,247,247,247,247,247,,,247,,,,,,,247,,,247,247,247,247,247,247,247',
'247,,247,247,247,,247,247,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247,',
',247,247,,,247,,,,,,247,,,,,,,,,247,,,,,247,247,247,247,,247,247,247',
'247,,,,,247,247,,,,248,248,248,247,248,247,247,247,248,248,,,,248,,248',
'248,248,248,248,248,248,,,,,,248,248,248,248,248,248,248,,,248,,,,,',
',248,,,248,248,248,248,248,248,248,248,,248,248,248,,248,248,248,248',
'248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248,,,248,,,,,,248,,,,,,,,,248',
',,,,248,248,248,248,,248,248,248,248,,,,,248,248,,,,249,249,249,248',
'249,248,248,248,249,249,,,,249,,249,249,249,249,249,249,249,,,,,,249',
'249,249,249,249,249,249,,,249,,,,,,,249,,,249,249,249,249,249,249,249',
'249,,249,249,249,,249,249,249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,',
',249,249,,,249,,,,,,249,,,,,,,,,249,,,,,249,249,249,249,,249,249,249',
'249,,,,,249,249,,,,250,250,250,249,250,249,249,249,250,250,,,,250,,250',
'250,250,250,250,250,250,,,,,,250,250,250,250,250,250,250,,,250,,,,,',
',250,,,250,250,250,250,250,250,250,250,,250,250,250,,250,250,250,250',
'250,,,,,,,,,,,,,,,,,,,,250,,,250,,,250,250,,,250,,,,,,250,,,,,,,,,250',
',,,,250,250,250,250,,250,250,250,250,,,,,250,250,,,,251,251,251,250',
'251,250,250,250,251,251,,,,251,,251,251,251,251,251,251,251,,,,,,251',
'251,251,251,251,251,251,,,251,,,,,,,251,,,251,251,251,251,251,251,251',
'251,,251,251,251,,251,251,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,',
',251,251,,,251,,,,,,251,,,,,,,,,251,,,,,251,251,251,251,,251,251,251',
'251,,,,,251,251,,,,252,252,252,251,252,251,251,251,252,252,,,,252,,252',
'252,252,252,252,252,252,,,,,,252,252,252,252,252,252,252,,,252,,,,,',
',252,,,252,252,252,252,252,252,252,252,,252,252,252,,252,252,252,252',
'252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,,,,252',
',,,,252,252,252,252,,252,252,252,252,,,,,252,252,,,,253,253,253,252',
'253,252,252,252,253,253,,,,253,,253,253,253,253,253,253,253,,,,,,253',
'253,253,253,253,253,253,,,253,,,,,,,253,,,253,253,253,253,253,253,253',
'253,,253,253,253,,253,253,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,',
',253,253,,,253,,,,,,253,,,,,,,,,253,,,,,253,253,253,253,,253,253,253',
'253,,,,,253,253,,,,254,254,254,253,254,253,253,253,254,254,,,,254,,254',
'254,254,254,254,254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,',
',254,,,254,254,254,254,254,254,254,254,,254,254,254,,254,254,254,254',
'254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,,254',
',,,,254,254,254,254,,254,254,254,254,,,,,254,254,,,,255,255,255,254',
'255,254,254,254,255,255,,,,255,,255,255,255,255,255,255,255,,,,,,255',
'255,255,255,255,255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255',
'255,,255,255,255,,255,255,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,',
',255,255,,,255,,,,,,255,,,,,,,,,255,,,,,255,255,255,255,,255,255,255',
'255,,,,,255,255,,,,256,256,256,255,256,255,255,255,256,256,,,,256,,256',
'256,256,256,256,256,256,,,,,,256,256,256,256,256,256,256,,,256,,,,,',
',256,,,256,256,256,256,256,256,256,256,,256,256,256,,256,256,256,256',
'256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256,,,256,,,,,,256,,,,,,,,,256',
',,,,256,256,256,256,,256,256,256,256,,,,,256,256,,,,257,257,257,256',
'257,256,256,256,257,257,,,,257,,257,257,257,257,257,257,257,,,,,,257',
'257,257,257,257,257,257,,,257,,,,,,,257,,,257,257,257,257,257,257,257',
'257,,257,257,257,,257,257,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,',
',257,257,,,257,,,,,,257,,,,,,,,,257,,,,,257,257,257,257,,257,257,257',
'257,,,,,257,257,,,,258,258,258,257,258,257,257,257,258,258,,,,258,,258',
'258,258,258,258,258,258,,,,,,258,258,258,258,258,258,258,,,258,,,,,',
',258,,,258,258,258,258,258,258,258,258,,258,258,258,,258,258,258,258',
'258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258,,,258,,,,,,258,,,,,,,,,258',
',,,,258,258,258,258,,258,258,258,258,,,,,258,258,,,,265,265,265,258',
'265,258,258,258,265,265,,,,265,,265,265,265,265,265,265,265,,,,,,265',
'265,265,265,265,265,265,,,265,,,,,,,265,,,265,265,265,265,265,265,265',
'265,265,265,265,265,,265,265,265,265,265,,,,,,,,,,,,,,,,,,,,265,,,265',
',,265,265,,,265,,265,,265,,265,,,265,,,,,,265,,,,,265,265,265,265,,265',
'265,265,265,,,,,265,265,,,,266,266,266,265,266,265,265,265,266,266,',
',,266,,266,266,266,266,266,266,266,,,,,,266,266,266,266,266,266,266',
',,266,,,,,,,266,,,266,266,266,266,266,266,266,266,266,266,266,266,,266',
'266,266,266,266,,,,,,,,,,,,,,,,,,,,266,,,266,,,266,266,,,266,,266,,266',
',266,,,266,,,,,,266,,,,,266,266,266,266,,266,266,266,266,,,,,266,266',
',,,274,274,274,266,274,266,266,266,274,274,,,,274,,274,274,274,274,274',
'274,274,,,,,,274,274,274,274,274,274,274,,,274,,,,,,,274,,,274,274,274',
'274,274,274,274,274,274,274,274,274,,274,274,274,274,274,,,,,,,,,,,',
',,,,,,,,274,,,274,,,274,274,,,274,,274,,274,,274,,,274,,,,,,274,,,,',
'274,274,274,274,,274,274,274,274,,,,,274,274,274,,,281,281,281,274,281',
'274,274,274,281,281,,,,281,,281,281,281,281,281,281,281,,,,,,281,281',
'281,281,281,281,281,,,281,,,,,,,281,,,281,281,281,281,281,281,281,281',
',281,281,281,,281,281,281,281,281,,,,,,,,,,,,,,,,,,,,281,,,281,,,281',
'281,,,281,,,,,,281,,,,,,,,,281,,,,,281,281,281,281,,281,281,281,281',
',,,,281,281,,,,283,283,283,281,283,281,281,281,283,283,,,,283,,283,283',
'283,283,283,283,283,,,,,,283,283,283,283,283,283,283,,,283,,,,,,,283',
',,283,283,283,283,283,283,283,283,,283,283,283,,283,283,283,283,283',
',,,,,,,,,,,,,,,,,,,283,,,283,,,283,283,,,283,,,,,,283,,,,,,,,,283,,',
',,283,283,283,283,,283,283,283,283,,,,,283,283,,,,286,286,286,283,286',
'283,283,283,286,286,,,,286,,286,286,286,286,286,286,286,,,,,,286,286',
'286,286,286,286,286,,,286,,,,,,,286,,,286,286,286,286,286,286,286,286',
',286,286,286,,286,286,286,286,286,,,,,,,,,,,,,,,,,,,,286,,,286,,,286',
'286,,,286,,,,,,286,,,,,,,,,286,,,,,286,286,286,286,,286,286,286,286',
',,,,286,286,,,,287,287,287,286,287,286,286,286,287,287,,,,287,,287,287',
'287,287,287,287,287,,,,,,287,287,287,287,287,287,287,,,287,,,,,,,287',
',,287,287,287,287,287,287,287,287,,287,287,287,,287,287,287,287,287',
',,,,,,,,,,,,,,,,,,,287,,,287,,,287,287,,,287,,,,,,287,,,,,,,,,287,,',
',,287,287,287,287,,287,287,287,287,,,,,287,287,,,,,,,287,,287,287,287',
'292,292,292,292,292,,,,292,292,,,,292,,292,292,292,292,292,292,292,',
',,,,292,292,292,292,292,292,292,,,292,,,,,,292,292,,292,292,292,292',
'292,292,292,292,292,,292,292,292,,292,292,292,292,292,,,,,,,,,,,,,,',
',,,,,292,,,292,,,292,292,,,292,,292,,,,292,,,,,,,,,292,,,,,292,292,292',
'292,,292,292,292,292,,,,,292,292,,,,300,300,300,292,300,292,292,292',
'300,300,,,,300,,300,300,300,300,300,300,300,,,,,,300,300,300,300,300',
'300,300,,,300,,,,,,,300,,,300,300,300,300,300,300,300,300,,300,300,300',
',300,300,,,300,,,,,,,,,,,,,,,,,,,,300,,,300,,,300,300,,,300,,,970,,970',
'970,970,970,970,,,,,,,,,970,,300,300,300,300,,300,300,300,300,,,,,300',
'300,,,,300,,970,300,,300,300,300,317,317,317,,317,970,970,,317,317,970',
',,317,,317,317,317,317,317,317,317,,,,,,317,317,317,317,317,317,317',
',,317,,,,,,,317,,,317,317,317,317,317,317,317,317,,317,317,317,,317',
'317,,,317,,,,,,,,,,,,,,,,,,,,317,,,317,,,317,317,,,317,,,,,,,,,,,,,',
',,,,,,317,317,317,317,,317,317,317,317,,,,,317,317,,,,325,325,325,317',
'325,317,317,317,325,325,,,,325,,325,325,325,325,325,325,325,,,,,,325',
'325,325,325,325,325,325,,,325,,,,,,,325,,,325,325,325,325,325,325,325',
'325,,325,325,325,,325,325,325,325,325,,,,,,,,,,,,,,,,,,,,325,,,325,325',
',325,325,,,325,,,,,,325,,,,,,,,,325,,,,,325,325,325,325,,325,325,325',
'325,,,,,325,325,,,,327,327,327,325,327,325,325,325,327,327,,,,327,,327',
'327,327,327,327,327,327,,,,,,327,327,327,327,327,327,327,,,327,,,,,',
',327,,,327,327,327,327,327,327,327,327,,327,327,327,,327,327,327,327',
'327,,,,,,,,,,,,,,,,,,,,327,,,327,,,327,327,,,327,,,,,,327,,,,,,,,,327',
',,,,327,327,327,327,,327,327,327,327,,,,,327,327,,,,342,342,342,327',
'342,327,327,327,342,342,,,,342,,342,342,342,342,342,342,342,,,,,,342',
'342,342,342,342,342,342,,,342,,,,,,,342,,,342,342,342,342,342,342,342',
'342,,342,342,342,,342,342,342,342,342,,,,,,,,,,,,,,,,,,,,342,,,342,',
',342,342,,,342,,,,,,342,,,,,,,,,342,,,,,342,342,342,342,,342,342,342',
'342,,,,,342,342,,,,343,343,343,342,343,342,342,342,343,343,,,,343,,343',
'343,343,343,343,343,343,,,,,,343,343,343,343,343,343,343,,,343,,,,,',
',343,,,343,343,343,343,343,343,343,343,,343,343,343,,343,343,343,343',
'343,,,,,,,,,,,,,,,,,,,,343,,,343,,,343,343,,,343,,,,,,343,,,,,,,,,343',
',,,,343,343,343,343,,343,343,343,343,,,,,343,343,,,,362,362,362,343',
'362,343,343,343,362,362,,,,362,,362,362,362,362,362,362,362,,,,,,362',
'362,362,362,362,362,362,,,362,,,,,,,362,,,362,362,362,362,362,362,362',
'362,,362,362,362,,362,362,362,362,362,,,,,,,,,,,,,,,,,,,,362,,,362,',
',362,362,,,362,,,,,,362,,,,,,,,,362,,,,,362,362,362,362,,362,362,362',
'362,,,,,362,362,,,,378,378,378,362,378,362,362,362,378,378,,,,378,,378',
'378,378,378,378,378,378,,,,,,378,378,378,378,378,378,378,,,378,,,,,',
',378,,,378,378,378,378,378,378,378,378,,378,378,378,,378,378,378,378',
'378,,,,,,,,,,,,,,,,,,,,378,,,378,,,378,378,,,378,,,,,,378,,,,,,,,,378',
',,,,378,378,378,378,,378,378,378,378,,,,,378,378,,,,406,406,406,378',
'406,378,378,378,406,406,,,,406,,406,406,406,406,406,406,406,,,,,,406',
'406,406,406,406,406,406,,,406,,,,,,,406,,,406,406,406,406,406,406,406',
'406,,406,406,406,,406,406,406,406,406,,,,,,,,,,,,,,,,,,,,406,,,406,',
',406,406,,,406,,,,,,406,,,,,,,,,406,,,,,406,406,406,406,,406,406,406',
'406,,,,,406,406,,,,444,444,444,406,444,406,406,406,444,444,,,,444,,444',
'444,444,444,444,444,444,,,,,,444,444,444,444,444,444,444,,,444,,,,,',
',444,,,444,444,444,444,444,444,444,444,444,444,444,444,,444,444,444',
'444,444,,,,,,,,,,,,,,,,,,,,444,,,444,,,444,444,,,444,,444,,444,,444',
',,444,,,,,,444,,,,,444,444,444,444,,444,444,444,444,,,,,444,444,,,,446',
'446,446,444,446,444,444,444,446,446,,,,446,,446,446,446,446,446,446',
'446,,,,,,446,446,446,446,446,446,446,,,446,,,,,,,446,,,446,446,446,446',
'446,446,446,446,,446,446,446,,446,446,446,446,446,,,,,,,,,,,,,,,,,,',
',446,,,446,,,446,446,,,446,,,,,,446,,,,,,,,,446,,,,,446,446,446,446',
',446,446,446,446,,,,,446,446,,,,447,447,447,446,447,446,446,446,447',
'447,,,,447,,447,447,447,447,447,447,447,,,,,,447,447,447,447,447,447',
'447,,,447,,,,,,,447,,,447,447,447,447,447,447,447,447,,447,447,447,',
'447,447,447,447,447,,,,,,,,,,,,,,,,,,,,447,,,447,,,447,447,,,447,,,',
',,447,,,,,,,,,447,,,,,447,447,447,447,,447,447,447,447,,,,,447,447,',
',,448,448,448,447,448,447,447,447,448,448,,,,448,,448,448,448,448,448',
'448,448,,,,,,448,448,448,448,448,448,448,,,448,,,,,,,448,,,448,448,448',
'448,448,448,448,448,,448,448,448,,448,448,448,448,448,,,,,,,,,,,,,,',
',,,,,448,,,448,,,448,448,,,448,,,,,,448,,,,,,,,,448,,,,,448,448,448',
'448,,448,448,448,448,,,,,448,448,,,,488,488,488,448,488,448,448,448',
'488,488,,,,488,,488,488,488,488,488,488,488,,,,,,488,488,488,488,488',
'488,488,,,488,,,,,,,488,,,488,488,488,488,488,488,488,488,488,488,488',
'488,,488,488,488,488,488,,,,,,,,,,,,,,,,,,,,488,,,488,,,488,488,,,488',
',488,,488,,488,,,488,,,,,,488,,,,,488,488,488,488,,488,488,488,488,',
',,,488,488,,,,490,490,490,488,490,488,488,488,490,490,,,,490,,490,490',
'490,490,490,490,490,,,,,,490,490,490,490,490,490,490,,,490,,,,,,,490',
',,490,490,490,490,490,490,490,490,490,490,490,490,,490,490,490,490,490',
',,,,,,,,,,,,,,,,,,,490,,,490,,,490,490,,,490,,,,490,,490,,,490,,,,,',
'490,,,,,490,490,490,490,,490,490,490,490,,,,,490,490,,,,492,492,492',
'490,492,490,490,490,492,492,,,,492,,492,492,492,492,492,492,492,,,,',
',492,492,492,492,492,492,492,,,492,,,,,,,492,,,492,492,492,492,492,492',
'492,492,,492,492,492,,492,492,492,492,492,,,,,,,,,,,,,,,,,,,,492,,,492',
',,492,492,,,492,,,,,,492,,,,,,,,,492,,,,,492,492,492,492,,492,492,492',
'492,,,,,492,492,,,,,,,492,,492,492,492,498,498,498,498,498,,,,498,498',
',,,498,,498,498,498,498,498,498,498,,,,,,498,498,498,498,498,498,498',
',,498,,,,,,498,498,498,498,498,498,498,498,498,498,498,498,,498,498',
'498,,498,498,498,498,498,,,,,,,,,,,,,,,,,,,,498,,,498,,,498,498,,,498',
',498,,,,498,,,,,,,,,498,,,,,498,498,498,498,,498,498,498,498,,,,,498',
'498,,,,,,498,498,,498,498,498,506,506,506,,506,,,,506,506,,,,506,,506',
'506,506,506,506,506,506,,,,,,506,506,506,506,506,506,506,,,506,,,,,',
',506,,,506,506,506,506,506,506,506,506,,506,506,506,,506,506,,,506,',
',,,,,,,,,,,,,,,,,,506,,,506,,,506,506,,,506,,,,,,,,,,,,,,,,,,,,506,506',
'506,506,,506,506,506,506,,,,,506,506,,,,508,508,508,506,508,506,506',
'506,508,508,,,,508,,508,508,508,508,508,508,508,,,,,,508,508,508,508',
'508,508,508,,,508,,,,,,,508,,,508,508,508,508,508,508,508,508,508,508',
'508,508,,508,508,508,508,508,,,,,,,,,,,,,,,,,,,,508,,,508,,,508,508',
',,508,,508,,508,,508,,,508,,,,,,508,,,,,508,508,508,508,,508,508,508',
'508,,,,,508,508,,,,514,514,514,508,514,508,508,508,514,514,,,,514,,514',
'514,514,514,514,514,514,,,,,,514,514,514,514,514,514,514,,,514,,,,,',
',514,,,514,514,514,514,514,514,514,514,,514,514,514,,514,514,,,514,',
',,,,,,,,,,,,,,,,,,514,,,514,,,514,514,,,514,,,,,,,,,,,,,,,,,,,,514,514',
'514,514,,514,514,514,514,,,,,514,514,,,,517,517,517,514,517,514,514',
'514,517,517,,,,517,,517,517,517,517,517,517,517,,,,,,517,517,517,517',
'517,517,517,,,517,,,,,,,517,,,517,517,517,517,517,517,517,517,,517,517',
'517,,517,517,517,517,517,,,,,,,,,,,,,,,,,,,,517,,,517,,,517,517,,,517',
',,,,,517,,,,,,,,,517,,,,,517,517,517,517,,517,517,517,517,,,,,517,517',
',,,518,518,518,517,518,517,517,517,518,518,,,,518,,518,518,518,518,518',
'518,518,,,,,,518,518,518,518,518,518,518,,,518,,,,,,,518,,,518,518,518',
'518,518,518,518,518,,518,518,518,,518,518,518,518,518,,,,,,,,,,,,,,',
',,,,,518,,,518,,,518,518,,,518,,,,,,518,,,,,,,,,518,,,,,518,518,518',
'518,,518,518,518,518,,,,,518,518,,,,522,522,522,518,522,518,518,518',
'522,522,,,,522,,522,522,522,522,522,522,522,,,,,,522,522,522,522,522',
'522,522,,,522,,,,,,,522,,,522,522,522,522,522,522,522,522,,522,522,522',
',522,522,522,522,522,,,,,,,,,,,,,,,,,,,,522,,,522,,,522,522,,,522,,',
',,,522,,,,,,,,,522,,,,,522,522,522,522,,522,522,522,522,,,,,522,522',
',,,528,528,528,522,528,522,522,522,528,528,,,,528,,528,528,528,528,528',
'528,528,,,,,,528,528,528,528,528,528,528,,,528,,,,,,,528,,,528,528,528',
'528,528,528,528,528,528,528,528,528,,528,528,528,528,528,,,,,,,,,,,',
',,,,,,,,528,,,528,,,528,528,,,528,,528,,,,528,,,528,,,,,,528,,,,,528',
'528,528,528,,528,528,528,528,,,,,528,528,,,,531,531,531,528,531,528',
'528,528,531,531,,,,531,,531,531,531,531,531,531,531,,,,,,531,531,531',
'531,531,531,531,,,531,,,,,,,531,,,531,531,531,531,531,531,531,531,531',
'531,531,531,,531,531,531,531,531,,,,,,,,,,,,,,,,,,,,531,,,531,,,531',
'531,,,531,,,,,,531,,,531,,,,,,531,,,,,531,531,531,531,,531,531,531,531',
',,,,531,531,,,,556,556,556,531,556,531,531,531,556,556,,,,556,,556,556',
'556,556,556,556,556,,,,,,556,556,556,556,556,556,556,,,556,,,,,,,556',
',,556,556,556,556,556,556,556,556,,556,556,556,,556,556,556,556,556',
',,,,,,,,,,,,,,,,,,,556,,,556,,,556,556,,,556,,,,,,556,,,,,,,,,556,,',
',,556,556,556,556,,556,556,556,556,,,,,556,556,,,,576,576,576,556,576',
'556,556,556,576,576,,,,576,,576,576,576,576,576,576,576,,,,,,576,576',
'576,576,576,576,576,,,576,,,,,,,576,,,576,576,576,576,576,576,576,576',
',576,576,576,,576,576,576,576,576,,,,,,,,,,,,,,,,,,,,576,,,576,,,576',
'576,,,576,,576,,,,576,,,,,,,,,576,,,,,576,576,576,576,,576,576,576,576',
',,,,576,576,,,,577,577,577,576,577,576,576,576,577,577,,,,577,,577,577',
'577,577,577,577,577,,,,,,577,577,577,577,577,577,577,,,577,,,,,,,577',
',,577,577,577,577,577,577,577,577,577,577,577,577,,577,577,577,577,577',
',,,,,,,,,,,,,,,,,,,577,,,577,,,577,577,,,577,,577,,577,,577,,,577,,',
',,,577,,,,,577,577,577,577,,577,577,577,577,,,,,577,577,,,,587,587,587',
'577,587,577,577,577,587,587,,,,587,,587,587,587,587,587,587,587,,,,',
',587,587,587,587,587,587,587,,,587,,,,,,,587,,,587,587,587,587,587,587',
'587,587,587,587,587,587,,587,587,587,587,587,,,,,,,,,,,,,,,,,,,,587',
',,587,,,587,587,,,587,,587,,587,,587,,,587,,,,,,587,,,,,587,587,587',
'587,,587,587,587,587,,,,,587,587,,,,619,619,619,587,619,587,587,587',
'619,619,,,,619,,619,619,619,619,619,619,619,,,,,,619,619,619,619,619',
'619,619,,,619,,,,,,,619,,,619,619,619,619,619,619,619,619,,619,619,619',
',619,619,619,619,619,,,,,,,,,,,,,,,,,,,,619,,,619,,,619,619,,,619,,619',
',,,619,,,,,,,,,619,,,,,619,619,619,619,,619,619,619,619,,,,,619,619',
',,,620,620,620,619,620,619,619,619,620,620,,,,620,,620,620,620,620,620',
'620,620,,,,,,620,620,620,620,620,620,620,,,620,,,,,,,620,,,620,620,620',
'620,620,620,620,620,,620,620,620,,620,620,620,620,620,,,,,,,,,,,,,,',
',,,,,620,,,620,,,620,620,,,620,,,,,,620,,,,,,,,,620,,,,,620,620,620',
'620,,620,620,620,620,,,,,620,620,,,,623,623,623,620,623,620,620,620',
'623,623,,,,623,,623,623,623,623,623,623,623,,,,,,623,623,623,623,623',
'623,623,,,623,,,,,,,623,,,623,623,623,623,623,623,623,623,623,623,623',
'623,,623,623,623,623,623,,,,,,,,,,,,,,,,,,,,623,,,623,,,623,623,,,623',
',623,,623,,623,,,623,,,,,,623,,,,,623,623,623,623,,623,623,623,623,',
',,,623,623,,,,624,624,624,623,624,623,623,623,624,624,,,,624,,624,624',
'624,624,624,624,624,,,,,,624,624,624,624,624,624,624,,,624,,,,,,,624',
',,624,624,624,624,624,624,624,624,624,624,624,624,,624,624,624,624,624',
',,,,,,,,,,,,,,,,,,,624,,,624,,,624,624,,,624,,,,624,,624,,,624,,,,,',
'624,,,,,624,624,624,624,,624,624,624,624,,,,,624,624,,,,625,625,625',
'624,625,624,624,624,625,625,,,,625,,625,625,625,625,625,625,625,,,,',
',625,625,625,625,625,625,625,,,625,,,,,,,625,,,625,625,625,625,625,625',
'625,625,,625,625,625,,625,625,625,625,625,,,,,,,,,,,,,,,,,,,,625,,,625',
',,625,625,,,625,,,,,,625,,,,,,,,,625,,,,,625,625,625,625,,625,625,625',
'625,,,,,625,625,,,,626,626,626,625,626,625,625,625,626,626,,,,626,,626',
'626,626,626,626,626,626,,,,,,626,626,626,626,626,626,626,,,626,,,,,',
',626,,,626,626,626,626,626,626,626,626,,626,626,626,,626,626,626,626',
'626,,,,,,,,,,,,,,,,,,,,626,,,626,,,626,626,,,626,,,,,,626,,,,,,,,,626',
',,,,626,626,626,626,,626,626,626,626,,,,,626,626,,,,630,630,630,626',
'630,626,626,626,630,630,,,,630,,630,630,630,630,630,630,630,,,,,,630',
'630,630,630,630,630,630,,,630,,,,,,,630,,,630,630,630,630,630,630,630',
'630,,630,630,630,,630,630,630,630,630,,,,,,,,,,,,,,,,,,,,630,,,630,',
',630,630,,,630,,,,,,630,,,,,,,,,630,,,,,630,630,630,630,,630,630,630',
'630,,,,,630,630,,,,631,631,631,630,631,630,630,630,631,631,,,,631,,631',
'631,631,631,631,631,631,,,,,,631,631,631,631,631,631,631,,,631,,,,,',
',631,,,631,631,631,631,631,631,631,631,,631,631,631,,631,631,631,631',
'631,,,,,,,,,,,,,,,,,,,,631,,,631,,,631,631,,,631,,,,,,631,,,,,,,,,631',
',,,,631,631,631,631,,631,631,631,631,,,,,631,631,,,,634,634,634,631',
'634,631,631,631,634,634,,,,634,,634,634,634,634,634,634,634,,,,,,634',
'634,634,634,634,634,634,,,634,,,,,,,634,,,634,634,634,634,634,634,634',
'634,,634,634,634,,634,634,634,634,634,,,,,,,,,,,,,,,,,,,,634,,,634,',
',634,634,,,634,,,,,,634,,,,,,,,,634,,,,,634,634,634,634,,634,634,634',
'634,,,,,634,634,,,,635,635,635,634,635,634,634,634,635,635,,,,635,,635',
'635,635,635,635,635,635,,,,,,635,635,635,635,635,635,635,,,635,,,,,',
',635,,,635,635,635,635,635,635,635,635,,635,635,635,,635,635,635,635',
'635,,,,,,,,,,,,,,,,,,,,635,,,635,,,635,635,,,635,,,,,,635,,,,,,,,,635',
',,,,635,635,635,635,,635,635,635,635,,,,,635,635,,,,659,659,659,635',
'659,635,635,635,659,659,,,,659,,659,659,659,659,659,659,659,,,,,,659',
'659,659,659,659,659,659,,,659,,,,,,,659,,,659,659,659,659,659,659,659',
'659,,659,659,659,,659,659,659,659,659,,,,,,,,,,,,,,,,,,,,659,,,659,',
',659,659,,,659,,,,,,659,,,,,,,,,659,,,,,659,659,659,659,,659,659,659',
'659,,,,,659,659,,,,662,662,662,659,662,659,659,659,662,662,,,,662,,662',
'662,662,662,662,662,662,,,,,,662,662,662,662,662,662,662,,,662,,,,,',
',662,,,662,662,662,662,662,662,662,662,,662,662,662,,662,662,662,662',
'662,,,,,,,,,,,,,,,,,,,,662,,,662,,,662,662,,,662,,,,,,662,,,,,,,,,662',
',,,,662,662,662,662,,662,662,662,662,,,,,662,662,,,,666,666,666,662',
'666,662,662,662,666,666,,,,666,,666,666,666,666,666,666,666,,,,,,666',
'666,666,666,666,666,666,,,666,,,,,,,666,,,666,666,666,666,666,666,666',
'666,,666,666,666,,666,666,,,666,,,,,,,,,,,,,,,,,,,,666,,,666,,,666,666',
',,666,,,,,,,,,,,,,,,,,,,,666,666,666,666,,666,666,666,666,,,,,666,666',
',,,677,677,677,666,677,666,666,666,677,677,,,,677,,677,677,677,677,677',
'677,677,,,,,,677,677,677,677,677,677,677,,,677,,,,,,,677,,,677,677,677',
'677,677,677,677,677,,677,677,677,,677,677,,,677,,,,,,,,,,,,,,,,,,,,677',
',,677,,,677,677,,,677,,,,,,,,,,,,,,,,,,,,677,677,677,677,,677,677,677',
'677,,,,,677,677,,,,682,682,682,677,682,677,677,677,682,682,,,,682,,682',
'682,682,682,682,682,682,,,,,,682,682,682,682,682,682,682,,,682,,,,,',
',682,,,682,682,682,682,682,682,682,682,,682,682,682,,682,682,682,682',
'682,,,,,,,,,,,,,,,,,,,,682,,,682,,,682,682,,,682,,682,,,,682,,,,,,,',
',682,,,,,682,682,682,682,,682,682,682,682,,,,,682,682,,,,699,699,699',
'682,699,682,682,682,699,699,,,,699,,699,699,699,699,699,699,699,,,,',
',699,699,699,699,699,699,699,,,699,,,,,,,699,,,699,699,699,699,699,699',
'699,699,,699,699,699,,699,699,699,699,699,,,,,,,,,,,,,,,,,,,,699,,,699',
',,699,699,,,699,,,,,,699,,,,,,,,,699,,,,,699,699,699,699,,699,699,699',
'699,,,,,699,699,,,,725,725,725,699,725,699,699,699,725,725,,,,725,,725',
'725,725,725,725,725,725,,,,,,725,725,725,725,725,725,725,,,725,,,,,',
',725,,,725,725,725,725,725,725,725,725,,725,725,725,,725,725,725,725',
'725,,,,,,,,,,,,,,,,,,,,725,,,725,,,725,725,,,725,,,,,,725,,,,,,,,,725',
',,,,725,725,725,725,,725,725,725,725,,,,,725,725,,,,731,731,731,725',
'731,725,725,725,731,731,,,,731,,731,731,731,731,731,731,731,,,,,,731',
'731,731,731,731,731,731,,,731,,,,,,,731,,,731,731,731,731,731,731,731',
'731,,731,731,731,,731,731,731,731,731,,,,,,,,,,,,,,,,,,,,731,,,731,',
',731,731,,,731,,,,,,731,,,,,,,,,731,,,,,731,731,731,731,,731,731,731',
'731,,,,,731,731,,,,753,753,753,731,753,731,731,731,753,753,,,,753,,753',
'753,753,753,753,753,753,,,,,,753,753,753,753,753,753,753,,,753,,,,,',
',753,,,753,753,753,753,753,753,753,753,,753,753,753,,753,753,753,753',
'753,,,,,,,,,,,,,,,,,,,,753,,,753,,,753,753,,,753,,,,,,753,,,,,,,,,753',
',,,,753,753,753,753,,753,753,753,753,,,,,753,753,,,,755,755,755,753',
'755,753,753,753,755,755,,,,755,,755,755,755,755,755,755,755,,,,,,755',
'755,755,755,755,755,755,,,755,,,,,,,755,,,755,755,755,755,755,755,755',
'755,,755,755,755,,755,755,755,755,755,,,,,,,,,,,,,,,,,,,,755,,,755,',
',755,755,,,755,,,,,,755,,,,,,,,,755,,,,,755,755,755,755,,755,755,755',
'755,,,,,755,755,,,,769,769,769,755,769,755,755,755,769,769,,,,769,,769',
'769,769,769,769,769,769,,,,,,769,769,769,769,769,769,769,,,769,,,,,',
',769,,,769,769,769,769,769,769,769,769,,769,769,769,,769,769,769,769',
'769,,,,,,,,,,,,,,,,,,,,769,,,769,,,769,769,,,769,,,,,,769,,,,,,,,,769',
',,,,769,769,769,769,,769,769,769,769,,,,,769,769,,,,770,770,770,769',
'770,769,769,769,770,770,,,,770,,770,770,770,770,770,770,770,,,,,,770',
'770,770,770,770,770,770,,,770,,,,,,,770,,,770,770,770,770,770,770,770',
'770,,770,770,770,,770,770,770,770,770,,,,,,,,,,,,,,,,,,,,770,,,770,',
',770,770,,,770,,,,,,770,,,,,,,,,770,,,,,770,770,770,770,,770,770,770',
'770,,,,,770,770,,,,771,771,771,770,771,770,770,770,771,771,,,,771,,771',
'771,771,771,771,771,771,,,,,,771,771,771,771,771,771,771,,,771,,,,,',
',771,,,771,771,771,771,771,771,771,771,,771,771,771,,771,771,771,771',
'771,,,,,,,,,,,,,,,,,,,,771,,,771,,,771,771,,,771,,,,,,771,,,,,,,,,771',
',,,,771,771,771,771,,771,771,771,771,,,,,771,771,,,,772,772,772,771',
'772,771,771,771,772,772,,,,772,,772,772,772,772,772,772,772,,,,,,772',
'772,772,772,772,772,772,,,772,,,,,,,772,,,772,772,772,772,772,772,772',
'772,,772,772,772,,772,772,772,772,772,,,,,,,,,,,,,,,,,,,,772,,,772,',
',772,772,,,772,,,,,,772,,,,,,,,,772,,,,,772,772,772,772,,772,772,772',
'772,,,,,772,772,,,,774,774,774,772,774,772,772,772,774,774,,,,774,,774',
'774,774,774,774,774,774,,,,,,774,774,774,774,774,774,774,,,774,,,,,',
',774,,,774,774,774,774,774,774,774,774,,774,774,774,,774,774,774,774',
'774,,,,,,,,,,,,,,,,,,,,774,,,774,,,774,774,,,774,,,,,,774,,,,,,,,,774',
',,,,774,774,774,774,,774,774,774,774,,,,,774,774,,,,786,786,786,774',
'786,774,774,774,786,786,,,,786,,786,786,786,786,786,786,786,,,,,,786',
'786,786,786,786,786,786,,,786,,,,,,,786,,,786,786,786,786,786,786,786',
'786,,786,786,786,,786,786,,,786,,,,,,,,,,,,,,,,,,,,786,,,786,,,786,786',
',,786,,,,,,,,,,,,,,,,,,,,786,786,786,786,,786,786,786,786,,,,,786,786',
',,,836,836,836,786,836,786,786,786,836,836,,,,836,,836,836,836,836,836',
'836,836,,,,,,836,836,836,836,836,836,836,,,836,,,,,,,836,,,836,836,836',
'836,836,836,836,836,,836,836,836,,836,836,836,836,836,,,,,,,,,,,,,,',
',,,,,836,,,836,,,836,836,,,836,,,,,,836,,,,,,,,,836,,,,,836,836,836',
'836,,836,836,836,836,,,,,836,836,,,,841,841,841,836,841,836,836,836',
'841,841,,,,841,,841,841,841,841,841,841,841,,,,,,841,841,841,841,841',
'841,841,,,841,,,,,,,841,,,841,841,841,841,841,841,841,841,,841,841,841',
',841,841,841,841,841,,,,,,,,,,,,,,,,,,,,841,,,841,,,841,841,,,841,,841',
',,,841,,,,,,,,,841,,,,,841,841,841,841,,841,841,841,841,,,,,841,841',
',,,858,858,858,841,858,841,841,841,858,858,,,,858,,858,858,858,858,858',
'858,858,,,,,,858,858,858,858,858,858,858,,,858,,,,,,,858,,,858,858,858',
'858,858,858,858,858,858,858,858,858,,858,858,858,858,858,,,,,,,,,,,',
',,,,,,,,858,,,858,,,858,858,,,858,,,,858,,858,,,858,,,,,,858,,,,,858',
'858,858,858,,858,858,858,858,,,,,858,858,,,,859,859,859,858,859,858',
'858,858,859,859,,,,859,,859,859,859,859,859,859,859,,,,,,859,859,859',
'859,859,859,859,,,859,,,,,,,859,,,859,859,859,859,859,859,859,859,,859',
'859,859,,859,859,859,859,859,,,,,,,,,,,,,,,,,,,,859,,,859,,,859,859',
',,859,,,,,,859,,,,,,,,,859,,,,,859,859,859,859,,859,859,859,859,,,,',
'859,859,,,,873,873,873,859,873,859,859,859,873,873,,,,873,,873,873,873',
'873,873,873,873,,,,,,873,873,873,873,873,873,873,,,873,,,,,,,873,,,873',
'873,873,873,873,873,873,873,,873,873,873,,873,873,,,873,,,,,,,,,,,,',
',,,,,,,873,,,873,,,873,873,,,873,,,,,,,,,,,,,,,,,,,,873,873,873,873',
',873,873,873,873,,,,,873,873,,,,885,885,885,873,885,873,873,873,885',
'885,,,,885,,885,885,885,885,885,885,885,,,,,,885,885,885,885,885,885',
'885,,,885,,,,,,,885,,,885,885,885,885,885,885,885,885,,885,885,885,',
'885,885,,,885,,,,,,,,,,,,,,,,,,,,885,,,885,,,885,885,,,885,,,,,,,,,',
',,,,,,,,,,885,885,885,885,,885,885,885,885,,,,,885,885,,,,982,982,982',
'885,982,885,885,885,982,982,,,,982,,982,982,982,982,982,982,982,,,,',
',982,982,982,982,982,982,982,,,982,,,,,,,982,,,982,982,982,982,982,982',
'982,982,982,982,982,982,,982,982,982,982,982,,,,,,,,,,,,,,,,,,,,982',
',,982,,,982,982,,,982,,982,,982,,982,,,982,,,,,,982,,,,,982,982,982',
'982,,982,982,982,982,,,,,982,982,,,,,,,982,,982,982,982,397,397,397',
'397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397',
'397,397,397,397,,,,397,397,397,397,397,397,397,397,397,397,,,,,,397',
'397,397,397,397,397,397,397,397,,,397,,,,,,,,397,397,,397,397,397,397',
'397,397,397,,,397,397,,,,397,397,397,397,,,,,,,,,,,,,,397,397,,397,397',
'397,397,397,397,397,397,397,397,397,397,,,397,397,,,,,,,,,,,,,,397,9',
'9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,,,,9,9,9,9,9,9,9,9,9,9',
',,,,,9,9,9,9,9,9,9,9,9,,,9,,,,,,,,9,9,,9,9,9,9,9,9,9,,,9,9,,,,9,9,9',
'9,,,,,,,,,,,,,,9,9,,9,9,9,9,9,9,9,9,9,9,9,9,,,9,9,,,,,,,,,,,,,,9,616',
'616,616,616,616,616,616,616,616,616,616,616,616,616,616,616,616,616',
'616,616,616,616,616,616,,,,616,616,616,616,616,616,616,616,616,616,',
',,,,616,616,616,616,616,616,616,616,616,,,616,,,,,,,,616,616,,616,616',
'616,616,616,616,616,,,616,616,,,,616,616,616,616,,,,,,,,,,,,,,616,616',
',616,616,616,616,616,616,616,616,616,616,616,616,,,616,616,,,,,,,,,',
',,,,616,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,,,,8,8,8,8,8',
'8,8,8,8,8,,,,,,8,8,8,8,8,8,8,8,8,8,,8,,,,,,,,8,8,,8,8,8,8,8,8,8,,,8',
'8,,,,8,8,8,8,,,,,,,,,,,,,,8,8,,8,8,8,8,8,8,8,8,8,8,8,8,,,8,8,,,,,,,',
',,,,,,8,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71',
'71,71,71,71,,,,71,71,71,71,71,71,71,71,71,71,,,,,,71,71,71,71,71,71',
'71,71,71,71,71,71,,71,,,,,,71,71,,71,71,71,71,71,71,71,,,71,71,,,,71',
'71,71,71,,,,,,71,,,,,,,,71,71,,71,71,71,71,71,71,71,71,71,71,71,71,',
',71,737,737,737,737,737,737,737,737,737,737,737,737,737,737,737,737',
'737,737,737,737,737,737,737,737,,,,737,737,737,737,737,737,737,737,737',
'737,,,,,,737,737,737,737,737,737,737,737,737,,,737,,,,,,,,737,737,,737',
'737,737,737,737,737,737,,,737,737,,,,737,737,737,737,,,,,,,,,,,,,,737',
'737,,737,737,737,737,737,737,737,737,737,737,737,737,586,586,737,,586',
',,,,,,,586,586,,586,586,586,586,586,586,586,,,586,586,,,,586,586,586',
'586,,,,,,586,,,,,,,,586,586,,586,586,586,586,586,586,586,586,586,586',
'586,586,509,509,586,,509,,,,,,,,509,509,,509,509,509,509,509,509,509',
',,509,509,,,,509,509,509,509,,,,,,509,,,,,,,,509,509,,509,509,509,509',
'509,509,509,509,509,509,509,509,510,510,509,,510,,,,,,,,510,510,,510',
'510,510,510,510,510,510,,,510,510,,,,510,510,510,510,,,,,,510,,,,,,',
',510,510,,510,510,510,510,510,510,510,510,510,510,510,510,519,519,510',
',519,,,,,,,,519,519,,519,519,519,519,519,519,519,,,519,519,,,,519,519',
'519,519,,,,,,519,,,,,,,,519,519,,519,519,519,519,519,519,519,519,519',
'519,519,519,520,520,519,,520,,,,,,,,520,520,,520,520,520,520,520,520',
'520,,,520,520,,,,520,520,520,520,,,,,,520,,,,,,,,520,520,,520,520,520',
'520,520,520,520,520,520,520,520,520,442,442,520,,442,,,,,,,,442,442',
',442,442,442,442,442,442,442,,,442,442,,,,442,442,442,442,,,,,,442,',
',,,,,,442,442,,442,442,442,442,442,442,442,442,442,442,442,442,443,443',
'442,,443,,,,,,,,443,443,,443,443,443,443,443,443,443,,,443,443,,,,443',
'443,443,443,,,,,,443,,,,,,,,443,443,,443,443,443,443,443,443,443,443',
'443,443,443,443,578,578,443,,578,,,,,,,,578,578,,578,578,578,578,578',
'578,578,,,578,578,,,,578,578,578,578,,,,,,578,,,,,,,,578,578,,578,578',
'578,578,578,578,578,578,578,578,578,578,579,579,578,,579,,,,,,,,579',
'579,,579,579,579,579,579,579,579,,,579,579,,,,579,579,579,579,,,,,,579',
',,,,,,,579,579,,579,579,579,579,579,579,579,579,579,579,579,579,585',
'585,579,,585,,,,,,,,585,585,,585,585,585,585,585,585,585,,,585,585,',
',,585,585,585,585,,,,,,585,,,,,,,,585,585,,585,585,585,585,585,585,585',
'585,585,585,585,585,261,261,585,,261,,,,,,,,261,261,,261,261,261,261',
'261,261,261,,,261,261,,,,261,261,261,261,,,,,,,,,,,,,,261,261,,261,261',
'261,261,261,261,261,261,261,261,261,261,937,937,261,,937,,,,,,,,937',
'937,,937,937,937,937,937,937,937,,,937,937,,,,937,937,937,937,,,,,,937',
',,,,,,,937,937,,937,937,937,937,937,937,937,937,937,937,937,937,211',
'211,937,,211,,,,,,,,211,211,,211,211,211,211,211,211,211,,,211,211,',
',,211,211,211,211,,,,,,211,,,,,,,,211,211,,211,211,211,211,211,211,211',
'211,211,211,211,211,210,210,211,,210,,,,,,,,210,210,,210,210,210,210',
'210,210,210,,,210,210,,,,210,210,210,210,,,,,,210,,,,,,,,210,210,,210',
'210,210,210,210,210,210,210,210,210,210,210,983,983,210,,983,,,,,,,',
'983,983,,983,983,983,983,983,983,983,,,983,983,,,,983,983,983,983,,',
',,,983,,,,,,,,983,983,,983,983,983,983,983,983,983,983,983,983,983,983',
'984,984,983,,984,,,,,,,,984,984,,984,984,984,984,984,984,984,,,984,984',
',,,984,984,984,984,,,,,,984,,,,,,,,984,984,,984,984,984,984,984,984',
'984,984,984,984,984,984,,695,984,695,695,695,695,695,,864,,864,864,864',
'864,864,695,,,,,,,,864,,735,,735,735,735,735,735,,,,,,695,,,735,,,,',
'864,695,695,695,695,,,,695,864,864,864,864,,,,864,735,,968,,968,968',
'968,968,968,735,735,735,735,,,,735,968,,972,,972,972,972,972,972,896',
',896,896,896,896,896,,972,,,,,968,,896,,,,,,,968,968,968,968,,,,968',
'972,,,,,,,896,,,,972,972,,,,972,,896,896,,,974,896,974,974,974,974,974',
'894,,894,894,894,894,894,,974,,,,,,693,894,693,693,693,693,693,,,,,',
',,,693,974,,,,,,,894,,,,974,974,,,,974,,894,894,,693,,894,,,,,,,693',
'693,693,693,,,338,693,338,338,338,338,338,,892,,892,892,892,892,892',
'338,,,,,,,,892,,536,,536,536,536,536,536,,,,,,338,338,,536,,,,,892,338',
'338,338,338,,,,338,892,892,892,892,,,,892,536,,736,,736,736,736,736',
'736,536,536,536,536,,,,536,736,,,,,,,,,,,,,,,,,,,,,,736,,,,,,,,,736',
'736,736,736,,,,736' ]
        racc_action_check = arr = ::Array.new(25159, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  2645,   752,   nil,   219,   nil,  6135,  1004,   364, 23498, 23242,
   955,   nil,   922,   978,   757,   500,   876,   -33,   nil,   -79,
  6266,  2365,   889,   nil,   -57,   nil,   165,   746,  1014,  6397,
  6528,  6659,   nil,  1805,  6790,  6921,   nil,   674,   -80,   509,
   681,   351,  7060,  7191,  7322,   593,   580,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  1394,   nil,    67,  7453,
  7584,    -8,   nil,  7715,  7846,   nil,   nil,  7977,  8116,  8247,
  8378, 23626,   nil,   nil,   nil,   nil,   nil,   476,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   220,   nil,   nil,   608,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   338,
   nil,  8517,   nil,   nil,   nil,   nil,  8656,  8787,  8918,  9049,
  9188,  5585,   nil,   -27,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  1092,   nil,  5865,  9319,  9450,  9581,
 24593, 24532,   nil,   nil,  9712,  9843,  5996,  9974, 10105, 10236,
   nil,   nil,   791,   -56,   121,  1014,   172,   929,   987,   nil,
 10367,  2925,   985, 10498, 10629, 10760, 10891, 11022, 11153, 11284,
 11415, 11546, 11677, 11808, 11939, 12070, 12201, 12332, 12463, 12594,
 12725, 12856, 12987, 13118, 13249, 13380, 13511, 13642, 13773,   nil,
   nil, 24410,   nil,   nil,  1036, 13904, 14035,   nil,   nil,   nil,
   nil,   nil,   nil,   nil, 14166,   nil,  2085,   nil,  1003,  1004,
   nil, 14297,  1056, 14428,   nil,   nil, 14559, 14690,   nil,   nil,
   226,   nil, 14829,  1208,  1038,  1011,  2225,  1025,  1067,  1025,
 14960,  2085,   986,   919,   882,  1106,   850,   nil,  1082,  1055,
    10,   nil,   nil,   nil,  1117,   281,  1078, 15099,   nil,   447,
  1148,   790,   nil,  1152,   nil, 15230,  5725, 15361,  1100,   nil,
   507,   496,  1142,  1128,   476,  1165,   nil,   nil, 24990,   411,
     9,    10, 15492, 15623,   145,  1246,  1128,    40,     4,   718,
  1091,     5,    32,   nil,   nil,   846,   982,   140,   nil,   649,
   nil,   -45, 15754,   nil,   nil,   nil,   408,   445,   446,   451,
   485,   512,   514,   582,   623,   nil,   586,   nil, 15885,   nil,
   376,   401,   392,   395,   332,   -37,   175,   240,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   125, 23114,   nil,   nil,
   nil,   nil,   136,   nil,   nil,   138, 16016,   176,   nil,   nil,
  1805,   189,   nil,   197,   201,   338,   498,  1126,   nil,   nil,
   nil,   110,     0,   278,   nil,   nil,  1258,   878,   nil,  3625,
   nil,   237,   nil,   nil,  1665,   nil,   nil,   nil,   nil,    24,
   nil,   327, 24105, 24166, 16147,   165, 16278, 16409, 16540,  4885,
  4745,   627,   665,   365,   367,   388,   394,  5725,  5865,  5996,
  5305,  5445,  1209,  1345,  5165,  4185,  4325,  4605,  5025,  4465,
   703,   795,  4045,  5585,  3345,   -50,  1530,   nil,   nil,   nil,
   nil,   338,   nil,   165,   -59,   342,   nil,   nil, 16671,   nil,
 16802,   nil, 16933,   nil,   363,   nil,   nil,   nil, 17072,  1148,
  4185,   350,   366,   nil,   nil,   399, 17211,   425, 17342, 23861,
 23922,   619,   470,   nil, 17473,   434,   nil, 17604, 17735, 23983,
 24044,  3485, 17866,   612,   616,   602,   540,   nil, 17997,   nil,
   nil, 18128,   nil,   nil,   nil,   nil, 25015,   nil,   525,   528,
   nil,   535,   539,   555,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   546,  1124,   nil,   nil, 18259,   nil,   nil,   nil,
   648,   nil,   nil,   nil,   654,   nil,   nil,   658,  3625,   715,
   nil,  3065,   -14,   146,   716,   725, 18390, 18521, 24227, 24288,
    73,   nil,   nil,  1018,   nil, 24349, 23800, 18652,   nil,   nil,
   248,  2785,   648,   nil,    18,   nil,   nil,   nil,   854,   nil,
   nil,   nil,   625,   nil,   nil,   369,   nil,   390,   nil,   nil,
   613,   nil,   614,   nil,   nil,   nil, 23370,   nil,   616, 18783,
 18914,   485,   663, 19045, 19176, 19307, 19438,   668,   nil,   nil,
 19569, 19700,   685,   nil, 19831, 19962,   nil,   nil,   -85,   310,
   470,   332,   668,  1945,   671,   nil,  1494,   nil,  2505,   783,
   130,   208,   nil,  5165,  5025,   nil,   693,   nil,   745, 20093,
   nil,   nil, 20224,   nil,   724,   -86, 20355,   712,   nil,   726,
   136,   135,   773,   246,   578,   774,   731, 20486,  2225,   799,
   194,   855, 20617,   nil,   740,   nil,   401,   -23,   742,   700,
   nil,   nil,    -5, 24938,   nil, 24777,   nil,  6968,   nil, 20748,
   nil,  1321,   nil,   749,   333,   759,   nil,   nil,   nil,   nil,
   597,   nil,   881,   nil,   nil,   nil,   nil,   893,   nil,    32,
   779,    -5,    41,   178,   248, 20879,   754,   576,   nil,   780,
  4885, 21010,   nil,   922,  4745, 24802, 25054, 23739,   nil,   nil,
   nil,   nil,   nil,   nil,  4465,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   803, 21141,  2505, 21272,   nil,   807,   nil,  2645,
   nil,  2785,   nil,   nil,  2925,   nil,  3065,   nil,  3205, 21403,
 21534, 21665, 21796,   299, 21927,   834,   836,   nil,   837,   840,
   844,   nil,   870,   852,   858,   857, 22058,   nil,   nil,   993,
   nil,   nil,  4325,   893,  1007,   nil,   nil,   nil,   nil,   884,
    68,   nil,   nil,  1010,   nil,  3765,   892,   942,   nil,   nil,
   941,   nil,   nil,  4045,  3905,   943,   901,   nil,   nil,   nil,
   902,   903,   nil,   906,   915,   nil,   916,   nil,   nil,   922,
  1225,   925,   739,   nil,  1051,   nil, 22189,  1053,  3485,  3345,
   nil, 22320,  3205,    72,   247,   nil,  1059,   316,  2365,   nil,
  1067,   947,   314,   nil,   951,   967,   nil,  3765, 22451, 22582,
  3905,   938,   nil,   nil, 24785,   nil,  1549,   nil,  1530,   nil,
   nil,  1004,   723, 22713,  1022,  1063,   nil,  1016,   nil,   nil,
   nil,  1945,   nil,   nil,    79, 22844,   nil,   nil,  1017,  1122,
   nil,   nil, 24998,   nil, 24924,   nil, 24865,   nil,  1189,   nil,
   nil,   nil,   nil,   340,  1251,   -84,   nil,   -10,   nil,  1139,
  1150,   nil,   208,   nil,   nil,   nil,  1214,   nil,   nil,   nil,
  1138,   nil,  1121,   nil,   nil,  1127,   -53,   -32,   150,   nil,
   294,   nil,   375,   nil,   nil,   nil,   228, 24471,   nil,   nil,
   nil,  1665,   120,     6,   481,   496,    69,   nil,   nil,   nil,
   428,   452,   461,   466,   513,   944,   564,  1129,  5445,   nil,
   nil,   nil,   nil,   nil,  4605,   nil,  5305,   nil, 24841,   nil,
 15007,   nil, 24858,   nil, 24917,   nil,   nil,   nil,   871,   681,
   686,   777, 22975, 24654, 24715,    34,  1523,   nil,   nil,   nil,
   nil,  1119,   747,    20,   920,   928,   805,   808,   809,   830,
   nil,   nil,   834,    40,    36,    -1,    26,   972,   976,   nil,
   nil,   nil,  8425,   nil,   nil,   nil,   nil,    33,   nil,   664,
   nil ]

racc_action_default = [
    -3,  -596,    -1,  -582,    -4,  -596,    -7,  -596,  -596,  -596,
  -596,   -29,  -596,  -596,  -596,  -279,  -596,   -40,   -43,  -584,
  -596,   -48,   -50,   -51,   -52,   -56,  -256,  -256,  -256,  -293,
  -328,  -329,   -68,   -11,   -72,   -80,   -82,  -596,  -486,  -487,
  -596,  -596,  -596,  -596,  -596,  -584,  -237,  -270,  -271,  -272,
  -273,  -274,  -275,  -276,  -277,  -278,  -570,  -281,  -283,  -595,
  -560,  -301,  -389,  -596,  -596,  -306,  -309,  -582,  -596,  -596,
  -596,  -596,  -330,  -331,  -427,  -428,  -429,  -430,  -431,  -452,
  -434,  -435,  -454,  -456,  -439,  -444,  -448,  -450,  -466,  -454,
  -468,  -470,  -471,  -472,  -473,  -568,  -475,  -476,  -569,  -478,
  -479,  -480,  -481,  -482,  -483,  -484,  -485,  -490,  -491,  -596,
    -2,  -583,  -591,  -592,  -593,    -6,  -596,  -596,  -596,  -596,
  -596,    -3,   -17,  -596,  -111,  -112,  -113,  -114,  -115,  -116,
  -117,  -118,  -119,  -123,  -124,  -125,  -126,  -127,  -128,  -129,
  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,  -138,  -139,
  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,  -148,  -149,
  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,  -158,  -159,
  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,  -168,  -169,
  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,  -178,  -179,
  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,  -188,  -189,
  -190,  -191,  -192,  -193,   -22,  -120,   -11,  -596,  -596,  -246,
  -596,  -596,  -580,  -581,  -596,  -596,  -596,  -596,  -596,  -584,
  -585,   -47,  -596,  -486,  -487,  -596,  -279,  -596,  -596,  -229,
  -596,   -11,  -596,  -596,  -596,  -596,  -596,  -596,  -596,  -596,
  -596,  -596,  -596,  -596,  -596,  -596,  -596,  -596,  -596,  -596,
  -596,  -596,  -596,  -596,  -596,  -596,  -596,  -596,  -596,  -396,
  -398,  -596,  -578,  -579,   -57,  -246,  -596,  -300,  -402,  -411,
  -413,   -63,  -408,   -64,  -584,   -65,  -238,  -251,  -260,  -260,
  -255,  -596,  -261,  -596,  -452,  -562,  -596,  -596,   -66,   -67,
  -582,   -12,  -596,   -15,  -596,   -70,   -11,  -584,  -596,   -73,
   -76,   -11,   -88,   -89,  -596,  -596,   -96,  -293,  -296,  -584,
  -596,  -328,  -329,  -332,  -409,  -596,   -78,  -596,   -84,  -290,
  -469,  -596,  -214,  -215,  -230,  -596,   -11,  -596,  -584,  -239,
  -588,  -588,  -596,  -596,  -588,  -596,  -302,  -303,  -518,   -49,
  -596,  -596,  -596,  -596,  -582,  -596,  -583,  -486,  -487,  -596,
  -596,  -279,  -596,  -342,  -343,  -106,  -107,  -596,  -109,  -596,
  -279,  -494,  -596,  -486,  -487,  -321,  -111,  -112,  -153,  -154,
  -155,  -171,  -176,  -183,  -186,  -323,  -596,  -558,  -596,  -432,
  -596,  -596,  -596,  -596,  -596,  -596,  -596,  -596,  1021,    -5,
  -594,   -23,   -24,   -25,   -26,   -27,  -596,  -596,   -19,   -20,
   -21,  -121,  -596,   -30,   -39,  -266,  -596,  -596,  -265,   -31,
  -196,  -584,  -247,  -260,  -260,  -571,  -572,  -256,  -406,  -573,
  -574,  -572,  -571,  -256,  -405,  -407,  -573,  -574,   -37,  -204,
   -38,  -596,   -41,   -42,  -194,  -261,   -44,   -45,   -46,  -584,
  -299,  -596,  -596,  -596,  -246,  -290,  -596,  -596,  -596,  -205,
  -206,  -207,  -208,  -209,  -210,  -211,  -212,  -216,  -217,  -218,
  -219,  -220,  -221,  -222,  -223,  -224,  -225,  -226,  -227,  -228,
  -231,  -232,  -233,  -234,  -584,  -378,  -256,  -571,  -572,   -54,
   -58,  -584,  -257,  -378,  -378,  -584,  -295,  -252,  -596,  -253,
  -596,  -258,  -596,  -262,  -596,  -565,  -567,   -10,  -583,   -14,
    -3,  -584,   -69,  -288,   -85,   -74,  -596,  -584,  -246,  -596,
  -596,   -95,  -596,  -469,  -596,   -81,   -86,  -596,  -596,  -596,
  -596,  -235,  -596,  -419,  -596,  -284,  -596,  -240,  -590,  -589,
  -242,  -590,  -291,  -292,  -561,  -390,  -518,  -393,  -557,  -557,
  -501,  -503,  -503,  -503,  -517,  -519,  -520,  -521,  -522,  -523,
  -524,  -525,  -526,  -596,  -528,  -530,  -532,  -537,  -539,  -540,
  -542,  -547,  -549,  -550,  -552,  -553,  -554,  -596,   -11,  -333,
  -334,   -11,  -596,  -596,  -596,  -596,  -596,  -246,  -596,  -596,
  -290,  -314,  -106,  -107,  -108,  -596,  -596,  -246,  -317,  -492,
  -596,   -11,  -496,  -325,  -584,  -433,  -453,  -458,  -596,  -460,
  -436,  -455,  -596,  -457,  -438,  -596,  -441,  -596,  -443,  -446,
  -596,  -447,  -596,  -467,    -8,   -18,  -596,   -28,  -269,  -596,
  -596,  -410,  -596,  -248,  -250,  -596,  -596,   -59,  -245,  -403,
  -596,  -596,   -61,  -404,  -596,  -596,  -298,  -586,  -571,  -572,
  -571,  -572,  -584,  -194,  -596,  -379,  -584,  -381,   -11,   -53,
  -399,  -378,  -243,   -11,   -11,  -294,  -260,  -259,  -263,  -596,
  -563,  -564,  -596,   -13,  -596,   -71,  -596,   -77,   -83,  -584,
  -571,  -572,  -244,  -575,   -94,  -596,   -79,  -596,  -203,  -213,
  -584,  -595,  -595,  -282,  -584,  -287,  -588,  -596,  -584,  -596,
  -499,  -500,  -596,  -596,  -510,  -596,  -513,  -596,  -515,  -596,
  -344,  -596,  -346,  -348,  -355,  -584,  -531,  -541,  -551,  -555,
  -595,  -335,  -595,  -307,  -336,  -337,  -310,  -596,  -313,  -596,
  -584,  -571,  -572,  -575,  -289,  -596,  -106,  -107,  -110,  -584,
   -11,  -596,  -319,  -596,   -11,  -518,  -518,  -596,  -559,  -459,
  -462,  -463,  -464,  -465,   -11,  -437,  -440,  -442,  -445,  -449,
  -451,  -122,  -267,  -596,  -197,  -596,  -587,  -260,   -33,  -199,
   -34,  -200,   -60,   -35,  -202,   -36,  -201,   -62,  -195,  -596,
  -596,  -596,  -596,  -410,  -596,  -557,  -557,  -360,  -362,  -362,
  -362,  -377,  -596,  -584,  -383,  -526,  -534,  -535,  -545,  -596,
  -401,  -400,   -11,  -596,  -596,  -254,  -264,  -566,   -16,   -75,
  -410,   -87,  -297,  -595,  -340,   -11,  -420,  -595,  -421,  -422,
  -596,  -241,  -391,   -11,   -11,  -596,  -557,  -538,  -556,  -502,
  -503,  -503,  -529,  -503,  -503,  -548,  -503,  -526,  -543,  -584,
  -596,  -353,  -596,  -527,  -596,  -338,  -596,  -596,   -11,   -11,
  -312,  -596,   -11,  -410,  -596,  -410,  -596,  -596,   -11,  -322,
  -596,  -584,  -596,  -326,  -596,  -268,   -32,  -198,  -249,  -596,
  -236,  -596,  -358,  -359,  -368,  -370,  -596,  -373,  -596,  -375,
  -380,  -596,  -596,  -596,  -533,  -596,  -397,  -596,  -412,  -414,
    -9,   -11,  -426,  -341,  -596,  -596,  -424,  -285,  -596,  -596,
  -392,  -498,  -596,  -506,  -596,  -508,  -596,  -511,  -596,  -514,
  -516,  -345,  -347,  -351,  -596,  -356,  -304,  -596,  -305,  -596,
  -596,  -263,  -595,  -315,  -318,  -493,  -596,  -324,  -495,  -497,
  -496,  -461,  -557,  -536,  -361,  -362,  -362,  -362,  -362,  -546,
  -362,  -382,  -584,  -385,  -387,  -388,  -544,  -596,  -290,   -55,
  -425,   -11,  -486,  -487,  -596,  -596,  -279,  -423,  -394,  -395,
  -503,  -503,  -503,  -503,  -349,  -596,  -354,  -596,   -11,  -308,
  -311,  -415,  -416,  -417,   -11,  -320,   -11,  -357,  -596,  -365,
  -596,  -367,  -596,  -371,  -596,  -374,  -376,  -384,  -596,  -289,
  -575,  -419,  -246,  -596,  -596,  -290,  -596,  -504,  -507,  -509,
  -512,  -596,  -352,  -595,  -596,  -596,  -362,  -362,  -362,  -362,
  -386,  -418,  -584,  -571,  -572,  -575,  -289,  -503,  -350,  -339,
  -316,  -327,  -596,  -363,  -366,  -369,  -372,  -410,  -505,  -362,
  -364 ]

clist = [
'218,411,329,26,375,260,210,524,26,299,127,127,277,277,277,114,262,2',
'278,278,278,336,575,26,489,681,325,417,423,408,621,261,26,26,26,6,26',
'430,515,537,6,313,313,433,264,271,273,110,330,268,272,320,340,341,527',
'530,344,481,534,130,130,660,657,734,657,111,26,26,713,716,26,122,205',
'127,822,313,313,313,476,114,132,132,544,584,803,316,480,339,339,380',
'834,339,440,115,825,568,571,902,275,288,289,779,660,780,705,391,392',
'393,394,782,933,345,848,929,26,837,905,648,552,26,26,26,26,26,26,653',
'654,279,279,279,361,365,935,605,607,700,591,297,396,592,339,339,339',
'339,737,295,6,486,920,376,821,815,823,781,588,395,6,331,334,489,690',
'691,381,352,337,298,333,783,377,387,502,650,332,932,535,812,338,687',
'616,475,601,603,606,606,483,484,601,961,956,807,884,379,277,651,382',
'660,407,657,657,389,383,1,384,385,407,386,739,744,731,26,26,26,26,427',
'442,929,1000,26,26,26,26,26,26,397,902,404,326,667,354,204,663,817,923',
'418,26,676,642,688,935,992,436,437,438,439,880,822,871,820,277,277,327',
'717,829,684,328,278,221,277,342,417,423,773,838,278,343,839,725,964',
'26,26,730,,733,,,1008,,26,,822,544,,,700,,,831,,800,,512,825,516,792',
'494,26,509,,,26,669,,114,,26,,,313,,526,,728,636,519,,962,552,,,925',
',926,,927,313,513,672,499,,26,26,572,573,268,497,482,672,272,402,843',
'913,578,,485,,26,26,,845,950,505,525,498,,652,822,114,13,655,,,,13,298',
'279,26,339,339,262,720,,,279,1009,665,,,,,729,668,26,,593,,,590,799',
'574,14,13,966,622,,14,672,,862,863,127,501,795,594,672,747,507,747,',
'295,222,811,846,700,295,700,850,,,222,222,222,,14,304,304,996,785,277',
'298,660,,,657,298,,627,851,852,891,,628,632,,403,409,427,633,26,130',
'762,428,432,222,222,767,644,222,349,359,359,615,,433,,,418,,738,13,132',
',,,552,842,552,,13,13,544,544,516,,1001,,954,700,,,516,,277,,,649,,',
',,628,14,26,795,26,808,222,222,222,222,14,14,26,427,313,,552,552,664',
',,,313,427,,,26,,,,916,,,418,,,6,,700,,700,,,418,,967,,680,,,,,,,802',
',786,,,,,277,,,13,,719,,,,,277,26,,700,26,,,,833,,26,427,,,714,714,656',
'427,13,963,26,,,,26,14,222,222,222,,,418,732,222,222,222,222,222,222',
'418,791,,,,,,,,127,,14,1017,,622,,809,686,784,26,26,,,790,26,26,,,26',
',941,,516,,,785,,785,995,,13,622,26,801,13,222,222,26,26,13,,,,958,222',
',810,,130,,784,853,407,552,313,,,,,,751,,14,,13,313,14,,,132,304,14',
',38,,,628,,38,633,,710,622,901,712,,,304,,,,622,,,,844,14,222,694,696',
'698,847,757,,,918,38,302,302,26,,,222,222,26,26,,,26,,127,,,,,,,882',
'26,785,339,886,222,,,,339,,,26,,347,363,363,363,784,,,222,,,786,,,786',
'1002,786,,786,,,789,778,,,,793,794,,,,,,,313,,26,,,,,672,,,38,,,,,26',
',,,38,38,,,26,26,,,,,,,,907,,,,,824,,826,222,,,,,39,26,,26,26,39,,26',
',,,,,26,,,,13,714,13,,915,339,758,760,,919,,763,765,,,432,39,303,303',
',,854,786,,786,313,786,,786,26,,,14,,14,,776,313,,,304,,222,38,,,,,304',
',,348,364,364,364,,222,,977,,,,,,,,786,,38,877,13,,,13,,,,,,816,,983',
'883,,427,,,,,26,888,889,,13,39,,,,335,,,,14,39,39,14,26,,,,277,222,26',
',26,909,910,,,912,,222,,,,14,,,622,38,26,427,,38,,,856,302,38,,,893',
'895,,897,899,928,900,930,,13,418,,,302,13,13,,940,222,222,,,38,222,222',
',,222,,,,951,,952,,953,,,,,,14,,,,,14,14,39,,777,,,,,,,,,304,,,,,,,',
',,,304,,,39,,,,981,,,,,,,,,,,,,,13,,818,993,13,818,,,,994,,,,405,13',
',997,,998,922,999,435,776,,776,,776,222,,,,,14,222,1007,,14,,,987,988',
'989,990,39,,,14,39,,,,303,39,,,,,222,,,1019,,13,,,,,,303,,,865,867,869',
',13,,39,,,16,,,13,13,16,,491,874,493,,,495,496,14,,1018,,,,,,,38,,38',
',14,13,13,,302,13,16,,14,14,,13,302,15,,,,,15,776,,776,,776,,776,,,',
',,222,,14,14,,,14,,,,353,,14,13,,15,306,306,,,,,,,,,,,,,,,776,,,38,818',
'936,38,777,,777,,777,,14,,,,944,351,360,360,16,,,,,38,,,,16,16,,,,,',
',,,,13,618,,,,,,969,971,973,975,,976,,,,,13,,,15,,,13,,13,,,,15,15,',
'14,,,,,,39,,39,,38,,,,303,38,38,14,,,,,303,14,,14,,,302,,,,,,,,,,777',
'302,777,222,777,16,777,,1013,1014,1015,1016,,658,431,335,,661,,,,,,',
',,,,,,16,1020,,,,,,,39,,,39,,,777,15,,,,,,,,658,38,,335,,38,,,39,,,',
',,,38,,15,,,,,,,,,,,706,,,,,,,,,,16,,,,16,,,,,16,435,,,,,,,,,363,,,',
',,38,,39,,,,,39,39,16,,,,38,,15,,,,15,303,38,38,306,15,,,,752,,,303',
'658,335,,,,,,,306,,,,,,38,38,,15,38,,,,,,38,,,,,,,,,,,,796,,,797,,,',
',,,,,,363,,,39,,,,39,38,,806,,942,,,,,39,,,,,,,,,,828,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,364,,,,,,39,,,38,,,,,,,,,,39,,,855,,,,38,39,39,,,,38',
',38,,,,,,,16,,16,,,,,,,,,39,39,,,39,,,,,,39,,,,,,,,,,,,,,,,,,,15,,15',
',,,364,,306,,,,,,39,,306,,943,,,,,,,,,,,911,16,,,16,,,,,,,,,,,,,335',
',,,,,,16,,,,,,,,,,,,,,,,,15,,,15,39,,,,,,,,,,,,,,,,,39,,15,,,431,39',
',39,743,,,,,,,,,,16,,,,,16,16,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,15,,',
',,15,15,,,,,,,,,,,,306,,,,,,,,,,,306,,,,,,,,,,,,,16,,,,16,,,,,,,,,,16',
',,,,,,,,,,,,,,,,,,,,,,,,,15,,,,15,,,,,,,,,,15,,,,,,,,16,,,,,229,,,,',
',,,16,276,276,276,,,,,16,16,,,,,322,323,324,,,,,360,,,,,,15,,,,276,276',
'16,16,,,16,,,15,,,16,,,,,15,15,,,,,,,,,,,,,,,,,,,,,,,,15,15,,16,15,',
',947,,,15,,,,,,,,,,,,,,,,,,,,,,,,,360,,,,,,,,15,,,,946,,,,,,,,,,,,,',
',,16,,,,,,,,,,,,,,,,,16,,,,,,16,,16,,,,,,,,,,,,,,,15,,,276,410,276,',
',,,429,434,,,,,,15,,,,,,15,,15,229,,,449,450,451,452,453,454,455,456',
'457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473',
'474,,,,,,,276,276,,,,,,,,276,,,,,,,276,,276,,,276,276,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,521,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,276,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,276,,429,643,410,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'276,,276,,276,,,,,,,,,,,,,,,,276,,,,,,,,,678,679,,,,,,,,,,276,,,276',
',,,,,,,,,,,,,,,,,,,,,,,,276,,,,,,,,,,,,,,,,,,,,276,276,,,,,,,,,,276',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,276,754,,,276,276,759,761,,,,764,766',
',,643,768,,,,,,,,,,,,,,,,,,,,,,,,276,,,276,,,,,,,,,,,,,,,,,,,,276,,',
',,,,,,,,,,,,,,276,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,276,,857,,,,,,,,,,,,,,759,761,766,764,,860,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,276,,,,,,,,,,,,,,,,,276',
'857,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,276' ]
        racc_goto_table = arr = ::Array.new(2927, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'32,23,68,42,57,139,25,8,42,50,58,58,34,34,34,96,25,2,69,69,69,87,93',
'42,74,10,32,38,38,28,24,37,42,42,42,7,42,28,52,138,7,65,65,18,39,39',
'39,4,69,72,72,64,17,17,70,70,17,23,70,61,61,177,75,97,75,6,42,42,92',
'92,42,15,15,58,168,65,65,65,38,96,62,62,162,55,11,51,40,30,30,150,91',
'30,48,5,173,90,90,115,45,45,45,127,177,128,117,17,17,17,17,130,132,4',
'110,174,42,11,118,41,167,42,42,42,42,42,42,41,41,71,71,71,56,56,133',
'154,154,116,111,47,2,112,30,30,30,30,113,46,7,48,114,98,128,130,128',
'119,95,7,7,71,71,74,122,122,151,94,89,9,86,125,85,151,48,73,67,131,134',
'135,136,137,63,140,155,155,155,155,142,143,155,144,118,145,146,149,34',
'43,152,177,69,75,75,5,153,1,156,157,69,158,159,160,161,42,42,42,42,58',
'25,174,132,42,42,42,42,42,42,31,115,29,99,52,19,16,14,170,171,72,42',
'52,23,138,133,118,30,30,30,30,12,168,130,166,34,34,100,93,117,101,102',
'69,20,34,103,38,38,24,104,69,105,106,107,108,42,42,109,,8,,,118,,42',
',168,162,,,116,,,116,,24,,32,173,50,41,150,42,25,,,42,23,,96,,42,,,65',
',32,,55,48,25,,11,167,,,127,,128,,128,65,64,38,7,,42,42,17,17,72,4,45',
'38,72,9,24,92,25,,45,,42,42,,24,128,51,30,6,,48,168,96,21,48,,,,21,9',
'71,42,30,30,25,23,,,71,91,48,,,,,23,48,42,,37,,,30,52,4,22,21,97,32',
',22,38,,122,122,58,47,74,30,38,155,47,155,,46,22,70,8,116,46,116,8,',
',22,22,22,,22,22,22,128,167,34,9,177,,,75,9,,39,138,138,122,,72,39,',
'20,20,58,72,42,61,40,20,20,22,22,40,32,22,22,22,22,15,,18,,,72,,48,21',
'62,,,,167,90,167,,21,21,162,162,50,,10,,116,116,,,50,,34,,,39,,,,,72',
'22,42,74,42,28,22,22,22,22,22,22,42,58,65,,167,167,2,,,,65,58,,,42,',
',,8,,,72,,,7,,116,,116,,,72,,122,,30,,,,,,,48,,169,,,,,34,,,21,,69,',
',,,34,42,,116,42,,,,48,,42,58,,,96,96,71,58,21,93,42,,,,42,22,22,22',
'22,,,72,96,22,22,22,22,22,22,72,87,,,,,,,,58,,22,24,,32,,68,71,32,42',
'42,,,139,42,42,,,42,,90,,50,,,167,,167,8,,21,32,42,50,21,22,22,42,42',
'21,,,,90,22,,32,,61,,32,57,69,167,65,,,,,,15,,22,,21,65,22,,,62,22,22',
',53,,,72,,53,72,,9,32,48,9,,,22,,,,32,,,,17,22,22,165,165,165,17,71',
',,48,53,53,53,42,,,22,22,42,42,,,42,,58,,,,,,,68,42,167,30,68,22,,,',
'30,,,42,,53,53,53,53,32,,,22,,,169,,,169,23,169,,169,,,9,126,,,,9,9',
',,,,,,65,,42,,,,,38,,,53,,,,,42,,,,53,53,,,42,42,,,,,,,,17,,,,,126,',
'126,22,,,,,54,42,,42,42,54,,42,,,,,,42,,,,21,96,21,,96,30,20,20,,96',
',20,20,,,20,54,54,54,,,9,169,,169,65,169,,169,42,,,22,,22,,121,65,,',
'22,,22,53,,,,,22,,,54,54,54,54,,22,,32,,,,,,,,169,,53,9,21,,,21,,,,',
',121,,25,9,,58,,,,,42,9,9,,21,54,,,,66,,,,22,54,54,22,42,,,,34,22,42',
',42,9,9,,,9,,22,,,,22,,,32,53,42,58,,53,,,20,53,53,,,165,165,,165,165',
'126,165,126,,21,72,,,53,21,21,,9,22,22,,,53,22,22,,,22,,,,126,,126,',
'126,,,,,,22,,,,,22,22,54,,123,,,,,,,,,22,,,,,,,,,,,22,,,54,,,,9,,,,',
',,,,,,,,,21,,123,9,21,123,,,,9,,,,66,21,,126,,126,121,126,66,121,,121',
',121,22,,,,,22,22,126,,22,,,165,165,165,165,54,,,22,54,,,,54,54,,,,',
'22,,,126,,21,,,,,,54,,,124,124,124,,21,,54,,,27,,,21,21,27,,66,22,66',
',,66,66,22,,165,,,,,,,53,,53,,22,21,21,,53,21,27,,22,22,,21,53,26,,',
',,26,121,,121,,121,,121,,,,,,22,,22,22,,,22,,,,27,,22,21,,26,26,26,',
',,,,,,,,,,,,,121,,,53,123,22,53,123,,123,,123,,22,,,,22,26,26,26,27',
',,,,53,,,,27,27,,,,,,,,,,21,66,,,,,,124,124,124,124,,124,,,,,21,,,26',
',,21,,21,,,,26,26,,22,,,,,,54,,54,,53,,,,54,53,53,22,,,,,54,22,,22,',
',53,,,,,,,,,,123,53,123,22,123,27,123,,124,124,124,124,,66,27,66,,66',
',,,,,,,,,,,,27,124,,,,,,,54,,,54,,,123,26,,,,,,,,66,53,,66,,53,,,54',
',,,,,,53,,26,,,,,,,,,,,66,,,,,,,,,,27,,,,27,,,,,27,66,,,,,,,,,53,,,',
',,53,,54,,,,,54,54,27,,,,53,,26,,,,26,54,53,53,26,26,,,,66,,,54,66,66',
',,,,,,26,,,,,,53,53,,26,53,,,,,,53,,,,,,,,,,,,66,,,66,,,,,,,,,,53,,',
'54,,,,54,53,,66,,53,,,,,54,,,,,,,,,,66,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,54,,,,,,54,,,53,,,,,,,,,,54,,,66,,,,53,54,54,,,,53,,53,,,,,,,27,,27',
',,,,,,,,54,54,,,54,,,,,,54,,,,,,,,,,,,,,,,,,,26,,26,,,,54,,26,,,,,,54',
',26,,54,,,,,,,,,,,66,27,,,27,,,,,,,,,,,,,66,,,,,,,27,,,,,,,,,,,,,,,',
',26,,,26,54,,,,,,,,,,,,,,,,,54,,26,,,27,54,,54,26,,,,,,,,,,27,,,,,27',
'27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,26,,,,,26,26,,,,,,,,,,,,26,,,,,',
',,,,,26,,,,,,,,,,,,,27,,,,27,,,,,,,,,,27,,,,,,,,,,,,,,,,,,,,,,,,,,26',
',,,26,,,,,,,,,,26,,,,,,,,27,,,,,33,,,,,,,,27,33,33,33,,,,,27,27,,,,',
'33,33,33,,,,,26,,,,,,26,,,,33,33,27,27,,,27,,,26,,,27,,,,,26,26,,,,',
',,,,,,,,,,,,,,,,,,,26,26,,27,26,,,27,,,26,,,,,,,,,,,,,,,,,,,,,,,,,26',
',,,,,,,26,,,,26,,,,,,,,,,,,,,,,27,,,,,,,,,,,,,,,,,27,,,,,,27,,27,,,',
',,,,,,,,,,,26,,,33,33,33,,,,,33,33,,,,,,26,,,,,,26,,26,33,,,33,33,33',
'33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33',
',,,,,,33,33,,,,,,,,33,,,,,,,33,,33,,,33,33,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,33',
',33,33,33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,33,,33,,,,,,,,',
',,,,,,,33,,,,,,,,,33,33,,,,,,,,,,33,,,33,,,,,,,,,,,,,,,,,,,,,,,,,33',
',,,,,,,,,,,,,,,,,,,33,33,,,,,,,,,,33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'33,33,,,33,33,33,33,,,,33,33,,,33,33,,,,,,,,,,,,,,,,,,,,,,,,33,,,33',
',,,,,,,,,,,,,,,,,,,33,,,,,,,,,,,,,,,,,33,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,33,,33,,,,,,,,,,,,,,33,33,33,33,,33,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,,',
',,,,,,,,,,,33,33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,33' ]
        racc_goto_check = arr = ::Array.new(2927, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   201,    17,   nil,    44,    88,    62,    35,  -319,   132,
  -498,  -597,  -559,   nil,  -268,    63,   220,   -11,  -172,   160,
   236,   357,   389,  -208,  -381,    -8,  1207,  1167,  -178,    18,
    24,   101,   -19,  1944,   -17,   nil,   nil,     7,  -183,    18,
  -178,  -358,     3,  -286,   nil,    69,   112,   104,  -127,   nil,
   -25,    50,  -279,   692,   838,  -274,    61,   -67,     2,   nil,
   nil,    51,    72,  -223,    10,     7,   893,   113,   -57,   -11,
  -276,    98,    23,  -305,  -255,  -426,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    97,   106,   -40,   nil,   102,
  -245,  -620,  -504,  -323,    95,  -207,    12,  -529,    78,   169,
   192,  -272,   196,   193,  -451,   198,  -451,  -315,  -646,  -318,
  -620,  -229,  -236,  -449,  -705,  -733,  -418,  -449,  -716,  -493,
   nil,   245,  -378,   400,   380,  -479,   135,  -545,  -543,   nil,
  -537,  -699,  -762,  -740,  -164,  -512,   114,  -358,  -299,   -17,
   -80,   nil,   -85,   -85,  -725,  -493,  -617,   nil,   nil,   114,
    10,    80,   111,   116,  -250,  -201,   117,   117,   118,  -392,
  -392,  -381,  -256,   nil,   nil,   176,  -446,  -220,  -619,   -91,
  -458,  -629,   nil,  -601,  -753,   nil,   nil,  -429 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   346,   293,   nil,   523,
   nil,   835,   nil,   290,   291,   nil,   nil,   nil,    11,    12,
    18,   228,   321,   nil,   nil,   586,   226,   227,   nil,   nil,
    17,   nil,   441,    21,    22,    23,    24,   nil,   675,   nil,
   nil,   nil,   310,   nil,    25,   412,    32,   nil,   nil,    34,
    37,    36,   nil,   223,   224,   358,   nil,   129,   420,   128,
   131,    75,    76,   nil,    90,    46,   282,   nil,   804,   413,
   nil,   414,   425,   629,   487,   280,   266,    47,    48,    49,
    50,    51,    52,    53,    54,    55,   nil,   267,    61,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   569,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   702,   551,   nil,   703,   924,
   775,   539,   nil,   540,   nil,   nil,   541,   nil,   543,   645,
   nil,   nil,   nil,   549,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   424,   nil,   nil,   nil,   nil,   nil,    74,    77,    78,
   nil,   nil,   nil,   nil,   nil,   596,   nil,   nil,   nil,   nil,
   nil,   nil,   819,   736,   538,   nil,   542,   827,   554,   556,
   557,   787,   560,   561,   788,   564,   567,   285 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 146, :_reduce_none,
  2, 147, :_reduce_2,
  0, 148, :_reduce_3,
  1, 148, :_reduce_4,
  3, 148, :_reduce_5,
  2, 148, :_reduce_6,
  1, 150, :_reduce_none,
  4, 150, :_reduce_8,
  4, 153, :_reduce_9,
  2, 154, :_reduce_10,
  0, 158, :_reduce_11,
  1, 158, :_reduce_12,
  3, 158, :_reduce_13,
  2, 158, :_reduce_14,
  1, 159, :_reduce_none,
  4, 159, :_reduce_16,
  0, 176, :_reduce_17,
  4, 152, :_reduce_18,
  3, 152, :_reduce_19,
  3, 152, :_reduce_20,
  3, 152, :_reduce_21,
  2, 152, :_reduce_22,
  3, 152, :_reduce_23,
  3, 152, :_reduce_24,
  3, 152, :_reduce_25,
  3, 152, :_reduce_26,
  3, 152, :_reduce_27,
  4, 152, :_reduce_28,
  1, 152, :_reduce_none,
  3, 152, :_reduce_30,
  3, 152, :_reduce_31,
  6, 152, :_reduce_32,
  5, 152, :_reduce_33,
  5, 152, :_reduce_34,
  5, 152, :_reduce_35,
  5, 152, :_reduce_36,
  3, 152, :_reduce_37,
  3, 152, :_reduce_38,
  3, 152, :_reduce_39,
  1, 152, :_reduce_none,
  3, 163, :_reduce_41,
  3, 163, :_reduce_42,
  1, 175, :_reduce_none,
  3, 175, :_reduce_44,
  3, 175, :_reduce_45,
  3, 175, :_reduce_46,
  2, 175, :_reduce_47,
  1, 175, :_reduce_none,
  1, 162, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 180, :_reduce_none,
  4, 180, :_reduce_53,
  0, 188, :_reduce_54,
  5, 185, :_reduce_55,
  1, 187, :_reduce_none,
  2, 179, :_reduce_57,
  3, 179, :_reduce_58,
  4, 179, :_reduce_59,
  5, 179, :_reduce_60,
  4, 179, :_reduce_61,
  5, 179, :_reduce_62,
  2, 179, :_reduce_63,
  2, 179, :_reduce_64,
  2, 179, :_reduce_65,
  2, 179, :_reduce_66,
  2, 179, :_reduce_67,
  1, 164, :_reduce_68,
  3, 164, :_reduce_69,
  1, 192, :_reduce_70,
  3, 192, :_reduce_71,
  1, 191, :_reduce_none,
  2, 191, :_reduce_73,
  3, 191, :_reduce_74,
  5, 191, :_reduce_75,
  2, 191, :_reduce_76,
  4, 191, :_reduce_77,
  2, 191, :_reduce_78,
  4, 191, :_reduce_79,
  1, 191, :_reduce_80,
  3, 191, :_reduce_81,
  1, 195, :_reduce_none,
  3, 195, :_reduce_83,
  2, 194, :_reduce_84,
  3, 194, :_reduce_85,
  1, 197, :_reduce_86,
  3, 197, :_reduce_87,
  1, 196, :_reduce_88,
  1, 196, :_reduce_89,
  4, 196, :_reduce_90,
  3, 196, :_reduce_91,
  3, 196, :_reduce_92,
  3, 196, :_reduce_93,
  3, 196, :_reduce_94,
  2, 196, :_reduce_95,
  1, 196, :_reduce_96,
  1, 172, :_reduce_97,
  1, 172, :_reduce_98,
  4, 172, :_reduce_99,
  3, 172, :_reduce_100,
  3, 172, :_reduce_101,
  3, 172, :_reduce_102,
  3, 172, :_reduce_103,
  2, 172, :_reduce_104,
  1, 172, :_reduce_105,
  1, 200, :_reduce_106,
  1, 200, :_reduce_none,
  2, 201, :_reduce_108,
  1, 201, :_reduce_109,
  3, 201, :_reduce_110,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 205, :_reduce_116,
  1, 205, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 161, :_reduce_120,
  0, 208, :_reduce_121,
  4, 161, :_reduce_122,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  3, 178, :_reduce_194,
  5, 178, :_reduce_195,
  3, 178, :_reduce_196,
  5, 178, :_reduce_197,
  6, 178, :_reduce_198,
  5, 178, :_reduce_199,
  5, 178, :_reduce_200,
  5, 178, :_reduce_201,
  5, 178, :_reduce_202,
  4, 178, :_reduce_203,
  3, 178, :_reduce_204,
  3, 178, :_reduce_205,
  3, 178, :_reduce_206,
  3, 178, :_reduce_207,
  3, 178, :_reduce_208,
  3, 178, :_reduce_209,
  3, 178, :_reduce_210,
  3, 178, :_reduce_211,
  3, 178, :_reduce_212,
  4, 178, :_reduce_213,
  2, 178, :_reduce_214,
  2, 178, :_reduce_215,
  3, 178, :_reduce_216,
  3, 178, :_reduce_217,
  3, 178, :_reduce_218,
  3, 178, :_reduce_219,
  3, 178, :_reduce_220,
  3, 178, :_reduce_221,
  3, 178, :_reduce_222,
  3, 178, :_reduce_223,
  3, 178, :_reduce_224,
  3, 178, :_reduce_225,
  3, 178, :_reduce_226,
  3, 178, :_reduce_227,
  3, 178, :_reduce_228,
  2, 178, :_reduce_229,
  2, 178, :_reduce_230,
  3, 178, :_reduce_231,
  3, 178, :_reduce_232,
  3, 178, :_reduce_233,
  3, 178, :_reduce_234,
  3, 178, :_reduce_235,
  6, 178, :_reduce_236,
  1, 178, :_reduce_none,
  1, 211, :_reduce_none,
  1, 212, :_reduce_none,
  2, 212, :_reduce_none,
  4, 212, :_reduce_241,
  2, 212, :_reduce_242,
  3, 217, :_reduce_243,
  0, 218, :_reduce_244,
  1, 218, :_reduce_none,
  0, 168, :_reduce_246,
  1, 168, :_reduce_none,
  2, 168, :_reduce_none,
  4, 168, :_reduce_249,
  2, 168, :_reduce_250,
  1, 190, :_reduce_251,
  2, 190, :_reduce_252,
  2, 190, :_reduce_253,
  4, 190, :_reduce_254,
  1, 190, :_reduce_255,
  0, 221, :_reduce_256,
  2, 184, :_reduce_257,
  2, 220, :_reduce_258,
  2, 219, :_reduce_259,
  0, 219, :_reduce_260,
  1, 214, :_reduce_261,
  2, 214, :_reduce_262,
  3, 214, :_reduce_263,
  4, 214, :_reduce_264,
  1, 174, :_reduce_265,
  1, 174, :_reduce_none,
  3, 173, :_reduce_267,
  4, 173, :_reduce_268,
  2, 173, :_reduce_269,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_280,
  0, 244, :_reduce_281,
  4, 210, :_reduce_282,
  0, 245, :_reduce_283,
  0, 246, :_reduce_284,
  6, 210, :_reduce_285,
  0, 247, :_reduce_286,
  4, 210, :_reduce_287,
  3, 210, :_reduce_288,
  3, 210, :_reduce_289,
  2, 210, :_reduce_290,
  3, 210, :_reduce_291,
  3, 210, :_reduce_292,
  1, 210, :_reduce_293,
  4, 210, :_reduce_294,
  3, 210, :_reduce_295,
  1, 210, :_reduce_296,
  5, 210, :_reduce_297,
  4, 210, :_reduce_298,
  3, 210, :_reduce_299,
  2, 210, :_reduce_300,
  1, 210, :_reduce_none,
  2, 210, :_reduce_302,
  2, 210, :_reduce_303,
  6, 210, :_reduce_304,
  6, 210, :_reduce_305,
  0, 248, :_reduce_306,
  0, 249, :_reduce_307,
  7, 210, :_reduce_308,
  0, 250, :_reduce_309,
  0, 251, :_reduce_310,
  7, 210, :_reduce_311,
  5, 210, :_reduce_312,
  4, 210, :_reduce_313,
  0, 252, :_reduce_314,
  0, 253, :_reduce_315,
  9, 210, :_reduce_316,
  0, 254, :_reduce_317,
  6, 210, :_reduce_318,
  0, 255, :_reduce_319,
  7, 210, :_reduce_320,
  0, 256, :_reduce_321,
  5, 210, :_reduce_322,
  0, 257, :_reduce_323,
  6, 210, :_reduce_324,
  0, 258, :_reduce_325,
  0, 259, :_reduce_326,
  9, 210, :_reduce_327,
  1, 210, :_reduce_328,
  1, 210, :_reduce_329,
  1, 210, :_reduce_330,
  1, 210, :_reduce_331,
  1, 167, :_reduce_none,
  1, 235, :_reduce_none,
  1, 235, :_reduce_none,
  2, 235, :_reduce_335,
  1, 237, :_reduce_none,
  1, 237, :_reduce_none,
  1, 236, :_reduce_none,
  5, 236, :_reduce_339,
  1, 156, :_reduce_none,
  2, 156, :_reduce_341,
  1, 239, :_reduce_none,
  1, 239, :_reduce_none,
  1, 260, :_reduce_344,
  3, 260, :_reduce_345,
  1, 263, :_reduce_346,
  3, 263, :_reduce_347,
  1, 262, :_reduce_none,
  4, 262, :_reduce_349,
  6, 262, :_reduce_350,
  3, 262, :_reduce_351,
  5, 262, :_reduce_352,
  2, 262, :_reduce_353,
  4, 262, :_reduce_354,
  1, 262, :_reduce_355,
  3, 262, :_reduce_356,
  4, 264, :_reduce_357,
  2, 264, :_reduce_358,
  2, 264, :_reduce_359,
  1, 264, :_reduce_360,
  2, 269, :_reduce_361,
  0, 269, :_reduce_362,
  6, 270, :_reduce_363,
  8, 270, :_reduce_364,
  4, 270, :_reduce_365,
  6, 270, :_reduce_366,
  4, 270, :_reduce_367,
  2, 270, :_reduce_none,
  6, 270, :_reduce_369,
  2, 270, :_reduce_370,
  4, 270, :_reduce_371,
  6, 270, :_reduce_372,
  2, 270, :_reduce_373,
  4, 270, :_reduce_374,
  2, 270, :_reduce_375,
  4, 270, :_reduce_376,
  1, 270, :_reduce_none,
  0, 186, :_reduce_378,
  1, 186, :_reduce_379,
  3, 274, :_reduce_380,
  1, 274, :_reduce_381,
  4, 274, :_reduce_382,
  1, 275, :_reduce_383,
  4, 275, :_reduce_384,
  1, 276, :_reduce_385,
  3, 276, :_reduce_386,
  1, 277, :_reduce_387,
  1, 277, :_reduce_none,
  0, 281, :_reduce_389,
  0, 282, :_reduce_390,
  4, 234, :_reduce_391,
  4, 279, :_reduce_392,
  1, 279, :_reduce_393,
  3, 280, :_reduce_394,
  3, 280, :_reduce_395,
  0, 285, :_reduce_396,
  5, 284, :_reduce_397,
  2, 181, :_reduce_398,
  4, 181, :_reduce_399,
  5, 181, :_reduce_400,
  5, 181, :_reduce_401,
  2, 233, :_reduce_402,
  4, 233, :_reduce_403,
  4, 233, :_reduce_404,
  3, 233, :_reduce_405,
  3, 233, :_reduce_406,
  3, 233, :_reduce_407,
  2, 233, :_reduce_408,
  1, 233, :_reduce_409,
  4, 233, :_reduce_410,
  0, 287, :_reduce_411,
  5, 232, :_reduce_412,
  0, 288, :_reduce_413,
  5, 232, :_reduce_414,
  5, 238, :_reduce_415,
  1, 289, :_reduce_416,
  1, 289, :_reduce_none,
  6, 155, :_reduce_418,
  0, 155, :_reduce_419,
  1, 290, :_reduce_420,
  1, 290, :_reduce_none,
  1, 290, :_reduce_none,
  2, 291, :_reduce_423,
  1, 291, :_reduce_none,
  2, 157, :_reduce_425,
  1, 157, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 223, :_reduce_430,
  1, 293, :_reduce_431,
  2, 293, :_reduce_432,
  3, 294, :_reduce_433,
  1, 294, :_reduce_434,
  1, 294, :_reduce_435,
  3, 224, :_reduce_436,
  4, 225, :_reduce_437,
  3, 226, :_reduce_438,
  0, 298, :_reduce_439,
  3, 298, :_reduce_440,
  1, 299, :_reduce_441,
  2, 299, :_reduce_442,
  3, 228, :_reduce_443,
  0, 301, :_reduce_444,
  3, 301, :_reduce_445,
  3, 227, :_reduce_446,
  3, 229, :_reduce_447,
  0, 302, :_reduce_448,
  3, 302, :_reduce_449,
  0, 303, :_reduce_450,
  3, 303, :_reduce_451,
  0, 295, :_reduce_452,
  2, 295, :_reduce_453,
  0, 296, :_reduce_454,
  2, 296, :_reduce_455,
  0, 297, :_reduce_456,
  2, 297, :_reduce_457,
  1, 300, :_reduce_458,
  2, 300, :_reduce_459,
  0, 305, :_reduce_460,
  4, 300, :_reduce_461,
  1, 304, :_reduce_462,
  1, 304, :_reduce_463,
  1, 304, :_reduce_464,
  1, 304, :_reduce_none,
  1, 206, :_reduce_466,
  3, 207, :_reduce_467,
  1, 292, :_reduce_468,
  2, 292, :_reduce_469,
  1, 209, :_reduce_470,
  1, 209, :_reduce_471,
  1, 209, :_reduce_472,
  1, 209, :_reduce_473,
  1, 198, :_reduce_474,
  1, 198, :_reduce_475,
  1, 198, :_reduce_476,
  1, 198, :_reduce_477,
  1, 198, :_reduce_478,
  1, 199, :_reduce_479,
  1, 199, :_reduce_480,
  1, 199, :_reduce_481,
  1, 199, :_reduce_482,
  1, 199, :_reduce_483,
  1, 199, :_reduce_484,
  1, 199, :_reduce_485,
  1, 230, :_reduce_486,
  1, 230, :_reduce_487,
  1, 166, :_reduce_488,
  1, 166, :_reduce_489,
  1, 171, :_reduce_490,
  1, 171, :_reduce_491,
  0, 306, :_reduce_492,
  4, 240, :_reduce_493,
  0, 240, :_reduce_494,
  3, 242, :_reduce_495,
  0, 308, :_reduce_496,
  3, 242, :_reduce_497,
  4, 307, :_reduce_498,
  2, 307, :_reduce_499,
  2, 307, :_reduce_500,
  1, 307, :_reduce_501,
  2, 310, :_reduce_502,
  0, 310, :_reduce_503,
  6, 283, :_reduce_504,
  8, 283, :_reduce_505,
  4, 283, :_reduce_506,
  6, 283, :_reduce_507,
  4, 283, :_reduce_508,
  6, 283, :_reduce_509,
  2, 283, :_reduce_510,
  4, 283, :_reduce_511,
  6, 283, :_reduce_512,
  2, 283, :_reduce_513,
  4, 283, :_reduce_514,
  2, 283, :_reduce_515,
  4, 283, :_reduce_516,
  1, 283, :_reduce_517,
  0, 283, :_reduce_518,
  1, 278, :_reduce_519,
  1, 278, :_reduce_520,
  1, 278, :_reduce_521,
  1, 278, :_reduce_522,
  1, 261, :_reduce_none,
  1, 261, :_reduce_524,
  1, 312, :_reduce_525,
  1, 313, :_reduce_526,
  3, 313, :_reduce_527,
  1, 271, :_reduce_528,
  3, 271, :_reduce_529,
  1, 314, :_reduce_530,
  2, 315, :_reduce_531,
  1, 315, :_reduce_532,
  2, 316, :_reduce_533,
  1, 316, :_reduce_534,
  1, 265, :_reduce_535,
  3, 265, :_reduce_536,
  1, 309, :_reduce_537,
  3, 309, :_reduce_538,
  1, 317, :_reduce_none,
  1, 317, :_reduce_none,
  2, 266, :_reduce_541,
  1, 266, :_reduce_542,
  3, 318, :_reduce_543,
  3, 319, :_reduce_544,
  1, 272, :_reduce_545,
  3, 272, :_reduce_546,
  1, 311, :_reduce_547,
  3, 311, :_reduce_548,
  1, 320, :_reduce_none,
  1, 320, :_reduce_none,
  2, 273, :_reduce_551,
  1, 273, :_reduce_552,
  1, 321, :_reduce_none,
  1, 321, :_reduce_none,
  2, 268, :_reduce_555,
  2, 267, :_reduce_556,
  0, 267, :_reduce_557,
  1, 243, :_reduce_none,
  3, 243, :_reduce_559,
  0, 231, :_reduce_560,
  2, 231, :_reduce_none,
  1, 216, :_reduce_562,
  3, 216, :_reduce_563,
  3, 322, :_reduce_564,
  2, 322, :_reduce_565,
  4, 322, :_reduce_566,
  2, 322, :_reduce_567,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 286, :_reduce_none,
  1, 286, :_reduce_none,
  1, 286, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 170, :_reduce_580,
  1, 170, :_reduce_581,
  0, 149, :_reduce_none,
  1, 149, :_reduce_none,
  0, 177, :_reduce_none,
  1, 177, :_reduce_none,
  2, 193, :_reduce_586,
  2, 169, :_reduce_587,
  0, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 241, :_reduce_591,
  1, 241, :_reduce_none,
  1, 151, :_reduce_none,
  2, 151, :_reduce_none,
  0, 213, :_reduce_595 ]

racc_reduce_n = 596

racc_shift_n = 1021

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUMINUS_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tDSTAR => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tREGEXP_OPT => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSYMBOLS_BEG => 122,
  :tQSYMBOLS_BEG => 123,
  :tSTRING_DBEG => 124,
  :tSTRING_DVAR => 125,
  :tSTRING_END => 126,
  :tSTRING_DEND => 127,
  :tSTRING => 128,
  :tSYMBOL => 129,
  :tNL => 130,
  :tEH => 131,
  :tCOLON => 132,
  :tCOMMA => 133,
  :tSPACE => 134,
  :tSEMI => 135,
  :tLAMBDA => 136,
  :tLAMBEG => 137,
  :tCHARACTER => 138,
  :tRATIONAL => 139,
  :tIMAGINARY => 140,
  :tLABEL_END => 141,
  :tANDDOT => 142,
  :tEQL => 143,
  :tLOWEST => 144 }

racc_nt_base = 145

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tDSTAR",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING_DEND",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tANDDOT",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@1",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@2",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@3",
  "simple_numeric",
  "primary",
  "arg_value",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@4",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@5",
  "@6",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@21",
  "@22",
  "f_args",
  "do_block",
  "@23",
  "operation3",
  "@24",
  "@25",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@26",
  "@27",
  "args_tail",
  "@28",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'ruby23.y', 52)
  def _reduce_2(val, _values, result)
                          result = @builder.compstmt(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 57)
  def _reduce_3(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 61)
  def _reduce_4(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 65)
  def _reduce_5(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 69)
  def _reduce_6(val, _values, result)
                          result = [ val[1] ]
                    
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'ruby23.y', 75)
  def _reduce_8(val, _values, result)
                          result = @builder.preexe(val[0], val[1], val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 80)
  def _reduce_9(val, _values, result)
                          rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_.nil?
                        diagnostic :warning, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 96)
  def _reduce_10(val, _values, result)
                          result = @builder.compstmt(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 101)
  def _reduce_11(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 105)
  def _reduce_12(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 109)
  def _reduce_13(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 113)
  def _reduce_14(val, _values, result)
                          result = [ val[1] ]
                    
    result
  end
.,.,

# reduce 15 omitted

module_eval(<<'.,.,', 'ruby23.y', 119)
  def _reduce_16(val, _values, result)
                          diagnostic :error, :begin_in_method, nil, val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 124)
  def _reduce_17(val, _values, result)
                          @lexer.state = :expr_fname
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 128)
  def _reduce_18(val, _values, result)
                          result = @builder.alias(val[0], val[1], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 132)
  def _reduce_19(val, _values, result)
                          result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 138)
  def _reduce_20(val, _values, result)
                          result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 144)
  def _reduce_21(val, _values, result)
                          diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 148)
  def _reduce_22(val, _values, result)
                          result = @builder.undef_method(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 152)
  def _reduce_23(val, _values, result)
                          result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 157)
  def _reduce_24(val, _values, result)
                          result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 162)
  def _reduce_25(val, _values, result)
                          result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 166)
  def _reduce_26(val, _values, result)
                          result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 170)
  def _reduce_27(val, _values, result)
                          rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 178)
  def _reduce_28(val, _values, result)
                          result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
  end
.,.,

# reduce 29 omitted

module_eval(<<'.,.,', 'ruby23.y', 183)
  def _reduce_30(val, _values, result)
                          result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 187)
  def _reduce_31(val, _values, result)
                          result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 191)
  def _reduce_32(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 198)
  def _reduce_33(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 205)
  def _reduce_34(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 212)
  def _reduce_35(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 219)
  def _reduce_36(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 226)
  def _reduce_37(val, _values, result)
                          @builder.op_assign(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 230)
  def _reduce_38(val, _values, result)
                          result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 235)
  def _reduce_39(val, _values, result)
                          result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
  end
.,.,

# reduce 40 omitted

module_eval(<<'.,.,', 'ruby23.y', 241)
  def _reduce_41(val, _values, result)
                          result = @builder.assign(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 245)
  def _reduce_42(val, _values, result)
                          result = @builder.assign(val[0], val[1], val[2])
                    
    result
  end
.,.,

# reduce 43 omitted

module_eval(<<'.,.,', 'ruby23.y', 251)
  def _reduce_44(val, _values, result)
                          result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 255)
  def _reduce_45(val, _values, result)
                          result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 259)
  def _reduce_46(val, _values, result)
                          result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 263)
  def _reduce_47(val, _values, result)
                          result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
  end
.,.,

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

module_eval(<<'.,.,', 'ruby23.y', 275)
  def _reduce_53(val, _values, result)
                          result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 281)
  def _reduce_54(val, _values, result)
                          @static_env.extend_dynamic
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 285)
  def _reduce_55(val, _values, result)
                          result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
  end
.,.,

# reduce 56 omitted

module_eval(<<'.,.,', 'ruby23.y', 294)
  def _reduce_57(val, _values, result)
                          result = @builder.call_method(nil, nil, val[0],
                                  nil, val[1], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 299)
  def _reduce_58(val, _values, result)
                          method_call = @builder.call_method(nil, nil, val[0],
                                        nil, val[1], nil)

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 308)
  def _reduce_59(val, _values, result)
                          result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 313)
  def _reduce_60(val, _values, result)
                          method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 322)
  def _reduce_61(val, _values, result)
                          result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 327)
  def _reduce_62(val, _values, result)
                          method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 336)
  def _reduce_63(val, _values, result)
                          result = @builder.keyword_cmd(:super, val[0],
                                  nil, val[1], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 341)
  def _reduce_64(val, _values, result)
                          result = @builder.keyword_cmd(:yield, val[0],
                                  nil, val[1], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 346)
  def _reduce_65(val, _values, result)
                          result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 351)
  def _reduce_66(val, _values, result)
                          result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 356)
  def _reduce_67(val, _values, result)
                          result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 362)
  def _reduce_68(val, _values, result)
                          result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 366)
  def _reduce_69(val, _values, result)
                          result = @builder.begin(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 371)
  def _reduce_70(val, _values, result)
                          result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 375)
  def _reduce_71(val, _values, result)
                          result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
  end
.,.,

# reduce 72 omitted

module_eval(<<'.,.,', 'ruby23.y', 381)
  def _reduce_73(val, _values, result)
                          result = val[0].
                                  push(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 386)
  def _reduce_74(val, _values, result)
                          result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 391)
  def _reduce_75(val, _values, result)
                          result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 397)
  def _reduce_76(val, _values, result)
                          result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 402)
  def _reduce_77(val, _values, result)
                          result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 408)
  def _reduce_78(val, _values, result)
                          result = [ @builder.splat(val[0], val[1]) ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 412)
  def _reduce_79(val, _values, result)
                          result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 417)
  def _reduce_80(val, _values, result)
                          result = [ @builder.splat(val[0]) ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 421)
  def _reduce_81(val, _values, result)
                          result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
  end
.,.,

# reduce 82 omitted

module_eval(<<'.,.,', 'ruby23.y', 428)
  def _reduce_83(val, _values, result)
                          result = @builder.begin(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 433)
  def _reduce_84(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 437)
  def _reduce_85(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 442)
  def _reduce_86(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 446)
  def _reduce_87(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 451)
  def _reduce_88(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 455)
  def _reduce_89(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 459)
  def _reduce_90(val, _values, result)
                          result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 463)
  def _reduce_91(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 467)
  def _reduce_92(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 471)
  def _reduce_93(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 475)
  def _reduce_94(val, _values, result)
                          result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 480)
  def _reduce_95(val, _values, result)
                          result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 485)
  def _reduce_96(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 490)
  def _reduce_97(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 494)
  def _reduce_98(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 498)
  def _reduce_99(val, _values, result)
                          result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 502)
  def _reduce_100(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 506)
  def _reduce_101(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 510)
  def _reduce_102(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 514)
  def _reduce_103(val, _values, result)
                          result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 519)
  def _reduce_104(val, _values, result)
                          result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 524)
  def _reduce_105(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 529)
  def _reduce_106(val, _values, result)
                          diagnostic :error, :module_name_const, nil, val[0]
                    
    result
  end
.,.,

# reduce 107 omitted

module_eval(<<'.,.,', 'ruby23.y', 535)
  def _reduce_108(val, _values, result)
                          result = @builder.const_global(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 539)
  def _reduce_109(val, _values, result)
                          result = @builder.const(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 543)
  def _reduce_110(val, _values, result)
                          result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
  end
.,.,

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

module_eval(<<'.,.,', 'ruby23.y', 552)
  def _reduce_116(val, _values, result)
                          result = @builder.symbol(val[0])
                    
    result
  end
.,.,

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

module_eval(<<'.,.,', 'ruby23.y', 561)
  def _reduce_120(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 565)
  def _reduce_121(val, _values, result)
                          @lexer.state = :expr_fname
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 569)
  def _reduce_122(val, _values, result)
                          result = val[0] << val[3]
                    
    result
  end
.,.,

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

module_eval(<<'.,.,', 'ruby23.y', 590)
  def _reduce_194(val, _values, result)
                          result = @builder.assign(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 594)
  def _reduce_195(val, _values, result)
                          rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result  = @builder.assign(val[0], val[1], rescue_)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 604)
  def _reduce_196(val, _values, result)
                          result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 608)
  def _reduce_197(val, _values, result)
                          rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result = @builder.op_assign(val[0], val[1], rescue_)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 618)
  def _reduce_198(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 625)
  def _reduce_199(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 632)
  def _reduce_200(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 639)
  def _reduce_201(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 646)
  def _reduce_202(val, _values, result)
                          const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 652)
  def _reduce_203(val, _values, result)
                          const  = @builder.const_op_assignable(
                                  @builder.const_global(val[0], val[1]))
                      result = @builder.op_assign(const, val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 658)
  def _reduce_204(val, _values, result)
                          result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 662)
  def _reduce_205(val, _values, result)
                          result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 666)
  def _reduce_206(val, _values, result)
                          result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 670)
  def _reduce_207(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 674)
  def _reduce_208(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 678)
  def _reduce_209(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 682)
  def _reduce_210(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 686)
  def _reduce_211(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 690)
  def _reduce_212(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 694)
  def _reduce_213(val, _values, result)
                          result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    val[1], val[2], val[3]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 700)
  def _reduce_214(val, _values, result)
                          result = @builder.unary_op(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 704)
  def _reduce_215(val, _values, result)
                          result = @builder.unary_op(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 708)
  def _reduce_216(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 712)
  def _reduce_217(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 716)
  def _reduce_218(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 720)
  def _reduce_219(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 724)
  def _reduce_220(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 728)
  def _reduce_221(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 732)
  def _reduce_222(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 736)
  def _reduce_223(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 740)
  def _reduce_224(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 744)
  def _reduce_225(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 748)
  def _reduce_226(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 752)
  def _reduce_227(val, _values, result)
                          result = @builder.match_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 756)
  def _reduce_228(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 760)
  def _reduce_229(val, _values, result)
                          result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 764)
  def _reduce_230(val, _values, result)
                          result = @builder.unary_op(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 768)
  def _reduce_231(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 772)
  def _reduce_232(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 776)
  def _reduce_233(val, _values, result)
                          result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 780)
  def _reduce_234(val, _values, result)
                          result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 784)
  def _reduce_235(val, _values, result)
                          result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 788)
  def _reduce_236(val, _values, result)
                          result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
  end
.,.,

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

module_eval(<<'.,.,', 'ruby23.y', 799)
  def _reduce_241(val, _values, result)
                          result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 803)
  def _reduce_242(val, _values, result)
                          result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 808)
  def _reduce_243(val, _values, result)
                          result = val
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 813)
  def _reduce_244(val, _values, result)
                          result = [ nil, [], nil ]
                    
    result
  end
.,.,

# reduce 245 omitted

module_eval(<<'.,.,', 'ruby23.y', 819)
  def _reduce_246(val, _values, result)
                          result = []
                    
    result
  end
.,.,

# reduce 247 omitted

# reduce 248 omitted

module_eval(<<'.,.,', 'ruby23.y', 825)
  def _reduce_249(val, _values, result)
                          result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 829)
  def _reduce_250(val, _values, result)
                          result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 834)
  def _reduce_251(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 838)
  def _reduce_252(val, _values, result)
                          result = val[0].concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 842)
  def _reduce_253(val, _values, result)
                          result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 847)
  def _reduce_254(val, _values, result)
                          assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 853)
  def _reduce_255(val, _values, result)
                          result =  [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 857)
  def _reduce_256(val, _values, result)
                          result = @lexer.cmdarg.dup
                      @lexer.cmdarg.push(true)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 862)
  def _reduce_257(val, _values, result)
                          @lexer.cmdarg = val[0]

                      result = val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 869)
  def _reduce_258(val, _values, result)
                          result = @builder.block_pass(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 874)
  def _reduce_259(val, _values, result)
                          result = [ val[1] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 878)
  def _reduce_260(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 883)
  def _reduce_261(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 887)
  def _reduce_262(val, _values, result)
                          result = [ @builder.splat(val[0], val[1]) ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 891)
  def _reduce_263(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 895)
  def _reduce_264(val, _values, result)
                          result = val[0] << @builder.splat(val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 900)
  def _reduce_265(val, _values, result)
                          result = @builder.array(nil, val[0], nil)
                    
    result
  end
.,.,

# reduce 266 omitted

module_eval(<<'.,.,', 'ruby23.y', 906)
  def _reduce_267(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 910)
  def _reduce_268(val, _values, result)
                          result = val[0] << @builder.splat(val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 914)
  def _reduce_269(val, _values, result)
                          result = [ @builder.splat(val[0], val[1]) ]
                    
    result
  end
.,.,

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

module_eval(<<'.,.,', 'ruby23.y', 929)
  def _reduce_280(val, _values, result)
                          result = @builder.call_method(nil, nil, val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 933)
  def _reduce_281(val, _values, result)
                          result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 938)
  def _reduce_282(val, _values, result)
                          @lexer.cmdarg = val[1]

                      result = @builder.begin_keyword(val[0], val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 944)
  def _reduce_283(val, _values, result)
                          result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 949)
  def _reduce_284(val, _values, result)
                          @lexer.state = :expr_endarg
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 953)
  def _reduce_285(val, _values, result)
                          @lexer.cmdarg = val[1]

                      result = @builder.begin(val[0], val[2], val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 959)
  def _reduce_286(val, _values, result)
                          @lexer.state = :expr_endarg
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 963)
  def _reduce_287(val, _values, result)
                          result = @builder.begin(val[0], nil, val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 967)
  def _reduce_288(val, _values, result)
                          result = @builder.begin(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 971)
  def _reduce_289(val, _values, result)
                          result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 975)
  def _reduce_290(val, _values, result)
                          result = @builder.const_global(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 979)
  def _reduce_291(val, _values, result)
                          result = @builder.array(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 983)
  def _reduce_292(val, _values, result)
                          result = @builder.associate(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 987)
  def _reduce_293(val, _values, result)
                          result = @builder.keyword_cmd(:return, val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 991)
  def _reduce_294(val, _values, result)
                          result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 995)
  def _reduce_295(val, _values, result)
                          result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 999)
  def _reduce_296(val, _values, result)
                          result = @builder.keyword_cmd(:yield, val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1003)
  def _reduce_297(val, _values, result)
                          result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1008)
  def _reduce_298(val, _values, result)
                          result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1012)
  def _reduce_299(val, _values, result)
                          result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1016)
  def _reduce_300(val, _values, result)
                          method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
  end
.,.,

# reduce 301 omitted

module_eval(<<'.,.,', 'ruby23.y', 1025)
  def _reduce_302(val, _values, result)
                          begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1031)
  def _reduce_303(val, _values, result)
                          lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[1]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1039)
  def _reduce_304(val, _values, result)
                          else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1046)
  def _reduce_305(val, _values, result)
                          else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1053)
  def _reduce_306(val, _values, result)
                          @lexer.cond.push(true)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1057)
  def _reduce_307(val, _values, result)
                          @lexer.cond.pop
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1061)
  def _reduce_308(val, _values, result)
                          result = @builder.loop(:while, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1066)
  def _reduce_309(val, _values, result)
                          @lexer.cond.push(true)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1070)
  def _reduce_310(val, _values, result)
                          @lexer.cond.pop
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1074)
  def _reduce_311(val, _values, result)
                          result = @builder.loop(:until, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1079)
  def _reduce_312(val, _values, result)
                          *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1087)
  def _reduce_313(val, _values, result)
                          *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1095)
  def _reduce_314(val, _values, result)
                          @lexer.cond.push(true)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1099)
  def _reduce_315(val, _values, result)
                          @lexer.cond.pop
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1103)
  def _reduce_316(val, _values, result)
                          result = @builder.for(val[0], val[1],
                                            val[2], val[4],
                                            val[5], val[7], val[8])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1109)
  def _reduce_317(val, _values, result)
                          @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1114)
  def _reduce_318(val, _values, result)
                          if in_def?
                        diagnostic :error, :class_in_def, nil, val[0]
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(val[0], val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1128)
  def _reduce_319(val, _values, result)
                          result = @def_level
                      @def_level = 0

                      @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1136)
  def _reduce_320(val, _values, result)
                          result = @builder.def_sclass(val[0], val[1], val[2],
                                                   val[5], val[6])

                      @lexer.pop_cmdarg
                      @static_env.unextend

                      @def_level = val[4]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1146)
  def _reduce_321(val, _values, result)
                          @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1151)
  def _reduce_322(val, _values, result)
                          if in_def?
                        diagnostic :error, :module_in_def, nil, val[0]
                      end

                      result = @builder.def_module(val[0], val[1],
                                                   val[3], val[4])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1163)
  def _reduce_323(val, _values, result)
                          @def_level += 1
                      @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1169)
  def _reduce_324(val, _values, result)
                          result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @def_level -= 1
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1178)
  def _reduce_325(val, _values, result)
                          @lexer.state = :expr_fname
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1182)
  def _reduce_326(val, _values, result)
                          @def_level += 1
                      @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1188)
  def _reduce_327(val, _values, result)
                          result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @def_level -= 1
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1197)
  def _reduce_328(val, _values, result)
                          result = @builder.keyword_cmd(:break, val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1201)
  def _reduce_329(val, _values, result)
                          result = @builder.keyword_cmd(:next, val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1205)
  def _reduce_330(val, _values, result)
                          result = @builder.keyword_cmd(:redo, val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1209)
  def _reduce_331(val, _values, result)
                          result = @builder.keyword_cmd(:retry, val[0])
                    
    result
  end
.,.,

# reduce 332 omitted

# reduce 333 omitted

# reduce 334 omitted

module_eval(<<'.,.,', 'ruby23.y', 1218)
  def _reduce_335(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

# reduce 336 omitted

# reduce 337 omitted

# reduce 338 omitted

module_eval(<<'.,.,', 'ruby23.y', 1227)
  def _reduce_339(val, _values, result)
                          else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
  end
.,.,

# reduce 340 omitted

module_eval(<<'.,.,', 'ruby23.y', 1238)
  def _reduce_341(val, _values, result)
                          result = val
                    
    result
  end
.,.,

# reduce 342 omitted

# reduce 343 omitted

module_eval(<<'.,.,', 'ruby23.y', 1246)
  def _reduce_344(val, _values, result)
                          result = @builder.arg(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1250)
  def _reduce_345(val, _values, result)
                          result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1255)
  def _reduce_346(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1259)
  def _reduce_347(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

# reduce 348 omitted

module_eval(<<'.,.,', 'ruby23.y', 1265)
  def _reduce_349(val, _values, result)
                          result = val[0].
                                  push(@builder.restarg(val[2], val[3]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1270)
  def _reduce_350(val, _values, result)
                          result = val[0].
                                  push(@builder.restarg(val[2], val[3])).
                                  concat(val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1276)
  def _reduce_351(val, _values, result)
                          result = val[0].
                                  push(@builder.restarg(val[2]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1281)
  def _reduce_352(val, _values, result)
                          result = val[0].
                                  push(@builder.restarg(val[2])).
                                  concat(val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1287)
  def _reduce_353(val, _values, result)
                          result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1291)
  def _reduce_354(val, _values, result)
                          result = [ @builder.restarg(val[0], val[1]),
                                 *val[3] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1296)
  def _reduce_355(val, _values, result)
                          result = [ @builder.restarg(val[0]) ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1300)
  def _reduce_356(val, _values, result)
                          result = [ @builder.restarg(val[0]),
                                 *val[2] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1306)
  def _reduce_357(val, _values, result)
                          result = val[0].concat(val[2]).concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1310)
  def _reduce_358(val, _values, result)
                          result = val[0].concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1314)
  def _reduce_359(val, _values, result)
                          result = val[0].concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1318)
  def _reduce_360(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1324)
  def _reduce_361(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1328)
  def _reduce_362(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1333)
  def _reduce_363(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1340)
  def _reduce_364(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1348)
  def _reduce_365(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1354)
  def _reduce_366(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1361)
  def _reduce_367(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

# reduce 368 omitted

module_eval(<<'.,.,', 'ruby23.y', 1368)
  def _reduce_369(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1375)
  def _reduce_370(val, _values, result)
                          result = val[0].concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1379)
  def _reduce_371(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1385)
  def _reduce_372(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1392)
  def _reduce_373(val, _values, result)
                          result = val[0].
                                  concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1397)
  def _reduce_374(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1403)
  def _reduce_375(val, _values, result)
                          result = val[0].
                                  concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1408)
  def _reduce_376(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

# reduce 377 omitted

module_eval(<<'.,.,', 'ruby23.y', 1416)
  def _reduce_378(val, _values, result)
                          result = @builder.args(nil, [], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1420)
  def _reduce_379(val, _values, result)
                          @lexer.state = :expr_value
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1425)
  def _reduce_380(val, _values, result)
                          result = @builder.args(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1429)
  def _reduce_381(val, _values, result)
                          result = @builder.args(val[0], [], val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1433)
  def _reduce_382(val, _values, result)
                          result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1438)
  def _reduce_383(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1442)
  def _reduce_384(val, _values, result)
                          result = val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1447)
  def _reduce_385(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1451)
  def _reduce_386(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1456)
  def _reduce_387(val, _values, result)
                          result = @builder.shadowarg(val[0])
                    
    result
  end
.,.,

# reduce 388 omitted

module_eval(<<'.,.,', 'ruby23.y', 1461)
  def _reduce_389(val, _values, result)
                          @static_env.extend_dynamic
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1465)
  def _reduce_390(val, _values, result)
                          result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1470)
  def _reduce_391(val, _values, result)
                          @lexer.cmdarg = val[2]
                      @lexer.cmdarg.lexpop

                      result = [ val[1], val[3] ]

                      @static_env.unextend
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1480)
  def _reduce_392(val, _values, result)
                          result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1484)
  def _reduce_393(val, _values, result)
                          result = @builder.args(nil, val[0], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1489)
  def _reduce_394(val, _values, result)
                          result = [ val[0], val[1], val[2] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1493)
  def _reduce_395(val, _values, result)
                          result = [ val[0], val[1], val[2] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1498)
  def _reduce_396(val, _values, result)
                          @static_env.extend_dynamic
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1502)
  def _reduce_397(val, _values, result)
                          result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1509)
  def _reduce_398(val, _values, result)
                          begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1515)
  def _reduce_399(val, _values, result)
                          lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1521)
  def _reduce_400(val, _values, result)
                          lparen_t, args, rparen_t = val[3]
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      lparen_t, args, rparen_t)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1531)
  def _reduce_401(val, _values, result)
                          method_call = @builder.call_method(val[0], val[1], val[2],
                                      nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1541)
  def _reduce_402(val, _values, result)
                          lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1547)
  def _reduce_403(val, _values, result)
                          lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1553)
  def _reduce_404(val, _values, result)
                          lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1559)
  def _reduce_405(val, _values, result)
                          result = @builder.call_method(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1563)
  def _reduce_406(val, _values, result)
                          lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1569)
  def _reduce_407(val, _values, result)
                          lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1575)
  def _reduce_408(val, _values, result)
                          lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1581)
  def _reduce_409(val, _values, result)
                          result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1585)
  def _reduce_410(val, _values, result)
                          result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1590)
  def _reduce_411(val, _values, result)
                          @static_env.extend_dynamic
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1594)
  def _reduce_412(val, _values, result)
                          result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1600)
  def _reduce_413(val, _values, result)
                          @static_env.extend_dynamic
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1604)
  def _reduce_414(val, _values, result)
                          result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1611)
  def _reduce_415(val, _values, result)
                          result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1617)
  def _reduce_416(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

# reduce 417 omitted

module_eval(<<'.,.,', 'ruby23.y', 1623)
  def _reduce_418(val, _values, result)
                          assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1636)
  def _reduce_419(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1641)
  def _reduce_420(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

# reduce 421 omitted

# reduce 422 omitted

module_eval(<<'.,.,', 'ruby23.y', 1648)
  def _reduce_423(val, _values, result)
                          result = [ val[0], val[1] ]
                    
    result
  end
.,.,

# reduce 424 omitted

module_eval(<<'.,.,', 'ruby23.y', 1654)
  def _reduce_425(val, _values, result)
                          result = [ val[0], val[1] ]
                    
    result
  end
.,.,

# reduce 426 omitted

# reduce 427 omitted

# reduce 428 omitted

# reduce 429 omitted

module_eval(<<'.,.,', 'ruby23.y', 1664)
  def _reduce_430(val, _values, result)
                          result = @builder.string_compose(nil, val[0], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1669)
  def _reduce_431(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1673)
  def _reduce_432(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1678)
  def _reduce_433(val, _values, result)
                          string = @builder.string_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1683)
  def _reduce_434(val, _values, result)
                          string = @builder.string(val[0])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1688)
  def _reduce_435(val, _values, result)
                          result = @builder.character(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1693)
  def _reduce_436(val, _values, result)
                          string = @builder.xstring_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1699)
  def _reduce_437(val, _values, result)
                          opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1705)
  def _reduce_438(val, _values, result)
                          result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1710)
  def _reduce_439(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1714)
  def _reduce_440(val, _values, result)
                          result = val[0] << @builder.word(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1719)
  def _reduce_441(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1723)
  def _reduce_442(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1728)
  def _reduce_443(val, _values, result)
                          result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1733)
  def _reduce_444(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1737)
  def _reduce_445(val, _values, result)
                          result = val[0] << @builder.word(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1742)
  def _reduce_446(val, _values, result)
                          result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1747)
  def _reduce_447(val, _values, result)
                          result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1752)
  def _reduce_448(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1756)
  def _reduce_449(val, _values, result)
                          result = val[0] << @builder.string_internal(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1761)
  def _reduce_450(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1765)
  def _reduce_451(val, _values, result)
                          result = val[0] << @builder.symbol_internal(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1770)
  def _reduce_452(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1774)
  def _reduce_453(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1779)
  def _reduce_454(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1783)
  def _reduce_455(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1788)
  def _reduce_456(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1792)
  def _reduce_457(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1797)
  def _reduce_458(val, _values, result)
                          result = @builder.string_internal(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1801)
  def _reduce_459(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1805)
  def _reduce_460(val, _values, result)
                          @lexer.cond.push(false)
                      @lexer.cmdarg.push(false)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1810)
  def _reduce_461(val, _values, result)
                          @lexer.cond.lexpop
                      @lexer.cmdarg.lexpop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1818)
  def _reduce_462(val, _values, result)
                          result = @builder.gvar(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1822)
  def _reduce_463(val, _values, result)
                          result = @builder.ivar(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1826)
  def _reduce_464(val, _values, result)
                          result = @builder.cvar(val[0])
                    
    result
  end
.,.,

# reduce 465 omitted

module_eval(<<'.,.,', 'ruby23.y', 1833)
  def _reduce_466(val, _values, result)
                          result = @builder.symbol(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1838)
  def _reduce_467(val, _values, result)
                          result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1843)
  def _reduce_468(val, _values, result)
                          result = val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1847)
  def _reduce_469(val, _values, result)
                          result = @builder.negate(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1852)
  def _reduce_470(val, _values, result)
                          result = @builder.integer(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1856)
  def _reduce_471(val, _values, result)
                          result = @builder.float(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1860)
  def _reduce_472(val, _values, result)
                          result = @builder.rational(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1864)
  def _reduce_473(val, _values, result)
                          result = @builder.complex(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1869)
  def _reduce_474(val, _values, result)
                          result = @builder.ident(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1873)
  def _reduce_475(val, _values, result)
                          result = @builder.ivar(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1877)
  def _reduce_476(val, _values, result)
                          result = @builder.gvar(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1881)
  def _reduce_477(val, _values, result)
                          result = @builder.const(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1885)
  def _reduce_478(val, _values, result)
                          result = @builder.cvar(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1890)
  def _reduce_479(val, _values, result)
                          result = @builder.nil(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1894)
  def _reduce_480(val, _values, result)
                          result = @builder.self(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1898)
  def _reduce_481(val, _values, result)
                          result = @builder.true(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1902)
  def _reduce_482(val, _values, result)
                          result = @builder.false(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1906)
  def _reduce_483(val, _values, result)
                          result = @builder.__FILE__(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1910)
  def _reduce_484(val, _values, result)
                          result = @builder.__LINE__(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1914)
  def _reduce_485(val, _values, result)
                          result = @builder.__ENCODING__(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1919)
  def _reduce_486(val, _values, result)
                          result = @builder.accessible(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1923)
  def _reduce_487(val, _values, result)
                          result = @builder.accessible(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1928)
  def _reduce_488(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1932)
  def _reduce_489(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1937)
  def _reduce_490(val, _values, result)
                          result = @builder.nth_ref(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1941)
  def _reduce_491(val, _values, result)
                          result = @builder.back_ref(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1946)
  def _reduce_492(val, _values, result)
                          @lexer.state = :expr_value
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1950)
  def _reduce_493(val, _values, result)
                          result = [ val[0], val[2] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1954)
  def _reduce_494(val, _values, result)
                          result = nil
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1959)
  def _reduce_495(val, _values, result)
                          result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1964)
  def _reduce_496(val, _values, result)
                          result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1969)
  def _reduce_497(val, _values, result)
                          @lexer.in_kwarg = val[0]
                      result = @builder.args(nil, val[1], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1975)
  def _reduce_498(val, _values, result)
                          result = val[0].concat(val[2]).concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1979)
  def _reduce_499(val, _values, result)
                          result = val[0].concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1983)
  def _reduce_500(val, _values, result)
                          result = val[0].concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1987)
  def _reduce_501(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1992)
  def _reduce_502(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1996)
  def _reduce_503(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2001)
  def _reduce_504(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2008)
  def _reduce_505(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2016)
  def _reduce_506(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2022)
  def _reduce_507(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2029)
  def _reduce_508(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2035)
  def _reduce_509(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2042)
  def _reduce_510(val, _values, result)
                          result = val[0].
                                  concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2047)
  def _reduce_511(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2053)
  def _reduce_512(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2060)
  def _reduce_513(val, _values, result)
                          result = val[0].
                                  concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2065)
  def _reduce_514(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2071)
  def _reduce_515(val, _values, result)
                          result = val[0].
                                  concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2076)
  def _reduce_516(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2082)
  def _reduce_517(val, _values, result)
                          result = val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2086)
  def _reduce_518(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2091)
  def _reduce_519(val, _values, result)
                          diagnostic :error, :argument_const, nil, val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2095)
  def _reduce_520(val, _values, result)
                          diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2099)
  def _reduce_521(val, _values, result)
                          diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2103)
  def _reduce_522(val, _values, result)
                          diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
  end
.,.,

# reduce 523 omitted

module_eval(<<'.,.,', 'ruby23.y', 2109)
  def _reduce_524(val, _values, result)
                          @static_env.declare val[0][0]

                      result = val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2116)
  def _reduce_525(val, _values, result)
                          result = val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2121)
  def _reduce_526(val, _values, result)
                          result = @builder.arg(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2125)
  def _reduce_527(val, _values, result)
                          result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2130)
  def _reduce_528(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2134)
  def _reduce_529(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2139)
  def _reduce_530(val, _values, result)
                          check_kwarg_name(val[0])

                      @static_env.declare val[0][0]

                      result = val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2148)
  def _reduce_531(val, _values, result)
                          result = @builder.kwoptarg(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2152)
  def _reduce_532(val, _values, result)
                          result = @builder.kwarg(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2157)
  def _reduce_533(val, _values, result)
                          result = @builder.kwoptarg(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2161)
  def _reduce_534(val, _values, result)
                          result = @builder.kwarg(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2166)
  def _reduce_535(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2170)
  def _reduce_536(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2175)
  def _reduce_537(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2179)
  def _reduce_538(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

# reduce 539 omitted

# reduce 540 omitted

module_eval(<<'.,.,', 'ruby23.y', 2186)
  def _reduce_541(val, _values, result)
                          @static_env.declare val[1][0]

                      result = [ @builder.kwrestarg(val[0], val[1]) ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2192)
  def _reduce_542(val, _values, result)
                          result = [ @builder.kwrestarg(val[0]) ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2197)
  def _reduce_543(val, _values, result)
                          result = @builder.optarg(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2202)
  def _reduce_544(val, _values, result)
                          result = @builder.optarg(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2207)
  def _reduce_545(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2211)
  def _reduce_546(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2216)
  def _reduce_547(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2220)
  def _reduce_548(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

# reduce 549 omitted

# reduce 550 omitted

module_eval(<<'.,.,', 'ruby23.y', 2227)
  def _reduce_551(val, _values, result)
                          @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2233)
  def _reduce_552(val, _values, result)
                          result = [ @builder.restarg(val[0]) ]
                    
    result
  end
.,.,

# reduce 553 omitted

# reduce 554 omitted

module_eval(<<'.,.,', 'ruby23.y', 2240)
  def _reduce_555(val, _values, result)
                          @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2247)
  def _reduce_556(val, _values, result)
                          result = [ val[1] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2251)
  def _reduce_557(val, _values, result)
                          result = []
                    
    result
  end
.,.,

# reduce 558 omitted

module_eval(<<'.,.,', 'ruby23.y', 2257)
  def _reduce_559(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2262)
  def _reduce_560(val, _values, result)
                          result = []
                    
    result
  end
.,.,

# reduce 561 omitted

module_eval(<<'.,.,', 'ruby23.y', 2268)
  def _reduce_562(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2272)
  def _reduce_563(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2277)
  def _reduce_564(val, _values, result)
                          result = @builder.pair(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2281)
  def _reduce_565(val, _values, result)
                          result = @builder.pair_keyword(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2285)
  def _reduce_566(val, _values, result)
                          result = @builder.pair_quoted(val[0], val[1], val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2289)
  def _reduce_567(val, _values, result)
                          result = @builder.kwsplat(val[0], val[1])
                    
    result
  end
.,.,

# reduce 568 omitted

# reduce 569 omitted

# reduce 570 omitted

# reduce 571 omitted

# reduce 572 omitted

# reduce 573 omitted

# reduce 574 omitted

# reduce 575 omitted

# reduce 576 omitted

# reduce 577 omitted

# reduce 578 omitted

# reduce 579 omitted

module_eval(<<'.,.,', 'ruby23.y', 2298)
  def _reduce_580(val, _values, result)
                          result = [:dot, val[0][1]]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2302)
  def _reduce_581(val, _values, result)
                          result = [:anddot, val[0][1]]
                    
    result
  end
.,.,

# reduce 582 omitted

# reduce 583 omitted

# reduce 584 omitted

# reduce 585 omitted

module_eval(<<'.,.,', 'ruby23.y', 2308)
  def _reduce_586(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2312)
  def _reduce_587(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

# reduce 588 omitted

# reduce 589 omitted

# reduce 590 omitted

module_eval(<<'.,.,', 'ruby23.y', 2318)
  def _reduce_591(val, _values, result)
                        yyerrok
                  
    result
  end
.,.,

# reduce 592 omitted

# reduce 593 omitted

# reduce 594 omitted

module_eval(<<'.,.,', 'ruby23.y', 2327)
  def _reduce_595(val, _values, result)
                        result = nil
                  
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby23
  end   # module Parser
